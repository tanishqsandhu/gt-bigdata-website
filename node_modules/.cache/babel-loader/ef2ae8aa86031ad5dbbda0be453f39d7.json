{"ast":null,"code":"import { filterDOMProps as $6zZKe$filterDOMProps, mergeProps as $6zZKe$mergeProps, useId as $6zZKe$useId } from \"@react-aria/utils\";\nimport { useHover as $6zZKe$useHover, getInteractionModality as $6zZKe$getInteractionModality, isFocusVisible as $6zZKe$isFocusVisible, usePress as $6zZKe$usePress } from \"@react-aria/interactions\";\nimport { useRef as $6zZKe$useRef, useEffect as $6zZKe$useEffect } from \"react\";\nimport { useFocusable as $6zZKe$useFocusable } from \"@react-aria/focus\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $d9a216fc29ad9bb6$exports = {};\n$parcel$export($d9a216fc29ad9bb6$exports, \"useTooltip\", () => $d9a216fc29ad9bb6$export$1c4b08e0eca38426);\n\nfunction $d9a216fc29ad9bb6$export$1c4b08e0eca38426(props, state) {\n  let domProps = $6zZKe$filterDOMProps(props, {\n    labelable: true\n  });\n  let {\n    hoverProps: hoverProps\n  } = $6zZKe$useHover({\n    onHoverStart: () => {\n      return state === null || state === void 0 ? void 0 : state.open(true);\n    },\n    onHoverEnd: () => {\n      return state === null || state === void 0 ? void 0 : state.close();\n    }\n  });\n  return {\n    tooltipProps: $6zZKe$mergeProps(domProps, hoverProps, {\n      role: 'tooltip'\n    })\n  };\n}\n\nvar $7203085f153208e4$exports = {};\n$parcel$export($7203085f153208e4$exports, \"useTooltipTrigger\", () => $7203085f153208e4$export$a6da6c504e4bba8b);\n\nfunction $7203085f153208e4$export$a6da6c504e4bba8b(props, state, ref) {\n  let {\n    isDisabled: isDisabled,\n    trigger: trigger\n  } = props;\n  let tooltipId = $6zZKe$useId();\n  let isHovered = $6zZKe$useRef(false);\n  let isFocused = $6zZKe$useRef(false);\n\n  let handleShow = () => {\n    if (isHovered.current || isFocused.current) state.open(isFocused.current);\n  };\n\n  let handleHide = immediate => {\n    if (!isHovered.current && !isFocused.current) state.close(immediate);\n  };\n\n  $6zZKe$useEffect(() => {\n    let onKeyDown = e => {\n      if (ref && ref.current) // Escape after clicking something can give it keyboard focus\n        // dismiss tooltip on esc key press\n        {\n          if (e.key === 'Escape') state.close(true);\n        }\n    };\n\n    if (state.isOpen) {\n      document.addEventListener('keydown', onKeyDown, true);\n      return () => {\n        document.removeEventListener('keydown', onKeyDown, true);\n      };\n    }\n  }, [ref, state]);\n\n  let onHoverStart = () => {\n    if (trigger === 'focus') return; // In chrome, if you hover a trigger, then another element obscures it, due to keyboard\n    // interactions for example, hover will end. When hover is restored after that element disappears,\n    // focus moves on for example, then the tooltip will reopen. We check the modality to know if the hover\n    // is the result of moving the mouse.\n\n    if ($6zZKe$getInteractionModality() === 'pointer') isHovered.current = true;else isHovered.current = false;\n    handleShow();\n  };\n\n  let onHoverEnd = () => {\n    if (trigger === 'focus') return; // no matter how the trigger is left, we should close the tooltip\n\n    isFocused.current = false;\n    isHovered.current = false;\n    handleHide();\n  };\n\n  let onPressStart = () => {\n    // no matter how the trigger is pressed, we should close the tooltip\n    isFocused.current = false;\n    isHovered.current = false;\n    handleHide(true);\n  };\n\n  let onFocus = () => {\n    let isVisible = $6zZKe$isFocusVisible();\n\n    if (isVisible) {\n      isFocused.current = true;\n      handleShow();\n    }\n  };\n\n  let onBlur = () => {\n    isFocused.current = false;\n    isHovered.current = false;\n    handleHide(true);\n  };\n\n  let {\n    hoverProps: hoverProps\n  } = $6zZKe$useHover({\n    isDisabled: isDisabled,\n    onHoverStart: onHoverStart,\n    onHoverEnd: onHoverEnd\n  });\n  let {\n    pressProps: pressProps\n  } = $6zZKe$usePress({\n    onPressStart: onPressStart\n  });\n  let {\n    focusableProps: focusableProps\n  } = $6zZKe$useFocusable({\n    isDisabled: isDisabled,\n    onFocus: onFocus,\n    onBlur: onBlur\n  }, ref);\n  return {\n    triggerProps: {\n      'aria-describedby': state.isOpen ? tooltipId : undefined,\n      ...$6zZKe$mergeProps(focusableProps, hoverProps, pressProps)\n    },\n    tooltipProps: {\n      id: tooltipId\n    }\n  };\n}\n\nexport { $d9a216fc29ad9bb6$export$1c4b08e0eca38426 as useTooltip, $7203085f153208e4$export$a6da6c504e4bba8b as useTooltipTrigger };","map":{"version":3,"mappings":"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","names":["$d9a216fc29ad9bb6$export$1c4b08e0eca38426","props","state","domProps","$6zZKe$filterDOMProps","labelable","hoverProps","$6zZKe$useHover","onHoverStart","open","onHoverEnd","close","tooltipProps","$6zZKe$mergeProps","role","$7203085f153208e4$export$a6da6c504e4bba8b","ref","isDisabled","trigger","tooltipId","$6zZKe$useId","isHovered","$6zZKe$useRef","isFocused","handleShow","current","handleHide","immediate","$6zZKe$useEffect","onKeyDown","e","key","isOpen","document","addEventListener","removeEventListener","$6zZKe$getInteractionModality","onPressStart","onFocus","isVisible","$6zZKe$isFocusVisible","onBlur","pressProps","$6zZKe$usePress","focusableProps","$6zZKe$useFocusable","triggerProps","undefined","id"],"sources":["/Users/asattiraju/Desktop/Big data/gt-bigdata-website/node_modules/@react-aria/tooltip/dist/packages/@react-aria/tooltip/src/useTooltip.ts","/Users/asattiraju/Desktop/Big data/gt-bigdata-website/node_modules/@react-aria/tooltip/dist/packages/@react-aria/tooltip/src/useTooltipTrigger.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaTooltipProps} from '@react-types/tooltip';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {HTMLAttributes} from 'react';\nimport {TooltipTriggerState} from '@react-stately/tooltip';\nimport {useHover} from '@react-aria/interactions';\n\ninterface TooltipAria {\n  /**\n   * Props for the tooltip element.\n   */\n  tooltipProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the accessibility implementation for a Tooltip component.\n */\nexport function useTooltip(props: AriaTooltipProps, state?: TooltipTriggerState): TooltipAria {\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  let {hoverProps} = useHover({\n    onHoverStart: () => state?.open(true),\n    onHoverEnd: () => state?.close()\n  });\n\n  return {\n    tooltipProps: mergeProps(domProps, hoverProps, {\n      role: 'tooltip'\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusEvents} from '@react-types/shared';\nimport {getInteractionModality, HoverProps, isFocusVisible, PressProps, usePress} from '@react-aria/interactions';\nimport {HTMLAttributes, RefObject, useEffect, useRef} from 'react';\nimport {mergeProps, useId} from '@react-aria/utils';\nimport {TooltipTriggerProps} from '@react-types/tooltip';\nimport {TooltipTriggerState} from '@react-stately/tooltip';\nimport {useFocusable} from '@react-aria/focus';\nimport {useHover} from '@react-aria/interactions';\n\ninterface TooltipTriggerAria {\n  /**\n   * Props for the trigger element.\n   */\n  triggerProps: HTMLAttributes<HTMLElement> & PressProps & HoverProps & FocusEvents,\n\n  /**\n   * Props for the overlay container element.\n   */\n  tooltipProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a tooltip trigger, e.g. a button\n * that shows a description when focused or hovered.\n */\nexport function useTooltipTrigger(props: TooltipTriggerProps, state: TooltipTriggerState, ref: RefObject<HTMLElement>) : TooltipTriggerAria {\n  let {\n    isDisabled,\n    trigger\n  } = props;\n\n  let tooltipId = useId();\n\n  let isHovered = useRef(false);\n  let isFocused = useRef(false);\n\n  let handleShow = () => {\n    if (isHovered.current || isFocused.current) {\n      state.open(isFocused.current);\n    }\n  };\n\n  let handleHide = (immediate?: boolean) => {\n    if (!isHovered.current && !isFocused.current) {\n      state.close(immediate);\n    }\n  };\n\n  useEffect(() => {\n    let onKeyDown = (e) => {\n      if (ref && ref.current) {\n        // Escape after clicking something can give it keyboard focus\n        // dismiss tooltip on esc key press\n        if (e.key === 'Escape') {\n          state.close(true);\n        }\n      }\n    };\n    if (state.isOpen) {\n      document.addEventListener('keydown', onKeyDown, true);\n      return () => {\n        document.removeEventListener('keydown', onKeyDown, true);\n      };\n    }\n  }, [ref, state]);\n\n  let onHoverStart = () => {\n    if (trigger === 'focus') {\n      return;\n    }\n    // In chrome, if you hover a trigger, then another element obscures it, due to keyboard\n    // interactions for example, hover will end. When hover is restored after that element disappears,\n    // focus moves on for example, then the tooltip will reopen. We check the modality to know if the hover\n    // is the result of moving the mouse.\n    if (getInteractionModality() === 'pointer') {\n      isHovered.current = true;\n    } else {\n      isHovered.current = false;\n    }\n    handleShow();\n  };\n\n  let onHoverEnd = () => {\n    if (trigger === 'focus') {\n      return;\n    }\n    // no matter how the trigger is left, we should close the tooltip\n    isFocused.current = false;\n    isHovered.current = false;\n    handleHide();\n  };\n\n  let onPressStart = () => {\n    // no matter how the trigger is pressed, we should close the tooltip\n    isFocused.current = false;\n    isHovered.current = false;\n    handleHide(true);\n  };\n\n  let onFocus = () => {\n    let isVisible = isFocusVisible();\n    if (isVisible) {\n      isFocused.current = true;\n      handleShow();\n    }\n  };\n\n  let onBlur = () => {\n    isFocused.current = false;\n    isHovered.current = false;\n    handleHide(true);\n  };\n\n  let {hoverProps} = useHover({\n    isDisabled,\n    onHoverStart,\n    onHoverEnd\n  });\n\n  let {pressProps} = usePress({onPressStart});\n\n  let {focusableProps} = useFocusable({\n    isDisabled,\n    onFocus,\n    onBlur\n  }, ref);\n\n  return {\n    triggerProps: {\n      'aria-describedby': state.isOpen ? tooltipId : undefined,\n      ...mergeProps(focusableProps, hoverProps, pressProps)\n    },\n    tooltipProps: {\n      id: tooltipId\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}