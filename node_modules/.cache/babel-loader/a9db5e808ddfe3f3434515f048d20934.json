{"ast":null,"code":"import { useSingleSelectListState as $ijHKZ$useSingleSelectListState } from \"@react-stately/list\";\nimport { useRef as $ijHKZ$useRef } from \"react\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $76f919a04c5a7d14$exports = {};\n$parcel$export($76f919a04c5a7d14$exports, \"useTabListState\", () => $76f919a04c5a7d14$export$4ba071daf4e486);\n\nfunction $76f919a04c5a7d14$export$4ba071daf4e486(props) {\n  let state = $ijHKZ$useSingleSelectListState({ ...props,\n    suppressTextValueWarning: true\n  });\n  let {\n    selectionManager: selectionManager,\n    collection: collection,\n    selectedKey: currentSelectedKey\n  } = state;\n  let lastSelectedKey = $ijHKZ$useRef(currentSelectedKey); // Ensure a tab is always selected (in case no selected key was specified or if selected item was deleted from collection)\n\n  let selectedKey = currentSelectedKey;\n\n  if (selectionManager.isEmpty || !collection.getItem(selectedKey)) {\n    selectedKey = collection.getFirstKey();\n    selectionManager.replaceSelection(selectedKey);\n  } // If the tablist doesn't have focus and the selected key changes or if there isn't a focused key yet, change focused key to the selected key if it exists.\n\n\n  if (selectionManager.focusedKey == null || !selectionManager.isFocused && selectedKey !== lastSelectedKey.current) selectionManager.setFocusedKey(selectedKey);\n  lastSelectedKey.current = selectedKey;\n  return state;\n}\n\nexport { $76f919a04c5a7d14$export$4ba071daf4e486 as useTabListState };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;SAuBgBA,wCAAkCC,OAAyC;AACzF,MAAIC,KAAK,GAAGC,+BAAwB,CAAI,KACnCF,KADmC;AAEtCG,4BAAwB,EAAE;AAFY,GAAJ,CAApC;AAKA,MAAI;AAACC,sBACHA,gBADE;AACcC,gBAChBA,UAFE;AAGFC,eAAW,EAAEC;AAHX,MAIAN,KAJJ;AAMA,MAAIO,eAAe,GAAGC,aAAM,CAACF,kBAAD,CAA5B,CAZyF,CAazF;;AACA,MAAID,WAAW,GAAGC,kBAAlB;;AACA,MAAIH,gBAAgB,CAACM,OAAjB,IAAwB,CAAKL,UAAU,CAACM,OAAX,CAAmBL,WAAnB,CAAjC,EAAkE;AAChEA,eAAW,GAAGD,UAAU,CAACO,WAAX,EAAd;AACAR,oBAAgB,CAACS,gBAAjB,CAAkCP,WAAlC;AACD,GAlBwF,CAoBzF;;;AACA,MAAIF,gBAAgB,CAACU,UAAjB,IAA+B,IAA/B,IAAmC,CAAMV,gBAAgB,CAACW,SAAvB,IAAoCT,WAAW,KAAKE,eAAe,CAACQ,OAA3G,EACEZ,gBAAgB,CAACa,aAAjB,CAA+BX,WAA/B;AAEFE,iBAAe,CAACQ,OAAhB,GAA0BV,WAA1B;AAEA,SAAOL,KAAP;AACD","names":["$76f919a04c5a7d14$export$4ba071daf4e486","props","state","$ijHKZ$useSingleSelectListState","suppressTextValueWarning","selectionManager","collection","selectedKey","currentSelectedKey","lastSelectedKey","$ijHKZ$useRef","isEmpty","getItem","getFirstKey","replaceSelection","focusedKey","isFocused","current","setFocusedKey"],"sources":["C:\\Users\\ev3rg\\OneDrive\\Documents\\GitHub\\gt-bigdata-website\\node_modules\\@react-stately\\tabs\\dist\\packages\\@react-stately\\tabs\\src\\useTabListState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {SingleSelectListState, useSingleSelectListState} from '@react-stately/list';\nimport {TabListProps} from '@react-types/tabs';\nimport {useRef} from 'react';\n\n\nexport interface TabListState<T> extends SingleSelectListState<T> {}\n\n/**\n * Provides state management for a Tabs component. Tabs include a TabList which tracks\n * which tab is currently selected and displays the content associated with that Tab in a TabPanel.\n */\nexport function useTabListState<T extends object>(props: TabListProps<T>): TabListState<T> {\n  let state = useSingleSelectListState<T>({\n    ...props,\n    suppressTextValueWarning: true\n  });\n\n  let {\n    selectionManager,\n    collection,\n    selectedKey: currentSelectedKey\n  } = state;\n\n  let lastSelectedKey = useRef(currentSelectedKey);\n  // Ensure a tab is always selected (in case no selected key was specified or if selected item was deleted from collection)\n  let selectedKey = currentSelectedKey;\n  if (selectionManager.isEmpty || !collection.getItem(selectedKey)) {\n    selectedKey = collection.getFirstKey();\n    selectionManager.replaceSelection(selectedKey);\n  }\n\n  // If the tablist doesn't have focus and the selected key changes or if there isn't a focused key yet, change focused key to the selected key if it exists.\n  if (selectionManager.focusedKey == null || (!selectionManager.isFocused && selectedKey !== lastSelectedKey.current)) {\n    selectionManager.setFocusedKey(selectedKey);\n  }\n  lastSelectedKey.current = selectedKey;\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}