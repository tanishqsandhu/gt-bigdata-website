{"ast":null,"code":"import { useSelectableItem as $G86Z8$useSelectableItem, useSelectableCollection as $G86Z8$useSelectableCollection } from \"@react-aria/selection\";\nimport { getFocusableTreeWalker as $G86Z8$getFocusableTreeWalker } from \"@react-aria/focus\";\nimport { useState as $G86Z8$useState, useMemo as $G86Z8$useMemo } from \"react\";\nimport { useLayoutEffect as $G86Z8$useLayoutEffect, useLabels as $G86Z8$useLabels, mergeProps as $G86Z8$mergeProps, useId as $G86Z8$useId } from \"@react-aria/utils\";\nimport { useLocale as $G86Z8$useLocale } from \"@react-aria/i18n\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $fbeca008f459f5aa$exports = {};\n$parcel$export($fbeca008f459f5aa$exports, \"useTab\", () => $fbeca008f459f5aa$export$fdf4756d5b8ef90a);\nconst $2bc294289400274c$export$c5f62239608282b6 = new WeakMap();\n\nfunction $2bc294289400274c$export$567fc7097e064344(state, key, role) {\n  if (typeof key === 'string') key = key.replace(/\\s+/g, '');\n  let baseId = $2bc294289400274c$export$c5f62239608282b6.get(state);\n  return `${baseId}-${role}-${key}`;\n}\n\nfunction $fbeca008f459f5aa$export$fdf4756d5b8ef90a(props, state, ref) {\n  let {\n    key: key,\n    isDisabled: propsDisabled\n  } = props;\n  let {\n    selectionManager: manager,\n    selectedKey: selectedKey\n  } = state;\n  let isSelected = key === selectedKey;\n  let isDisabled = propsDisabled || state.disabledKeys.has(key);\n  let {\n    itemProps: itemProps\n  } = $G86Z8$useSelectableItem({\n    selectionManager: manager,\n    key: key,\n    ref: ref,\n    isDisabled: isDisabled\n  });\n  let tabId = $2bc294289400274c$export$567fc7097e064344(state, key, 'tab');\n  let tabPanelId = $2bc294289400274c$export$567fc7097e064344(state, key, 'tabpanel');\n  let {\n    tabIndex: tabIndex\n  } = itemProps;\n  return {\n    tabProps: { ...itemProps,\n      id: tabId,\n      'aria-selected': isSelected,\n      'aria-disabled': isDisabled || undefined,\n      'aria-controls': isSelected ? tabPanelId : undefined,\n      tabIndex: isDisabled ? undefined : tabIndex,\n      role: 'tab'\n    }\n  };\n}\n\nvar $bc77009ac794dd15$exports = {};\n$parcel$export($bc77009ac794dd15$exports, \"useTabPanel\", () => $bc77009ac794dd15$export$fae0121b5afe572d);\n\nfunction $bc77009ac794dd15$export$fae0121b5afe572d(props, state, ref) {\n  let [tabIndex, setTabIndex] = $G86Z8$useState(0); // The tabpanel should have tabIndex=0 when there are no tabbable elements within it.\n  // Otherwise, tabbing from the focused tab should go directly to the first tabbable element\n  // within the tabpanel.\n\n  $G86Z8$useLayoutEffect(() => {\n    if (ref === null || ref === void 0 ? void 0 : ref.current) {\n      let update = () => {\n        // Detect if there are any tabbable elements and update the tabIndex accordingly.\n        let walker = $G86Z8$getFocusableTreeWalker(ref.current, {\n          tabbable: true\n        });\n        setTabIndex(walker.nextNode() ? undefined : 0);\n      };\n\n      update(); // Update when new elements are inserted, or the tabIndex/disabled attribute updates.\n\n      let observer = new MutationObserver(update);\n      observer.observe(ref.current, {\n        subtree: true,\n        childList: true,\n        attributes: true,\n        attributeFilter: ['tabIndex', 'disabled']\n      });\n      return () => {\n        observer.disconnect();\n      };\n    }\n  }, [ref]);\n  const id = $2bc294289400274c$export$567fc7097e064344(state, state === null || state === void 0 ? void 0 : state.selectedKey, 'tabpanel');\n  const tabPanelProps = $G86Z8$useLabels({ ...props,\n    id: id,\n    'aria-labelledby': $2bc294289400274c$export$567fc7097e064344(state, state === null || state === void 0 ? void 0 : state.selectedKey, 'tab')\n  });\n  return {\n    tabPanelProps: $G86Z8$mergeProps(tabPanelProps, {\n      tabIndex: tabIndex,\n      role: 'tabpanel',\n      'aria-describedby': props['aria-describedby'],\n      'aria-details': props['aria-details']\n    })\n  };\n}\n\nvar $67cd7a6663dbdf35$exports = {};\n$parcel$export($67cd7a6663dbdf35$exports, \"useTabList\", () => $67cd7a6663dbdf35$export$773e389e644c5874);\n\nclass $d9c38f86f4c836f2$export$15010ca3c1abe90b {\n  getKeyLeftOf(key) {\n    if (this.flipDirection) return this.getNextKey(key);else {\n      if (this.orientation === 'horizontal') return this.getPreviousKey(key);\n      return null;\n    }\n  }\n\n  getKeyRightOf(key) {\n    if (this.flipDirection) return this.getPreviousKey(key);else {\n      if (this.orientation === 'horizontal') return this.getNextKey(key);\n      return null;\n    }\n  }\n\n  getKeyAbove(key) {\n    if (this.orientation === 'vertical') return this.getPreviousKey(key);\n    return null;\n  }\n\n  getKeyBelow(key) {\n    if (this.orientation === 'vertical') return this.getNextKey(key);\n    return null;\n  }\n\n  getFirstKey() {\n    let key = this.collection.getFirstKey();\n    if (this.disabledKeys.has(key)) key = this.getNextKey(key);\n    return key;\n  }\n\n  getLastKey() {\n    let key = this.collection.getLastKey();\n    if (this.disabledKeys.has(key)) key = this.getPreviousKey(key);\n    return key;\n  }\n\n  getNextKey(key) {\n    do {\n      key = this.collection.getKeyAfter(key);\n      if (key == null) key = this.collection.getFirstKey();\n    } while (this.disabledKeys.has(key));\n\n    return key;\n  }\n\n  getPreviousKey(key) {\n    do {\n      key = this.collection.getKeyBefore(key);\n      if (key == null) key = this.collection.getLastKey();\n    } while (this.disabledKeys.has(key));\n\n    return key;\n  }\n\n  constructor(collection, direction, orientation) {\n    let disabledKeys = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Set();\n    this.collection = collection;\n    this.flipDirection = direction === 'rtl' && orientation === 'horizontal';\n    this.orientation = orientation;\n    this.disabledKeys = disabledKeys;\n  }\n\n}\n\nfunction $67cd7a6663dbdf35$export$773e389e644c5874(props, state, ref) {\n  let {\n    orientation = 'horizontal',\n    keyboardActivation = 'automatic'\n  } = props;\n  let {\n    collection: collection,\n    selectionManager: manager,\n    disabledKeys: disabledKeys\n  } = state;\n  let {\n    direction: direction\n  } = $G86Z8$useLocale();\n  let delegate = $G86Z8$useMemo(() => new $d9c38f86f4c836f2$export$15010ca3c1abe90b(collection, direction, orientation, disabledKeys), [collection, disabledKeys, orientation, direction]);\n  let {\n    collectionProps: collectionProps\n  } = $G86Z8$useSelectableCollection({\n    ref: ref,\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    selectOnFocus: keyboardActivation === 'automatic',\n    disallowEmptySelection: true,\n    scrollRef: ref\n  }); // Compute base id for all tabs\n\n  let tabsId = $G86Z8$useId();\n  $2bc294289400274c$export$c5f62239608282b6.set(state, tabsId);\n  let tabListLabelProps = $G86Z8$useLabels({ ...props,\n    id: tabsId\n  });\n  return {\n    tabListProps: { ...$G86Z8$mergeProps(collectionProps, tabListLabelProps),\n      role: 'tablist',\n      'aria-orientation': orientation,\n      tabIndex: undefined\n    }\n  };\n}\n\nexport { $fbeca008f459f5aa$export$fdf4756d5b8ef90a as useTab, $bc77009ac794dd15$export$fae0121b5afe572d as useTabPanel, $67cd7a6663dbdf35$export$773e389e644c5874 as useTabList };","map":{"version":3,"mappings":"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","names":["$2bc294289400274c$export$c5f62239608282b6","WeakMap","$2bc294289400274c$export$567fc7097e064344","state","key","role","replace","baseId","get","$fbeca008f459f5aa$export$fdf4756d5b8ef90a","props","ref","isDisabled","propsDisabled","selectionManager","manager","selectedKey","isSelected","disabledKeys","has","itemProps","$G86Z8$useSelectableItem","tabId","tabPanelId","tabIndex","tabProps","id","undefined","$bc77009ac794dd15$export$fae0121b5afe572d","setTabIndex","$G86Z8$useState","$G86Z8$useLayoutEffect","current","update","walker","$G86Z8$getFocusableTreeWalker","tabbable","nextNode","observer","MutationObserver","observe","subtree","childList","attributes","attributeFilter","disconnect","tabPanelProps","$G86Z8$useLabels","$G86Z8$mergeProps","$d9c38f86f4c836f2$export$15010ca3c1abe90b","getKeyLeftOf","flipDirection","getNextKey","orientation","getPreviousKey","getKeyRightOf","getKeyAbove","getKeyBelow","getFirstKey","collection","getLastKey","getKeyAfter","getKeyBefore","direction","Set","$67cd7a6663dbdf35$export$773e389e644c5874","keyboardActivation","$G86Z8$useLocale","delegate","$G86Z8$useMemo","collectionProps","$G86Z8$useSelectableCollection","keyboardDelegate","selectOnFocus","disallowEmptySelection","scrollRef","tabsId","$G86Z8$useId","set","tabListLabelProps","tabListProps"],"sources":["/Users/asattiraju/Desktop/gt-bigdata-website/node_modules/@react-aria/tabs/dist/packages/@react-aria/tabs/src/utils.ts","/Users/asattiraju/Desktop/gt-bigdata-website/node_modules/@react-aria/tabs/dist/packages/@react-aria/tabs/src/useTab.ts","/Users/asattiraju/Desktop/gt-bigdata-website/node_modules/@react-aria/tabs/dist/packages/@react-aria/tabs/src/useTabPanel.ts","/Users/asattiraju/Desktop/gt-bigdata-website/node_modules/@react-aria/tabs/dist/packages/@react-aria/tabs/src/TabsKeyboardDelegate.ts","/Users/asattiraju/Desktop/gt-bigdata-website/node_modules/@react-aria/tabs/dist/packages/@react-aria/tabs/src/useTabList.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {TabListState} from '@react-stately/tabs';\n\nexport const tabsIds = new WeakMap<TabListState<unknown>, string>();\n\nexport function generateId<T>(state: TabListState<T>, key: Key, role: string) {\n  if (typeof key === 'string') {\n    key = key.replace(/\\s+/g, '');\n  }\n\n  let baseId = tabsIds.get(state);\n  return `${baseId}-${role}-${key}`;\n}\n\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaTabProps} from '@react-types/tabs';\nimport {generateId} from './utils';\nimport {HTMLAttributes, RefObject} from 'react';\nimport {TabListState} from '@react-stately/tabs';\nimport {useSelectableItem} from '@react-aria/selection';\n\ninterface TabAria {\n  /** Props for the tab element. */\n  tabProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a tab.\n * When selected, the associated tab panel is shown.\n */\nexport function useTab<T>(\n  props: AriaTabProps,\n  state: TabListState<T>,\n  ref: RefObject<HTMLElement>\n): TabAria {\n  let {key, isDisabled: propsDisabled} = props;\n  let {selectionManager: manager, selectedKey} = state;\n\n  let isSelected = key === selectedKey;\n\n  let isDisabled = propsDisabled || state.disabledKeys.has(key);\n  let {itemProps} = useSelectableItem({\n    selectionManager: manager,\n    key,\n    ref,\n    isDisabled\n  });\n\n  let tabId = generateId(state, key, 'tab');\n  let tabPanelId = generateId(state, key, 'tabpanel');\n  let {tabIndex} = itemProps;\n\n  return {\n    tabProps: {\n      ...itemProps,\n      id: tabId,\n      'aria-selected': isSelected,\n      'aria-disabled': isDisabled || undefined,\n      'aria-controls': isSelected ? tabPanelId : undefined,\n      tabIndex: isDisabled ? undefined : tabIndex,\n      role: 'tab'\n    }\n  };\n}\n\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaTabPanelProps} from '@react-types/tabs';\nimport {generateId} from './utils';\nimport {getFocusableTreeWalker} from '@react-aria/focus';\nimport {HTMLAttributes, RefObject, useState} from 'react';\nimport {mergeProps, useLabels, useLayoutEffect} from '@react-aria/utils';\nimport {TabListState} from '@react-stately/tabs';\n\ninterface TabPanelAria {\n  /** Props for the tab panel element. */\n  tabPanelProps: HTMLAttributes<HTMLElement>\n}\n\n\n/**\n * Provides the behavior and accessibility implementation for a tab panel. A tab panel is a container for\n * the contents of a tab, and is shown when the tab is selected.\n */\nexport function useTabPanel<T>(props: AriaTabPanelProps, state: TabListState<T>, ref: RefObject<HTMLElement>): TabPanelAria {\n  let [tabIndex, setTabIndex] = useState(0);\n\n  // The tabpanel should have tabIndex=0 when there are no tabbable elements within it.\n  // Otherwise, tabbing from the focused tab should go directly to the first tabbable element\n  // within the tabpanel.\n  useLayoutEffect(() => {\n    if (ref?.current) {\n      let update = () => {\n        // Detect if there are any tabbable elements and update the tabIndex accordingly.\n        let walker = getFocusableTreeWalker(ref.current, {tabbable: true});\n        setTabIndex(walker.nextNode() ? undefined : 0);\n      };\n\n      update();\n\n      // Update when new elements are inserted, or the tabIndex/disabled attribute updates.\n      let observer = new MutationObserver(update);\n      observer.observe(ref.current, {\n        subtree: true,\n        childList: true,\n        attributes: true,\n        attributeFilter: ['tabIndex', 'disabled']\n      });\n\n      return () => {\n        observer.disconnect();\n      };\n    }\n  }, [ref]);\n\n  const id = generateId(state, state?.selectedKey, 'tabpanel');\n  const tabPanelProps = useLabels({...props, id, 'aria-labelledby': generateId(state, state?.selectedKey, 'tab')});\n\n  return {\n    tabPanelProps: mergeProps(tabPanelProps, {\n      tabIndex,\n      role: 'tabpanel',\n      'aria-describedby': props['aria-describedby'],\n      'aria-details': props['aria-details']\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, Direction, KeyboardDelegate, Orientation} from '@react-types/shared';\nimport {Key} from 'react';\n\nexport class TabsKeyboardDelegate<T> implements KeyboardDelegate {\n  private collection: Collection<T>;\n  private flipDirection: boolean;\n  private disabledKeys: Set<Key>;\n  private orientation: Orientation;\n\n  constructor(collection: Collection<T>, direction: Direction, orientation: Orientation, disabledKeys: Set<Key> = new Set()) {\n    this.collection = collection;\n    this.flipDirection = direction === 'rtl' && orientation === 'horizontal';\n    this.orientation = orientation;\n    this.disabledKeys = disabledKeys;\n  }\n\n  getKeyLeftOf(key: Key) {\n    if (this.flipDirection) {\n      return this.getNextKey(key);\n    } else {\n      if (this.orientation === 'horizontal') {\n        return this.getPreviousKey(key);\n      }\n      return null;\n    }\n  }\n\n  getKeyRightOf(key: Key) {\n    if (this.flipDirection) {\n      return this.getPreviousKey(key);\n    } else {\n      if (this.orientation === 'horizontal') {\n        return this.getNextKey(key);\n      }\n      return null;\n    }\n  }\n\n  getKeyAbove(key: Key) {\n    if (this.orientation === 'vertical') {\n      return this.getPreviousKey(key);\n    }\n    return null;\n  }\n\n  getKeyBelow(key: Key) {\n    if (this.orientation === 'vertical') {\n      return this.getNextKey(key);\n    }\n    return null;\n  }\n\n  getFirstKey() {\n    let key = this.collection.getFirstKey();\n    if (this.disabledKeys.has(key)) {\n      key = this.getNextKey(key);\n    }\n    return key;\n  }\n\n  getLastKey() {\n    let key = this.collection.getLastKey();\n    if (this.disabledKeys.has(key)) {\n      key = this.getPreviousKey(key);\n    }\n    return key;\n  }\n\n  getNextKey(key) {\n    do {\n      key = this.collection.getKeyAfter(key);\n      if (key == null) {\n        key = this.collection.getFirstKey();\n      }\n    } while (this.disabledKeys.has(key));\n    return key;\n  }\n\n  getPreviousKey(key) {\n    do {\n      key = this.collection.getKeyBefore(key);\n      if (key == null) {\n        key = this.collection.getLastKey();\n      }\n    } while (this.disabledKeys.has(key));\n    return key;\n  }\n}\n","/*\n* Copyright 2020 Adobe. All rights reserved.\n* This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License. You may obtain a copy\n* of the License at http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software distributed under\n* the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n* OF ANY KIND, either express or implied. See the License for the specific language\n* governing permissions and limitations under the License.\n*/\n\nimport {AriaTabListProps} from '@react-types/tabs';\nimport {HTMLAttributes, RefObject, useMemo} from 'react';\nimport {mergeProps, useId, useLabels} from '@react-aria/utils';\nimport {TabListState} from '@react-stately/tabs';\nimport {tabsIds} from './utils';\nimport {TabsKeyboardDelegate} from './TabsKeyboardDelegate';\nimport {useLocale} from '@react-aria/i18n';\nimport {useSelectableCollection} from '@react-aria/selection';\n\ninterface TabListAria {\n  /** Props for the tablist container. */\n  tabListProps: HTMLAttributes<HTMLElement>\n}\n\n\n/**\n * Provides the behavior and accessibility implementation for a tab list.\n * Tabs organize content into multiple sections and allow users to navigate between them.\n */\nexport function useTabList<T>(props: AriaTabListProps<T>, state: TabListState<T>, ref: RefObject<HTMLElement>): TabListAria {\n  let {\n    orientation = 'horizontal',\n    keyboardActivation = 'automatic'\n  } = props;\n  let {\n    collection,\n    selectionManager: manager,\n    disabledKeys\n  } = state;\n  let {direction} = useLocale();\n  let delegate = useMemo(() => new TabsKeyboardDelegate(\n    collection,\n    direction,\n    orientation,\n    disabledKeys), [collection, disabledKeys, orientation, direction]);\n\n  let {collectionProps} = useSelectableCollection({\n    ref,\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    selectOnFocus: keyboardActivation === 'automatic',\n    disallowEmptySelection: true,\n    scrollRef: ref\n  });\n\n  // Compute base id for all tabs\n  let tabsId = useId();\n  tabsIds.set(state, tabsId);\n\n  let tabListLabelProps = useLabels({...props, id: tabsId});\n\n  return {\n    tabListProps: {\n      ...mergeProps(collectionProps, tabListLabelProps),\n      role: 'tablist',\n      'aria-orientation': orientation,\n      tabIndex: undefined\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}