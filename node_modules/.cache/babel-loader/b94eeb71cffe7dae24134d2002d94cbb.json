{"ast":null,"code":"import { mergeProps as $4vDl6$mergeProps, filterDOMProps as $4vDl6$filterDOMProps, useId as $4vDl6$useId } from \"@react-aria/utils\";\nimport { useFocusable as $4vDl6$useFocusable, getFocusableTreeWalker as $4vDl6$getFocusableTreeWalker } from \"@react-aria/focus\";\nimport { usePress as $4vDl6$usePress, useFocusWithin as $4vDl6$useFocusWithin } from \"@react-aria/interactions\";\nimport { useLabel as $4vDl6$useLabel } from \"@react-aria/label\";\nimport { useLocale as $4vDl6$useLocale } from \"@react-aria/i18n\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $0d5c49892c1215da$exports = {};\n$parcel$export($0d5c49892c1215da$exports, \"useRadio\", () => $0d5c49892c1215da$export$37b0961d2f4751e2);\nconst $884aeceb3d67f00f$export$3b7b268d09480394 = new WeakMap();\n\nfunction $0d5c49892c1215da$export$37b0961d2f4751e2(props, state, ref) {\n  let {\n    value: value,\n    children: children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby\n  } = props;\n  const isDisabled = props.isDisabled || state.isDisabled;\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  let checked = state.selectedValue === value;\n\n  let onChange = e => {\n    e.stopPropagation();\n    state.setSelectedValue(value);\n  };\n\n  let {\n    pressProps: pressProps\n  } = $4vDl6$usePress({\n    isDisabled: isDisabled\n  });\n  let {\n    focusableProps: focusableProps\n  } = $4vDl6$useFocusable($4vDl6$mergeProps(props, {\n    onFocus: () => state.setLastFocusedValue(value)\n  }), ref);\n  let interactions = $4vDl6$mergeProps(pressProps, focusableProps);\n  let domProps = $4vDl6$filterDOMProps(props, {\n    labelable: true\n  });\n  let tabIndex = state.lastFocusedValue === value || state.lastFocusedValue == null ? 0 : -1;\n  if (isDisabled) tabIndex = undefined;\n  return {\n    inputProps: $4vDl6$mergeProps(domProps, { ...interactions,\n      type: 'radio',\n      name: $884aeceb3d67f00f$export$3b7b268d09480394.get(state),\n      tabIndex: tabIndex,\n      disabled: isDisabled,\n      checked: checked,\n      value: value,\n      onChange: onChange\n    })\n  };\n}\n\nvar $430f30ed08ec25fa$exports = {};\n$parcel$export($430f30ed08ec25fa$exports, \"useRadioGroup\", () => $430f30ed08ec25fa$export$62b9571f283ff5c2);\n\nfunction $430f30ed08ec25fa$export$62b9571f283ff5c2(props, state) {\n  let {\n    name: name,\n    validationState: validationState,\n    isReadOnly: isReadOnly,\n    isRequired: isRequired,\n    isDisabled: isDisabled,\n    orientation = 'vertical'\n  } = props;\n  let {\n    direction: direction\n  } = $4vDl6$useLocale();\n  let {\n    labelProps: labelProps,\n    fieldProps: fieldProps\n  } = $4vDl6$useLabel({ ...props,\n    // Radio group is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n  let domProps = $4vDl6$filterDOMProps(props, {\n    labelable: true\n  }); // When the radio group loses focus, reset the focusable radio to null if\n  // there is no selection. This allows tabbing into the group from either\n  // direction to go to the first or last radio.\n\n  let {\n    focusWithinProps: focusWithinProps\n  } = $4vDl6$useFocusWithin({\n    onBlurWithin() {\n      if (!state.selectedValue) state.setLastFocusedValue(null);\n    }\n\n  });\n\n  let onKeyDown = e => {\n    let nextDir;\n\n    switch (e.key) {\n      case 'ArrowRight':\n        if (direction === 'rtl' && orientation !== 'vertical') nextDir = 'prev';else nextDir = 'next';\n        break;\n\n      case 'ArrowLeft':\n        if (direction === 'rtl' && orientation !== 'vertical') nextDir = 'next';else nextDir = 'prev';\n        break;\n\n      case 'ArrowDown':\n        nextDir = 'next';\n        break;\n\n      case 'ArrowUp':\n        nextDir = 'prev';\n        break;\n\n      default:\n        return;\n    }\n\n    e.preventDefault();\n    let walker = $4vDl6$getFocusableTreeWalker(e.currentTarget, {\n      from: e.target\n    });\n    let nextElem;\n\n    if (nextDir === 'next') {\n      nextElem = walker.nextNode();\n\n      if (!nextElem) {\n        walker.currentNode = e.currentTarget;\n        nextElem = walker.firstChild();\n      }\n    } else {\n      nextElem = walker.previousNode();\n\n      if (!nextElem) {\n        walker.currentNode = e.currentTarget;\n        nextElem = walker.lastChild();\n      }\n    }\n\n    if (nextElem) {\n      // Call focus on nextElem so that keyboard navigation scrolls the radio into view\n      nextElem.focus();\n      state.setSelectedValue(nextElem.value);\n    }\n  };\n\n  let groupName = $4vDl6$useId(name);\n  $884aeceb3d67f00f$export$3b7b268d09480394.set(state, groupName);\n  return {\n    radioGroupProps: $4vDl6$mergeProps(domProps, {\n      // https://www.w3.org/TR/wai-aria-1.2/#radiogroup\n      role: 'radiogroup',\n      onKeyDown: onKeyDown,\n      'aria-invalid': validationState === 'invalid' || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-readonly': isReadOnly || undefined,\n      'aria-required': isRequired || undefined,\n      'aria-disabled': isDisabled || undefined,\n      'aria-orientation': orientation,\n      ...fieldProps,\n      ...focusWithinProps\n    }),\n    labelProps: labelProps\n  };\n}\n\nexport { $0d5c49892c1215da$export$37b0961d2f4751e2 as useRadio, $430f30ed08ec25fa$export$62b9571f283ff5c2 as useRadioGroup };","map":{"version":3,"mappings":"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","names":["$884aeceb3d67f00f$export$3b7b268d09480394","WeakMap","$0d5c49892c1215da$export$37b0961d2f4751e2","props","state","ref","value","children","ariaLabel","ariaLabelledby","isDisabled","hasChildren","hasAriaLabel","console","warn","checked","selectedValue","onChange","e","stopPropagation","setSelectedValue","pressProps","$4vDl6$usePress","focusableProps","$4vDl6$useFocusable","$4vDl6$mergeProps","onFocus","setLastFocusedValue","interactions","domProps","$4vDl6$filterDOMProps","labelable","tabIndex","lastFocusedValue","undefined","inputProps","type","name","get","disabled","$430f30ed08ec25fa$export$62b9571f283ff5c2","validationState","isReadOnly","isRequired","orientation","direction","$4vDl6$useLocale","labelProps","fieldProps","$4vDl6$useLabel","labelElementType","focusWithinProps","$4vDl6$useFocusWithin","onBlurWithin","onKeyDown","nextDir","key","preventDefault","walker","$4vDl6$getFocusableTreeWalker","currentTarget","from","target","nextElem","nextNode","currentNode","firstChild","previousNode","lastChild","focus","groupName","$4vDl6$useId","set","radioGroupProps","role"],"sources":["C:\\Users\\ev3rg\\OneDrive\\Documents\\GitHub\\gt-bigdata-website\\node_modules\\@react-aria\\radio\\dist\\packages\\@react-aria\\radio\\src\\utils.ts","C:\\Users\\ev3rg\\OneDrive\\Documents\\GitHub\\gt-bigdata-website\\node_modules\\@react-aria\\radio\\dist\\packages\\@react-aria\\radio\\src\\useRadio.ts","C:\\Users\\ev3rg\\OneDrive\\Documents\\GitHub\\gt-bigdata-website\\node_modules\\@react-aria\\radio\\dist\\packages\\@react-aria\\radio\\src\\useRadioGroup.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RadioGroupState} from '@react-stately/radio';\n\nexport const radioGroupNames = new WeakMap<RadioGroupState, string>();\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaRadioProps} from '@react-types/radio';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {InputHTMLAttributes, RefObject} from 'react';\nimport {radioGroupNames} from './utils';\nimport {RadioGroupState} from '@react-stately/radio';\nimport {useFocusable} from '@react-aria/focus';\nimport {usePress} from '@react-aria/interactions';\n\ninterface RadioAria {\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for an individual\n * radio button in a radio group.\n * @param props - Props for the radio.\n * @param state - State for the radio group, as returned by `useRadioGroupState`.\n * @param ref - Ref to the HTML input element.\n */\nexport function useRadio(props: AriaRadioProps, state: RadioGroupState, ref: RefObject<HTMLElement>): RadioAria {\n  let {\n    value,\n    children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby\n  } = props;\n\n  const isDisabled = props.isDisabled || state.isDisabled;\n\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) {\n    console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  }\n\n  let checked = state.selectedValue === value;\n\n  let onChange = (e) => {\n    e.stopPropagation();\n    state.setSelectedValue(value);\n  };\n\n  let {pressProps} = usePress({\n    isDisabled\n  });\n\n  let {focusableProps} = useFocusable(mergeProps(props, {\n    onFocus: () => state.setLastFocusedValue(value)\n  }), ref);\n  let interactions = mergeProps(pressProps, focusableProps);\n  let domProps = filterDOMProps(props, {labelable: true});\n  let tabIndex = state.lastFocusedValue === value || state.lastFocusedValue == null ? 0 : -1;\n  if (isDisabled) {\n    tabIndex = undefined;\n  }\n\n  return {\n    inputProps: mergeProps(domProps, {\n      ...interactions,\n      type: 'radio',\n      name: radioGroupNames.get(state),\n      tabIndex,\n      disabled: isDisabled,\n      checked,\n      value,\n      onChange\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaRadioGroupProps} from '@react-types/radio';\nimport {filterDOMProps, mergeProps, useId} from '@react-aria/utils';\nimport {getFocusableTreeWalker} from '@react-aria/focus';\nimport {HTMLAttributes} from 'react';\nimport {radioGroupNames} from './utils';\nimport {RadioGroupState} from '@react-stately/radio';\nimport {useFocusWithin} from '@react-aria/interactions';\nimport {useLabel} from '@react-aria/label';\nimport {useLocale} from '@react-aria/i18n';\n\ninterface RadioGroupAria {\n  /** Props for the radio group wrapper element. */\n  radioGroupProps: HTMLAttributes<HTMLElement>,\n  /** Props for the radio group's visible label (if any). */\n  labelProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a radio group component.\n * Radio groups allow users to select a single item from a list of mutually exclusive options.\n * @param props - Props for the radio group.\n * @param state - State for the radio group, as returned by `useRadioGroupState`.\n */\nexport function useRadioGroup(props: AriaRadioGroupProps, state: RadioGroupState): RadioGroupAria {\n  let {\n    name,\n    validationState,\n    isReadOnly,\n    isRequired,\n    isDisabled,\n    orientation = 'vertical'\n  } = props;\n  let {direction} = useLocale();\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    // Radio group is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  // When the radio group loses focus, reset the focusable radio to null if\n  // there is no selection. This allows tabbing into the group from either\n  // direction to go to the first or last radio.\n  let {focusWithinProps} = useFocusWithin({\n    onBlurWithin() {\n      if (!state.selectedValue) {\n        state.setLastFocusedValue(null);\n      }\n    }\n  });\n\n  let onKeyDown = (e) => {\n    let nextDir;\n    switch (e.key) {\n      case 'ArrowRight':\n        if (direction === 'rtl' && orientation !== 'vertical') {\n          nextDir = 'prev';\n        } else {\n          nextDir = 'next';\n        }\n        break;\n      case 'ArrowLeft':\n        if (direction === 'rtl' && orientation !== 'vertical') {\n          nextDir = 'next';\n        } else {\n          nextDir = 'prev';\n        }\n        break;\n      case 'ArrowDown':\n        nextDir = 'next';\n        break;\n      case 'ArrowUp':\n        nextDir = 'prev';\n        break;\n      default:\n        return;\n    }\n    e.preventDefault();\n    let walker = getFocusableTreeWalker(e.currentTarget, {from: e.target});\n    let nextElem;\n    if (nextDir === 'next') {\n      nextElem = walker.nextNode();\n      if (!nextElem) {\n        walker.currentNode = e.currentTarget;\n        nextElem = walker.firstChild();\n      }\n    } else {\n      nextElem = walker.previousNode();\n      if (!nextElem) {\n        walker.currentNode = e.currentTarget;\n        nextElem = walker.lastChild();\n      }\n    }\n    if (nextElem) {\n      // Call focus on nextElem so that keyboard navigation scrolls the radio into view\n      nextElem.focus();\n      state.setSelectedValue(nextElem.value);\n    }\n  };\n\n  let groupName = useId(name);\n  radioGroupNames.set(state, groupName);\n\n  return {\n    radioGroupProps: mergeProps(domProps, {\n      // https://www.w3.org/TR/wai-aria-1.2/#radiogroup\n      role: 'radiogroup',\n      onKeyDown,\n      'aria-invalid': validationState === 'invalid' || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-readonly': isReadOnly || undefined,\n      'aria-required': isRequired || undefined,\n      'aria-disabled': isDisabled || undefined,\n      'aria-orientation': orientation,\n      ...fieldProps,\n      ...focusWithinProps\n    }),\n    labelProps\n  };\n}\n"]},"metadata":{},"sourceType":"module"}