{"ast":null,"code":"import { useMemo as $58Phs$useMemo, useEffect as $58Phs$useEffect } from \"react\";\nimport { useMultipleSelectionState as $58Phs$useMultipleSelectionState, SelectionManager as $58Phs$SelectionManager } from \"@react-stately/selection\";\nimport { useCollection as $58Phs$useCollection } from \"@react-stately/collections\";\nimport { useControlledState as $58Phs$useControlledState } from \"@react-stately/utils\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $e72dd72e1c76a225$exports = {};\n$parcel$export($e72dd72e1c76a225$exports, \"useListState\", () => $e72dd72e1c76a225$export$2f645645f7bca764);\nvar $a02d57049d202695$exports = {};\n$parcel$export($a02d57049d202695$exports, \"ListCollection\", () => $a02d57049d202695$export$d085fb9e920b5ca7);\nvar tmp = Symbol.iterator;\n\nclass $a02d57049d202695$export$d085fb9e920b5ca7 {\n  *[tmp]() {\n    yield* this.iterable;\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return this.firstKey;\n  }\n\n  getLastKey() {\n    return this.lastKey;\n  }\n\n  getItem(key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n\n  constructor(nodes) {\n    this.keyMap = new Map();\n    this.iterable = nodes;\n\n    let visit = node => {\n      this.keyMap.set(node.key, node);\n      if (node.childNodes && node.type === 'section') for (let child of node.childNodes) visit(child);\n    };\n\n    for (let node2 of nodes) visit(node2);\n\n    let last;\n    let index = 0;\n\n    for (let [key, node1] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node1.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node1.prevKey = undefined;\n      }\n\n      if (node1.type === 'item') node1.index = index++;\n      last = node1; // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = last === null || last === void 0 ? void 0 : last.key;\n  }\n\n}\n\nfunction $e72dd72e1c76a225$export$2f645645f7bca764(props) {\n  let {\n    filter: filter\n  } = props;\n  let selectionState = $58Phs$useMultipleSelectionState(props);\n  let disabledKeys = $58Phs$useMemo(() => props.disabledKeys ? new Set(props.disabledKeys) : new Set(), [props.disabledKeys]);\n\n  let factory = nodes => filter ? new $a02d57049d202695$export$d085fb9e920b5ca7(filter(nodes)) : new $a02d57049d202695$export$d085fb9e920b5ca7(nodes);\n\n  let context = $58Phs$useMemo(() => ({\n    suppressTextValueWarning: props.suppressTextValueWarning\n  }), [props.suppressTextValueWarning]);\n  let collection = $58Phs$useCollection(props, factory, context, [filter]); // Reset focused key if that item is deleted from the collection.\n\n  $58Phs$useEffect(() => {\n    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) selectionState.setFocusedKey(null);\n  }, [collection, selectionState.focusedKey]);\n  return {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    selectionManager: new $58Phs$SelectionManager(collection, selectionState)\n  };\n}\n\nvar $a0d645289fe9b86b$exports = {};\n$parcel$export($a0d645289fe9b86b$exports, \"useSingleSelectListState\", () => $a0d645289fe9b86b$export$e7f05e985daf4b5f);\n\nfunction $a0d645289fe9b86b$export$e7f05e985daf4b5f(props) {\n  var _defaultSelectedKey;\n\n  let [selectedKey, setSelectedKey] = $58Phs$useControlledState(props.selectedKey, (_defaultSelectedKey = props.defaultSelectedKey) !== null && _defaultSelectedKey !== void 0 ? _defaultSelectedKey : null, props.onSelectionChange);\n  let selectedKeys = $58Phs$useMemo(() => selectedKey != null ? [selectedKey] : [], [selectedKey]);\n  let {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    selectionManager: selectionManager\n  } = $e72dd72e1c76a225$export$2f645645f7bca764({ ...props,\n    selectionMode: 'single',\n    disallowEmptySelection: true,\n    allowDuplicateSelectionEvents: true,\n    selectedKeys: selectedKeys,\n    onSelectionChange: keys => {\n      let key = keys.values().next().value; // Always fire onSelectionChange, even if the key is the same\n      // as the current key (useControlledState does not).\n\n      if (key === selectedKey && props.onSelectionChange) props.onSelectionChange(key);\n      setSelectedKey(key);\n    }\n  });\n  let selectedItem = selectedKey != null ? collection.getItem(selectedKey) : null;\n  return {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    selectionManager: selectionManager,\n    selectedKey: selectedKey,\n    setSelectedKey: setSelectedKey,\n    selectedItem: selectedItem\n  };\n}\n\nexport { $e72dd72e1c76a225$export$2f645645f7bca764 as useListState, $a0d645289fe9b86b$export$e7f05e985daf4b5f as useSingleSelectListState, $a02d57049d202695$export$d085fb9e920b5ca7 as ListCollection };","map":{"version":3,"mappings":"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","names":["Symbol","iterator","$a02d57049d202695$export$d085fb9e920b5ca7","iterable","size","keyMap","getKeys","keys","getKeyBefore","key","node","get","prevKey","getKeyAfter","nextKey","getFirstKey","firstKey","getLastKey","lastKey","getItem","at","idx","nodes","Map","visit","set","childNodes","type","child","node2","last","index","node1","undefined","$e72dd72e1c76a225$export$2f645645f7bca764","props","filter","selectionState","$58Phs$useMultipleSelectionState","disabledKeys","$58Phs$useMemo","Set","factory","context","suppressTextValueWarning","collection","$58Phs$useCollection","$58Phs$useEffect","focusedKey","setFocusedKey","selectionManager","$58Phs$SelectionManager","$a0d645289fe9b86b$export$e7f05e985daf4b5f","_defaultSelectedKey","selectedKey","setSelectedKey","$58Phs$useControlledState","defaultSelectedKey","onSelectionChange","selectedKeys","selectionMode","disallowEmptySelection","allowDuplicateSelectionEvents","values","next","value","selectedItem"],"sources":["C:\\Users\\ev3rg\\OneDrive\\Documents\\GitHub\\gt-bigdata-website\\node_modules\\@react-stately\\list\\dist\\packages\\@react-stately\\list\\src\\ListCollection.ts","C:\\Users\\ev3rg\\OneDrive\\Documents\\GitHub\\gt-bigdata-website\\node_modules\\@react-stately\\list\\dist\\packages\\@react-stately\\list\\src\\useListState.ts","C:\\Users\\ev3rg\\OneDrive\\Documents\\GitHub\\gt-bigdata-website\\node_modules\\@react-stately\\list\\dist\\packages\\@react-stately\\list\\src\\useSingleSelectListState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, Node} from '@react-types/shared';\nimport {Key} from 'react';\n\nexport class ListCollection<T> implements Collection<Node<T>> {\n  private keyMap: Map<Key, Node<T>> = new Map();\n  private iterable: Iterable<Node<T>>;\n  private firstKey: Key;\n  private lastKey: Key;\n\n  constructor(nodes: Iterable<Node<T>>) {\n    this.iterable = nodes;\n\n    let visit = (node: Node<T>) => {\n      this.keyMap.set(node.key, node);\n\n      if (node.childNodes && node.type === 'section') {\n        for (let child of node.childNodes) {\n          visit(child);\n        }\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let last: Node<T>;\n    let index = 0;\n    for (let [key, node] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node.prevKey = undefined;\n      }\n\n      if (node.type === 'item') {\n        node.index = index++;\n      }\n\n      last = node;\n\n      // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = last?.key;\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.iterable;\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return this.firstKey;\n  }\n\n  getLastKey() {\n    return this.lastKey;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, CollectionBase, Node} from '@react-types/shared';\nimport {Key, useEffect, useMemo} from 'react';\nimport {ListCollection} from './ListCollection';\nimport {MultipleSelectionStateProps, SelectionManager, useMultipleSelectionState} from '@react-stately/selection';\nimport {useCollection} from '@react-stately/collections';\n\nexport interface ListProps<T> extends CollectionBase<T>, MultipleSelectionStateProps {\n  /** Filter function to generate a filtered list of nodes. */\n  filter?: (nodes: Iterable<Node<T>>) => Iterable<Node<T>>,\n  /** @private */\n  suppressTextValueWarning?: boolean\n}\n\nexport interface ListState<T> {\n  /** A collection of items in the list. */\n  collection: Collection<Node<T>>,\n\n  /** A set of items that are disabled. */\n  disabledKeys: Set<Key>,\n\n  /** A selection manager to read and update multiple selection state. */\n  selectionManager: SelectionManager\n}\n\n/**\n * Provides state management for list-like components. Handles building a collection\n * of items from props, and manages multiple selection state.\n */\nexport function useListState<T extends object>(props: ListProps<T>): ListState<T>  {\n  let {filter} = props;\n\n  let selectionState = useMultipleSelectionState(props);\n  let disabledKeys = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n\n  let factory = nodes => filter ? new ListCollection(filter(nodes)) : new ListCollection(nodes as Iterable<Node<T>>);\n  let context = useMemo(() => ({suppressTextValueWarning: props.suppressTextValueWarning}), [props.suppressTextValueWarning]);\n\n  let collection = useCollection(props, factory, context, [filter]);\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) {\n      selectionState.setFocusedKey(null);\n    }\n  }, [collection, selectionState.focusedKey]);\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager: new SelectionManager(collection, selectionState)\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBase, SingleSelection} from '@react-types/shared';\nimport {Key, useMemo} from 'react';\nimport {ListState, useListState} from './useListState';\nimport {Node} from '@react-types/shared';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface SingleSelectListProps<T> extends CollectionBase<T>, Omit<SingleSelection, 'disallowEmptySelection'> {\n  /** Filter function to generate a filtered list of nodes. */\n  filter?: (nodes: Iterable<Node<T>>) => Iterable<Node<T>>,\n  /** @private */\n  suppressTextValueWarning?: boolean\n}\n\nexport interface SingleSelectListState<T> extends ListState<T> {\n  /** The key for the currently selected item. */\n  readonly selectedKey: Key,\n\n  /** Sets the selected key. */\n  setSelectedKey(key: Key): void,\n\n  /** The value of the currently selected item. */\n  readonly selectedItem: Node<T>\n}\n\n/**\n * Provides state management for list-like components with single selection.\n * Handles building a collection of items from props, and manages selection state.\n */\nexport function useSingleSelectListState<T extends object>(props: SingleSelectListProps<T>): SingleSelectListState<T>  {\n  let [selectedKey, setSelectedKey] = useControlledState(props.selectedKey, props.defaultSelectedKey ?? null, props.onSelectionChange);\n  let selectedKeys = useMemo(() => selectedKey != null ? [selectedKey] : [], [selectedKey]);\n  let {collection, disabledKeys, selectionManager} = useListState({\n    ...props,\n    selectionMode: 'single',\n    disallowEmptySelection: true,\n    allowDuplicateSelectionEvents: true,\n    selectedKeys,\n    onSelectionChange: (keys: Set<Key>) => {\n      let key = keys.values().next().value;\n\n      // Always fire onSelectionChange, even if the key is the same\n      // as the current key (useControlledState does not).\n      if (key === selectedKey && props.onSelectionChange) {\n        props.onSelectionChange(key);\n      }\n\n      setSelectedKey(key);\n    }\n  });\n\n  let selectedItem = selectedKey != null\n    ? collection.getItem(selectedKey)\n    : null;\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager,\n    selectedKey,\n    setSelectedKey,\n    selectedItem\n  };\n}\n"]},"metadata":{},"sourceType":"module"}