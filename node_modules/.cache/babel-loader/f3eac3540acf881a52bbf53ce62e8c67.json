{"ast":null,"code":"import { useRef as $dgwbL$useRef, useEffect as $dgwbL$useEffect, useMemo as $dgwbL$useMemo } from \"react\";\nimport { getFocusableTreeWalker as $dgwbL$getFocusableTreeWalker, focusSafely as $dgwbL$focusSafely } from \"@react-aria/focus\";\nimport { focusWithoutScrolling as $dgwbL$focusWithoutScrolling, useEvent as $dgwbL$useEvent, scrollIntoView as $dgwbL$scrollIntoView, mergeProps as $dgwbL$mergeProps, isAppleDevice as $dgwbL$isAppleDevice, isMac as $dgwbL$isMac } from \"@react-aria/utils\";\nimport { useLocale as $dgwbL$useLocale, useCollator as $dgwbL$useCollator } from \"@react-aria/i18n\";\nimport { usePress as $dgwbL$usePress, useLongPress as $dgwbL$useLongPress } from \"@react-aria/interactions\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $52ac987c016884e9$exports = {};\n$parcel$export($52ac987c016884e9$exports, \"useSelectableCollection\", () => $52ac987c016884e9$export$d6daf82dcd84e87c);\n\nfunction $c636d3b6065ca9f6$export$d3e3bd3e26688c04(e) {\n  // Ctrl + Arrow Up/Arrow Down has a system wide meaning on macOS, so use Alt instead.\n  // On Windows and Ubuntu, Alt + Space has a system wide meaning.\n  return $dgwbL$isAppleDevice() ? e.altKey : e.ctrlKey;\n}\n\nfunction $c636d3b6065ca9f6$export$16792effe837dba3(e) {\n  if ($dgwbL$isMac()) return e.metaKey;\n  return e.ctrlKey;\n}\n\nvar $a6f03d1cafa48b51$exports = {};\n$parcel$export($a6f03d1cafa48b51$exports, \"useTypeSelect\", () => $a6f03d1cafa48b51$export$e32c88dfddc6e1d8);\n\nfunction $a6f03d1cafa48b51$export$e32c88dfddc6e1d8(options) {\n  let {\n    keyboardDelegate: keyboardDelegate,\n    selectionManager: selectionManager,\n    onTypeSelect: onTypeSelect\n  } = options;\n  let state = $dgwbL$useRef({\n    search: '',\n    timeout: null\n  }).current;\n\n  let onKeyDown = e => {\n    let character = $a6f03d1cafa48b51$var$getStringForKey(e.key);\n    if (!character || e.ctrlKey || e.metaKey) return; // Do not propagate the Spacebar event if it's meant to be part of the search.\n    // When we time out, the search term becomes empty, hence the check on length.\n    // Trimming is to account for the case of pressing the Spacebar more than once,\n    // which should cycle through the selection/deselection of the focused item.\n\n    if (character === ' ' && state.search.trim().length > 0) {\n      e.preventDefault();\n      if (!('continuePropagation' in e)) e.stopPropagation();\n    }\n\n    state.search += character; // Use the delegate to find a key to focus.\n    // Prioritize items after the currently focused item, falling back to searching the whole list.\n\n    let key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey); // If no key found, search from the top.\n\n    if (key == null) key = keyboardDelegate.getKeyForSearch(state.search);\n\n    if (key != null) {\n      selectionManager.setFocusedKey(key);\n      if (onTypeSelect) onTypeSelect(key);\n    }\n\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(() => {\n      state.search = '';\n    }, 500);\n  };\n\n  return {\n    typeSelectProps: {\n      // Using a capturing listener to catch the keydown event before\n      // other hooks in order to handle the Spacebar event.\n      onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null\n    }\n  };\n}\n\nfunction $a6f03d1cafa48b51$var$getStringForKey(key) {\n  // If the key is of length 1, it is an ASCII value.\n  // Otherwise, if there are no ASCII characters in the key name,\n  // it is a Unicode character.\n  // See https://www.w3.org/TR/uievents-key/\n  if (key.length === 1 || !/^[A-Z]/i.test(key)) return key;\n  return '';\n}\n\nfunction $52ac987c016884e9$export$d6daf82dcd84e87c(options) {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref: ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false,\n    selectOnFocus = manager.selectionBehavior === 'replace',\n    disallowTypeAhead = false,\n    shouldUseVirtualFocus: shouldUseVirtualFocus,\n    allowsTabNavigation = false,\n    isVirtualized: isVirtualized,\n    // If no scrollRef is provided, assume the collection ref is the scrollable region\n    scrollRef = ref\n  } = options;\n  let {\n    direction: direction\n  } = $dgwbL$useLocale();\n\n  let onKeyDown = e => {\n    // Prevent option + tab from doing anything since it doesn't move focus to the cells, only buttons/checkboxes\n    if (e.altKey && e.key === 'Tab') e.preventDefault(); // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n\n    if (!ref.current.contains(e.target)) return;\n\n    const navigateToKey = (key, childFocus) => {\n      if (key != null) {\n        manager.setFocusedKey(key, childFocus);\n        if (e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(key);else if (selectOnFocus && !$c636d3b6065ca9f6$export$d3e3bd3e26688c04(e)) manager.replaceSelection(key);\n      }\n    };\n\n    switch (e.key) {\n      case 'ArrowDown':\n        if (delegate.getKeyBelow) {\n          var ref4, ref1;\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null ? delegate.getKeyBelow(manager.focusedKey) : (ref4 = delegate.getFirstKey) === null || ref4 === void 0 ? void 0 : ref4.call(delegate);\n          if (nextKey == null && shouldFocusWrap) nextKey = (ref1 = delegate.getFirstKey) === null || ref1 === void 0 ? void 0 : ref1.call(delegate, manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n\n        break;\n\n      case 'ArrowUp':\n        if (delegate.getKeyAbove) {\n          var ref2, ref3;\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null ? delegate.getKeyAbove(manager.focusedKey) : (ref2 = delegate.getLastKey) === null || ref2 === void 0 ? void 0 : ref2.call(delegate);\n          if (nextKey == null && shouldFocusWrap) nextKey = (ref3 = delegate.getLastKey) === null || ref3 === void 0 ? void 0 : ref3.call(delegate, manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n\n        break;\n\n      case 'ArrowLeft':\n        if (delegate.getKeyLeftOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyLeftOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === 'rtl' ? 'first' : 'last');\n        }\n\n        break;\n\n      case 'ArrowRight':\n        if (delegate.getKeyRightOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyRightOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === 'rtl' ? 'last' : 'first');\n        }\n\n        break;\n\n      case 'Home':\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          let firstKey = delegate.getFirstKey(manager.focusedKey, $c636d3b6065ca9f6$export$16792effe837dba3(e));\n          manager.setFocusedKey(firstKey);\n          if ($c636d3b6065ca9f6$export$16792effe837dba3(e) && e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(firstKey);else if (selectOnFocus) manager.replaceSelection(firstKey);\n        }\n\n        break;\n\n      case 'End':\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(manager.focusedKey, $c636d3b6065ca9f6$export$16792effe837dba3(e));\n          manager.setFocusedKey(lastKey);\n          if ($c636d3b6065ca9f6$export$16792effe837dba3(e) && e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(lastKey);else if (selectOnFocus) manager.replaceSelection(lastKey);\n        }\n\n        break;\n\n      case 'PageDown':\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n\n        break;\n\n      case 'PageUp':\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n\n        break;\n\n      case 'a':\n        if ($c636d3b6065ca9f6$export$16792effe837dba3(e) && manager.selectionMode === 'multiple' && disallowSelectAll !== true) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n\n        break;\n\n      case 'Escape':\n        e.preventDefault();\n        if (!disallowEmptySelection) manager.clearSelection();\n        break;\n\n      case 'Tab':\n        if (!allowsTabNavigation) {\n          // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n          // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n          // in the collection, so that the browser default behavior will apply starting from that element\n          // rather than the currently focused one.\n          if (e.shiftKey) ref.current.focus();else {\n            let walker = $dgwbL$getFocusableTreeWalker(ref.current, {\n              tabbable: true\n            });\n            let next;\n            let last;\n\n            do {\n              last = walker.lastChild();\n              if (last) next = last;\n            } while (last);\n\n            if (next && !next.contains(document.activeElement)) $dgwbL$focusWithoutScrolling(next);\n          }\n          break;\n        }\n\n    }\n  }; // Store the scroll position so we can restore it later.\n\n\n  let scrollPos = $dgwbL$useRef({\n    top: 0,\n    left: 0\n  });\n  $dgwbL$useEvent(scrollRef, 'scroll', isVirtualized ? null : () => {\n    scrollPos.current = {\n      top: scrollRef.current.scrollTop,\n      left: scrollRef.current.scrollLeft\n    };\n  });\n\n  let onFocus = e => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) manager.setFocused(false);\n      return;\n    } // Focus events can bubble through portals. Ignore these events.\n\n\n    if (!e.currentTarget.contains(e.target)) return;\n    manager.setFocused(true);\n\n    if (manager.focusedKey == null) {\n      let navigateToFirstKey = key => {\n        if (key != null) {\n          manager.setFocusedKey(key);\n          if (selectOnFocus) manager.replaceSelection(key);\n        }\n      }; // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n\n\n      let relatedTarget = e.relatedTarget;\n\n      var _lastSelectedKey, _firstSelectedKey;\n\n      if (relatedTarget && e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING) navigateToFirstKey((_lastSelectedKey = manager.lastSelectedKey) !== null && _lastSelectedKey !== void 0 ? _lastSelectedKey : delegate.getLastKey());else navigateToFirstKey((_firstSelectedKey = manager.firstSelectedKey) !== null && _firstSelectedKey !== void 0 ? _firstSelectedKey : delegate.getFirstKey());\n    } else if (!isVirtualized) {\n      // Restore the scroll position to what it was before.\n      scrollRef.current.scrollTop = scrollPos.current.top;\n      scrollRef.current.scrollLeft = scrollPos.current.left; // Refocus and scroll the focused item into view if it exists within the scrollable region.\n\n      let element = scrollRef.current.querySelector(`[data-key=\"${manager.focusedKey}\"]`);\n\n      if (element) {\n        // This prevents a flash of focus on the first/last element in the collection\n        $dgwbL$focusWithoutScrolling(element);\n        $dgwbL$scrollIntoView(scrollRef.current, element);\n      }\n    }\n  };\n\n  let onBlur = e => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget)) manager.setFocused(false);\n  };\n\n  const autoFocusRef = $dgwbL$useRef(autoFocus);\n  $dgwbL$useEffect(() => {\n    if (autoFocusRef.current) {\n      let focusedKey = null; // Check focus strategy to determine which item to focus\n\n      if (autoFocus === 'first') focusedKey = delegate.getFirstKey();\n      if (autoFocus === 'last') focusedKey = delegate.getLastKey(); // If there are any selected keys, make the first one the new focus target\n\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) focusedKey = selectedKeys.values().next().value;\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey); // If no default focus key is selected, focus the collection itself.\n\n      if (focusedKey == null && !shouldUseVirtualFocus) $dgwbL$focusSafely(ref.current);\n    }\n\n    autoFocusRef.current = false; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // If not virtualized, scroll the focused element into view when the focusedKey changes.\n  // When virtualized, Virtualizer handles this internally.\n\n  $dgwbL$useEffect(() => {\n    if (!isVirtualized && manager.focusedKey && (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current)) {\n      let element = scrollRef.current.querySelector(`[data-key=\"${manager.focusedKey}\"]`);\n      if (element) $dgwbL$scrollIntoView(scrollRef.current, element);\n    }\n  }, [isVirtualized, scrollRef, manager.focusedKey]);\n  let handlers = {\n    onKeyDown: onKeyDown,\n    onFocus: onFocus,\n    onBlur: onBlur,\n\n    onMouseDown(e) {\n      // Ignore events that bubbled through portals.\n      if (e.currentTarget.contains(e.target)) // Prevent focus going to the collection when clicking on the scrollbar.\n        e.preventDefault();\n    }\n\n  };\n  let {\n    typeSelectProps: typeSelectProps\n  } = $a6f03d1cafa48b51$export$e32c88dfddc6e1d8({\n    keyboardDelegate: delegate,\n    selectionManager: manager\n  });\n  if (!disallowTypeAhead) handlers = $dgwbL$mergeProps(typeSelectProps, handlers); // If nothing is focused within the collection, make the collection itself tabbable.\n  // This will be marshalled to either the first or last item depending on where focus came from.\n  // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try\n  // to move real DOM focus to the element anyway.\n\n  let tabIndex;\n  if (!shouldUseVirtualFocus) tabIndex = manager.focusedKey == null ? 0 : -1;\n  return {\n    collectionProps: { ...handlers,\n      tabIndex: tabIndex\n    }\n  };\n}\n\nvar $5ec5a493f6042709$exports = {};\n$parcel$export($5ec5a493f6042709$exports, \"useSelectableItem\", () => $5ec5a493f6042709$export$ecf600387e221c37);\n\nfunction $5ec5a493f6042709$export$ecf600387e221c37(options) {\n  let {\n    selectionManager: manager,\n    key: key,\n    ref: ref,\n    shouldSelectOnPressUp: shouldSelectOnPressUp,\n    isVirtualized: isVirtualized,\n    shouldUseVirtualFocus: shouldUseVirtualFocus,\n    focus: focus,\n    isDisabled: isDisabled,\n    onAction: onAction\n  } = options;\n\n  let onSelect = e => {\n    if (e.pointerType === 'keyboard' && $c636d3b6065ca9f6$export$d3e3bd3e26688c04(e)) manager.toggleSelection(key);else {\n      if (manager.selectionMode === 'none') return;\n\n      if (manager.selectionMode === 'single') {\n        if (manager.isSelected(key) && !manager.disallowEmptySelection) manager.toggleSelection(key);else manager.replaceSelection(key);\n      } else if (e && e.shiftKey) manager.extendSelection(key);else if (manager.selectionBehavior === 'toggle' || e && ($c636d3b6065ca9f6$export$16792effe837dba3(e) || e.pointerType === 'touch' || e.pointerType === 'virtual')) // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n        manager.toggleSelection(key);else manager.replaceSelection(key);\n    }\n  }; // Focus the associated DOM node when this item becomes the focusedKey\n\n\n  let isFocused = key === manager.focusedKey;\n  $dgwbL$useEffect(() => {\n    if (isFocused && manager.isFocused && !shouldUseVirtualFocus && document.activeElement !== ref.current) {\n      if (focus) focus();else $dgwbL$focusSafely(ref.current);\n    }\n  }, [ref, isFocused, manager.focusedKey, manager.childFocusStrategy, manager.isFocused, shouldUseVirtualFocus]); // Set tabIndex to 0 if the element is focused, or -1 otherwise so that only the last focused\n  // item is tabbable.  If using virtual focus, don't set a tabIndex at all so that VoiceOver\n  // on iOS 14 doesn't try to move real DOM focus to the item anyway.\n\n  let itemProps = {};\n  if (!shouldUseVirtualFocus) itemProps = {\n    tabIndex: isFocused ? 0 : -1,\n\n    onFocus(e) {\n      if (e.target === ref.current) manager.setFocusedKey(key);\n    }\n\n  };\n  let modality = $dgwbL$useRef(null);\n  let hasPrimaryAction = onAction && manager.selectionMode === 'none';\n  let hasSecondaryAction = onAction && manager.selectionMode !== 'none' && manager.selectionBehavior === 'replace';\n  let allowsSelection = !isDisabled && manager.canSelectItem(key); // By default, selection occurs on pointer down. This can be strange if selecting an\n  // item causes the UI to disappear immediately (e.g. menus).\n  // If shouldSelectOnPressUp is true, we use onPressUp instead of onPressStart.\n  // onPress requires a pointer down event on the same element as pointer up. For menus,\n  // we want to be able to have the pointer down on the trigger that opens the menu and\n  // the pointer up on the menu item rather than requiring a separate press.\n  // For keyboard events, selection still occurs on key down.\n\n  let itemPressProps = {};\n\n  if (shouldSelectOnPressUp) {\n    itemPressProps.onPressStart = e => {\n      modality.current = e.pointerType;\n      if (e.pointerType === 'keyboard') onSelect(e);\n    };\n\n    itemPressProps.onPressUp = e => {\n      if (e.pointerType !== 'keyboard') onSelect(e);\n    };\n\n    itemPressProps.onPress = hasPrimaryAction ? () => onAction() : null;\n  } else {\n    // On touch, it feels strange to select on touch down, so we special case this.\n    itemPressProps.onPressStart = e => {\n      modality.current = e.pointerType;\n      if (e.pointerType !== 'touch' && e.pointerType !== 'virtual') onSelect(e);\n    };\n\n    itemPressProps.onPress = e => {\n      if (e.pointerType === 'touch' || e.pointerType === 'virtual' || hasPrimaryAction) {\n        // Single tap on touch with selectionBehavior = 'replace' performs an action, i.e. navigation.\n        // Also perform action on press up when selectionMode = 'none'.\n        if (hasPrimaryAction || hasSecondaryAction) onAction();else onSelect(e);\n      }\n    };\n  }\n\n  if (!isVirtualized) itemProps['data-key'] = key;\n  itemPressProps.preventFocusOnPress = shouldUseVirtualFocus;\n  let {\n    pressProps: pressProps,\n    isPressed: isPressed\n  } = $dgwbL$usePress(itemPressProps); // Double clicking with a mouse with selectionBehavior = 'replace' performs an action.\n\n  let onDoubleClick = hasSecondaryAction ? e => {\n    if (modality.current === 'mouse') {\n      e.stopPropagation();\n      e.preventDefault();\n      onAction();\n    }\n  } : undefined; // Long pressing an item with touch when selectionBehavior = 'replace' switches the selection behavior\n  // to 'toggle'. This changes the single tap behavior from performing an action (i.e. navigating) to\n  // selecting, and may toggle the appearance of a UI affordance like checkboxes on each item.\n  // TODO: what about when drag and drop is also enabled??\n\n  let {\n    longPressProps: longPressProps\n  } = $dgwbL$useLongPress({\n    isDisabled: !hasSecondaryAction,\n\n    onLongPress(e) {\n      if (e.pointerType === 'touch') {\n        onSelect(e);\n        manager.setSelectionBehavior('toggle');\n      }\n    }\n\n  }); // Pressing the Enter key with selectionBehavior = 'replace' performs an action (i.e. navigation).\n\n  let onKeyUp = hasSecondaryAction ? e => {\n    if (e.key === 'Enter') onAction();\n  } : undefined;\n  return {\n    itemProps: $dgwbL$mergeProps(itemProps, allowsSelection || hasPrimaryAction ? pressProps : {}, hasSecondaryAction ? longPressProps : {}, {\n      onKeyUp: onKeyUp,\n      onDoubleClick: onDoubleClick\n    }),\n    isPressed: isPressed\n  };\n}\n\nvar $38e0ab555fbd8768$exports = {};\n$parcel$export($38e0ab555fbd8768$exports, \"useSelectableList\", () => $38e0ab555fbd8768$export$b95089534ab7c1fd);\nvar $8dd8d9b0d53d6ca8$exports = {};\n$parcel$export($8dd8d9b0d53d6ca8$exports, \"ListKeyboardDelegate\", () => $8dd8d9b0d53d6ca8$export$a05409b8bb224a5a);\n\nclass $8dd8d9b0d53d6ca8$export$a05409b8bb224a5a {\n  getKeyBelow(key) {\n    key = this.collection.getKeyAfter(key);\n\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) return key;\n      key = this.collection.getKeyAfter(key);\n    }\n  }\n\n  getKeyAbove(key) {\n    key = this.collection.getKeyBefore(key);\n\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) return key;\n      key = this.collection.getKeyBefore(key);\n    }\n  }\n\n  getFirstKey() {\n    let key = this.collection.getFirstKey();\n\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) return key;\n      key = this.collection.getKeyAfter(key);\n    }\n  }\n\n  getLastKey() {\n    let key = this.collection.getLastKey();\n\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) return key;\n      key = this.collection.getKeyBefore(key);\n    }\n  }\n\n  getItem(key) {\n    return this.ref.current.querySelector(`[data-key=\"${key}\"]`);\n  }\n\n  getKeyPageAbove(key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) return null;\n    let pageY = Math.max(0, item.offsetTop + item.offsetHeight - menu.offsetHeight);\n\n    while (item && item.offsetTop > pageY) {\n      key = this.getKeyAbove(key);\n      item = this.getItem(key);\n    }\n\n    return key;\n  }\n\n  getKeyPageBelow(key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) return null;\n    let pageY = Math.min(menu.scrollHeight, item.offsetTop - item.offsetHeight + menu.offsetHeight);\n\n    while (item && item.offsetTop < pageY) {\n      key = this.getKeyBelow(key);\n      item = this.getItem(key);\n    }\n\n    return key;\n  }\n\n  getKeyForSearch(search, fromKey) {\n    if (!this.collator) return null;\n    let collection = this.collection;\n    let key = fromKey || this.getFirstKey();\n\n    while (key != null) {\n      let item = collection.getItem(key);\n      let substring = item.textValue.slice(0, search.length);\n      if (item.textValue && this.collator.compare(substring, search) === 0) return key;\n      key = this.getKeyBelow(key);\n    }\n\n    return null;\n  }\n\n  constructor(collection, disabledKeys, ref, collator) {\n    this.collection = collection;\n    this.disabledKeys = disabledKeys;\n    this.ref = ref;\n    this.collator = collator;\n  }\n\n}\n\nfunction $38e0ab555fbd8768$export$b95089534ab7c1fd(props) {\n  let {\n    selectionManager: selectionManager,\n    collection: collection,\n    disabledKeys: disabledKeys,\n    ref: ref,\n    keyboardDelegate: keyboardDelegate,\n    autoFocus: autoFocus,\n    shouldFocusWrap: shouldFocusWrap,\n    isVirtualized: isVirtualized,\n    disallowEmptySelection: disallowEmptySelection,\n    selectOnFocus = false,\n    disallowTypeAhead: disallowTypeAhead,\n    shouldUseVirtualFocus: shouldUseVirtualFocus,\n    allowsTabNavigation: allowsTabNavigation\n  } = props; // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n\n  let collator = $dgwbL$useCollator({\n    usage: 'search',\n    sensitivity: 'base'\n  });\n  let delegate = $dgwbL$useMemo(() => keyboardDelegate || new $8dd8d9b0d53d6ca8$export$a05409b8bb224a5a(collection, disabledKeys, ref, collator), [keyboardDelegate, collection, disabledKeys, ref, collator]);\n  let {\n    collectionProps: collectionProps\n  } = $52ac987c016884e9$export$d6daf82dcd84e87c({\n    ref: ref,\n    selectionManager: selectionManager,\n    keyboardDelegate: delegate,\n    autoFocus: autoFocus,\n    shouldFocusWrap: shouldFocusWrap,\n    disallowEmptySelection: disallowEmptySelection,\n    selectOnFocus: selectOnFocus,\n    disallowTypeAhead: disallowTypeAhead,\n    shouldUseVirtualFocus: shouldUseVirtualFocus,\n    allowsTabNavigation: allowsTabNavigation,\n    isVirtualized: isVirtualized,\n    scrollRef: ref\n  });\n  return {\n    listProps: collectionProps\n  };\n}\n\nexport { $52ac987c016884e9$export$d6daf82dcd84e87c as useSelectableCollection, $5ec5a493f6042709$export$ecf600387e221c37 as useSelectableItem, $38e0ab555fbd8768$export$b95089534ab7c1fd as useSelectableList, $8dd8d9b0d53d6ca8$export$a05409b8bb224a5a as ListKeyboardDelegate, $a6f03d1cafa48b51$export$e32c88dfddc6e1d8 as useTypeSelect };","map":{"version":3,"mappings":"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","names":["$c636d3b6065ca9f6$export$d3e3bd3e26688c04","e","$dgwbL$isAppleDevice","altKey","ctrlKey","$c636d3b6065ca9f6$export$16792effe837dba3","$dgwbL$isMac","metaKey","$a6f03d1cafa48b51$export$e32c88dfddc6e1d8","options","keyboardDelegate","selectionManager","onTypeSelect","state","$dgwbL$useRef","search","timeout","current","onKeyDown","character","$a6f03d1cafa48b51$var$getStringForKey","key","trim","length","preventDefault","stopPropagation","getKeyForSearch","focusedKey","setFocusedKey","clearTimeout","setTimeout","typeSelectProps","onKeyDownCapture","test","$52ac987c016884e9$export$d6daf82dcd84e87c","manager","delegate","ref","autoFocus","shouldFocusWrap","disallowEmptySelection","disallowSelectAll","selectOnFocus","selectionBehavior","disallowTypeAhead","shouldUseVirtualFocus","allowsTabNavigation","isVirtualized","scrollRef","direction","$dgwbL$useLocale","contains","target","navigateToKey","childFocus","shiftKey","selectionMode","extendSelection","replaceSelection","getKeyBelow","ref4","ref1","nextKey","getFirstKey","call","getKeyAbove","ref2","ref3","getLastKey","getKeyLeftOf","getKeyRightOf","firstKey","lastKey","getKeyPageBelow","getKeyPageAbove","selectAll","clearSelection","focus","walker","$dgwbL$getFocusableTreeWalker","tabbable","next","last","lastChild","document","activeElement","$dgwbL$focusWithoutScrolling","scrollPos","top","left","$dgwbL$useEvent","scrollTop","scrollLeft","onFocus","isFocused","currentTarget","setFocused","navigateToFirstKey","relatedTarget","_lastSelectedKey","_firstSelectedKey","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","lastSelectedKey","firstSelectedKey","element","querySelector","$dgwbL$scrollIntoView","onBlur","autoFocusRef","$dgwbL$useEffect","selectedKeys","size","values","value","$dgwbL$focusSafely","handlers","onMouseDown","$dgwbL$mergeProps","tabIndex","collectionProps","$5ec5a493f6042709$export$ecf600387e221c37","shouldSelectOnPressUp","isDisabled","onAction","onSelect","pointerType","toggleSelection","isSelected","childFocusStrategy","itemProps","modality","hasPrimaryAction","hasSecondaryAction","allowsSelection","canSelectItem","itemPressProps","onPressStart","onPressUp","onPress","preventFocusOnPress","pressProps","isPressed","$dgwbL$usePress","onDoubleClick","undefined","longPressProps","$dgwbL$useLongPress","onLongPress","setSelectionBehavior","onKeyUp","$8dd8d9b0d53d6ca8$export$a05409b8bb224a5a","collection","getKeyAfter","item","getItem","type","disabledKeys","has","getKeyBefore","menu","pageY","Math","max","offsetTop","offsetHeight","min","scrollHeight","fromKey","collator","substring","textValue","slice","compare","$38e0ab555fbd8768$export$b95089534ab7c1fd","props","$dgwbL$useCollator","usage","sensitivity","$dgwbL$useMemo","listProps"],"sources":["/Users/asattiraju/Desktop/Big data/gt-bigdata-website/node_modules/@react-aria/selection/dist/packages/@react-aria/selection/src/utils.ts","/Users/asattiraju/Desktop/Big data/gt-bigdata-website/node_modules/@react-aria/selection/dist/packages/@react-aria/selection/src/useTypeSelect.ts","/Users/asattiraju/Desktop/Big data/gt-bigdata-website/node_modules/@react-aria/selection/dist/packages/@react-aria/selection/src/useSelectableCollection.ts","/Users/asattiraju/Desktop/Big data/gt-bigdata-website/node_modules/@react-aria/selection/dist/packages/@react-aria/selection/src/useSelectableItem.ts","/Users/asattiraju/Desktop/Big data/gt-bigdata-website/node_modules/@react-aria/selection/dist/packages/@react-aria/selection/src/ListKeyboardDelegate.ts","/Users/asattiraju/Desktop/Big data/gt-bigdata-website/node_modules/@react-aria/selection/dist/packages/@react-aria/selection/src/useSelectableList.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {isAppleDevice} from '@react-aria/utils';\nimport {isMac} from '@react-aria/utils';\n\ninterface Event {\n  altKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean\n}\n\nexport function isNonContiguousSelectionModifier(e: Event) {\n  // Ctrl + Arrow Up/Arrow Down has a system wide meaning on macOS, so use Alt instead.\n  // On Windows and Ubuntu, Alt + Space has a system wide meaning.\n  return isAppleDevice() ? e.altKey : e.ctrlKey;\n}\n\nexport function isCtrlKeyPressed(e: Event) {\n  if (isMac()) {\n    return e.metaKey;\n  }\n\n  return e.ctrlKey;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {HTMLAttributes, Key, KeyboardEvent, useRef} from 'react';\nimport {KeyboardDelegate} from '@react-types/shared';\nimport {MultipleSelectionManager} from '@react-stately/selection';\n\ninterface TypeSelectOptions {\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * Called when an item is focused by typing.\n   */\n  onTypeSelect?: (key: Key) => void\n}\n\ninterface TypeSelectAria {\n  /**\n   * Props to be spread on the owner of the options.\n   */\n  typeSelectProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles typeahead interactions with collections.\n */\nexport function useTypeSelect(options: TypeSelectOptions): TypeSelectAria {\n  let {keyboardDelegate, selectionManager, onTypeSelect} = options;\n  let state = useRef({\n    search: '',\n    timeout: null\n  }).current;\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    let character = getStringForKey(e.key);\n    if (!character || e.ctrlKey || e.metaKey) {\n      return;\n    }\n\n    // Do not propagate the Spacebar event if it's meant to be part of the search.\n    // When we time out, the search term becomes empty, hence the check on length.\n    // Trimming is to account for the case of pressing the Spacebar more than once,\n    // which should cycle through the selection/deselection of the focused item.\n    if (character === ' ' && state.search.trim().length > 0) {\n      e.preventDefault();\n      if (!('continuePropagation' in e)) {\n        e.stopPropagation();\n      }\n    }\n\n    state.search += character;\n\n    // Use the delegate to find a key to focus.\n    // Prioritize items after the currently focused item, falling back to searching the whole list.\n    let key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey);\n\n    // If no key found, search from the top.\n    if (key == null) {\n      key = keyboardDelegate.getKeyForSearch(state.search);\n    }\n\n    if (key != null) {\n      selectionManager.setFocusedKey(key);\n      if (onTypeSelect) {\n        onTypeSelect(key);\n      }\n    }\n\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(() => {\n      state.search = '';\n    }, 500);\n  };\n\n  return {\n    typeSelectProps: {\n      // Using a capturing listener to catch the keydown event before\n      // other hooks in order to handle the Spacebar event.\n      onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null\n    }\n  };\n}\n\nfunction getStringForKey(key: string) {\n  // If the key is of length 1, it is an ASCII value.\n  // Otherwise, if there are no ASCII characters in the key name,\n  // it is a Unicode character.\n  // See https://www.w3.org/TR/uievents-key/\n  if (key.length === 1 || !/^[A-Z]/i.test(key)) {\n    return key;\n  }\n\n  return '';\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusEvent, HTMLAttributes, Key, KeyboardEvent, RefObject, useEffect, useRef} from 'react';\nimport {focusSafely, getFocusableTreeWalker} from '@react-aria/focus';\nimport {FocusStrategy, KeyboardDelegate} from '@react-types/shared';\nimport {focusWithoutScrolling, mergeProps, scrollIntoView, useEvent} from '@react-aria/utils';\nimport {isCtrlKeyPressed, isNonContiguousSelectionModifier} from './utils';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useLocale} from '@react-aria/i18n';\nimport {useTypeSelect} from './useTypeSelect';\n\ninterface SelectableCollectionOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A delegate object that implements behavior for keyboard focus movement.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * The ref attached to the element representing the collection.\n   */\n  ref: RefObject<HTMLElement>,\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean,\n  /**\n   * Whether the collection allows the user to select all items via keyboard shortcut.\n   * @default false\n   */\n  disallowSelectAll?: boolean,\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean,\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean,\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean,\n  /**\n   * Whether the collection items are contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * The ref attached to the scrollable body. Used to provide automatic scrolling on item focus for non-virtualized collections.\n   * If not provided, defaults to the collection ref.\n   */\n  scrollRef?: RefObject<HTMLElement>\n}\n\ninterface SelectableCollectionAria {\n  /** Props for the collection element. */\n  collectionProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles interactions with selectable collections.\n */\nexport function useSelectableCollection(options: SelectableCollectionOptions): SelectableCollectionAria {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false,\n    selectOnFocus = manager.selectionBehavior === 'replace',\n    disallowTypeAhead = false,\n    shouldUseVirtualFocus,\n    allowsTabNavigation = false,\n    isVirtualized,\n    // If no scrollRef is provided, assume the collection ref is the scrollable region\n    scrollRef = ref\n  } = options;\n  let {direction} = useLocale();\n\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    // Prevent option + tab from doing anything since it doesn't move focus to the cells, only buttons/checkboxes\n    if (e.altKey && e.key === 'Tab') {\n      e.preventDefault();\n    }\n\n    // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n    if (!ref.current.contains(e.target as HTMLElement)) {\n      return;\n    }\n\n    const navigateToKey = (key: Key | undefined, childFocus?: FocusStrategy) => {\n      if (key != null) {\n        manager.setFocusedKey(key, childFocus);\n\n        if (e.shiftKey && manager.selectionMode === 'multiple') {\n          manager.extendSelection(key);\n        } else if (selectOnFocus && !isNonContiguousSelectionModifier(e)) {\n          manager.replaceSelection(key);\n        }\n      }\n    };\n\n    switch (e.key) {\n      case 'ArrowDown': {\n        if (delegate.getKeyBelow) {\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyBelow(manager.focusedKey)\n              : delegate.getFirstKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getFirstKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case 'ArrowUp': {\n        if (delegate.getKeyAbove) {\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyAbove(manager.focusedKey)\n              : delegate.getLastKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getLastKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case 'ArrowLeft': {\n        if (delegate.getKeyLeftOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyLeftOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === 'rtl' ? 'first' : 'last');\n        }\n        break;\n      }\n      case 'ArrowRight': {\n        if (delegate.getKeyRightOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyRightOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === 'rtl' ? 'last' : 'first');\n        }\n        break;\n      }\n      case 'Home':\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          let firstKey = delegate.getFirstKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(firstKey);\n          if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(firstKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(firstKey);\n          }\n        }\n        break;\n      case 'End':\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(lastKey);\n          if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(lastKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(lastKey);\n          }\n        }\n        break;\n      case 'PageDown':\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'PageUp':\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'a':\n        if (isCtrlKeyPressed(e) && manager.selectionMode === 'multiple' && disallowSelectAll !== true) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case 'Escape':\n        e.preventDefault();\n        if (!disallowEmptySelection) {\n          manager.clearSelection();\n        }\n        break;\n      case 'Tab': {\n        if (!allowsTabNavigation) {\n          // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n          // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n          // in the collection, so that the browser default behavior will apply starting from that element\n          // rather than the currently focused one.\n          if (e.shiftKey) {\n            ref.current.focus();\n          } else {\n            let walker = getFocusableTreeWalker(ref.current, {tabbable: true});\n            let next: HTMLElement;\n            let last: HTMLElement;\n            do {\n              last = walker.lastChild() as HTMLElement;\n              if (last) {\n                next = last;\n              }\n            } while (last);\n\n            if (next && !next.contains(document.activeElement)) {\n              focusWithoutScrolling(next);\n            }\n          }\n          break;\n        }\n      }\n    }\n  };\n\n  // Store the scroll position so we can restore it later.\n  let scrollPos = useRef({top: 0, left: 0});\n  useEvent(scrollRef, 'scroll', isVirtualized ? null : () => {\n    scrollPos.current = {\n      top: scrollRef.current.scrollTop,\n      left: scrollRef.current.scrollLeft\n    };\n  });\n\n  let onFocus = (e: FocusEvent) => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) {\n        manager.setFocused(false);\n      }\n\n      return;\n    }\n\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    manager.setFocused(true);\n\n    if (manager.focusedKey == null) {\n      let navigateToFirstKey = (key: Key | undefined) => {\n        if (key != null) {\n          manager.setFocusedKey(key);\n          if (selectOnFocus) {\n            manager.replaceSelection(key);\n          }\n        }\n      };\n      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n      let relatedTarget = e.relatedTarget as Element;\n      if (relatedTarget && (e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING)) {\n        navigateToFirstKey(manager.lastSelectedKey ?? delegate.getLastKey());\n      } else {\n        navigateToFirstKey(manager.firstSelectedKey ?? delegate.getFirstKey());\n      }\n    } else if (!isVirtualized) {\n      // Restore the scroll position to what it was before.\n      scrollRef.current.scrollTop = scrollPos.current.top;\n      scrollRef.current.scrollLeft = scrollPos.current.left;\n\n      // Refocus and scroll the focused item into view if it exists within the scrollable region.\n      let element = scrollRef.current.querySelector(`[data-key=\"${manager.focusedKey}\"]`) as HTMLElement;\n      if (element) {\n        // This prevents a flash of focus on the first/last element in the collection\n        focusWithoutScrolling(element);\n        scrollIntoView(scrollRef.current, element);\n      }\n    }\n  };\n\n  let onBlur = (e) => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget as HTMLElement)) {\n      manager.setFocused(false);\n    }\n  };\n\n  const autoFocusRef = useRef(autoFocus);\n  useEffect(() => {\n    if (autoFocusRef.current) {\n      let focusedKey = null;\n\n      // Check focus strategy to determine which item to focus\n      if (autoFocus === 'first') {\n        focusedKey = delegate.getFirstKey();\n      } if (autoFocus === 'last') {\n        focusedKey = delegate.getLastKey();\n      }\n\n      // If there are any selected keys, make the first one the new focus target\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) {\n        focusedKey = selectedKeys.values().next().value;\n      }\n\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n\n      // If no default focus key is selected, focus the collection itself.\n      if (focusedKey == null && !shouldUseVirtualFocus) {\n        focusSafely(ref.current);\n      }\n    }\n    autoFocusRef.current = false;\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // If not virtualized, scroll the focused element into view when the focusedKey changes.\n  // When virtualized, Virtualizer handles this internally.\n  useEffect(() => {\n    if (!isVirtualized && manager.focusedKey && scrollRef?.current) {\n      let element = scrollRef.current.querySelector(`[data-key=\"${manager.focusedKey}\"]`) as HTMLElement;\n      if (element) {\n        scrollIntoView(scrollRef.current, element);\n      }\n    }\n  }, [isVirtualized, scrollRef, manager.focusedKey]);\n\n  let handlers = {\n    onKeyDown,\n    onFocus,\n    onBlur,\n    onMouseDown(e) {\n      // Ignore events that bubbled through portals.\n      if (e.currentTarget.contains(e.target)) {\n        // Prevent focus going to the collection when clicking on the scrollbar.\n        e.preventDefault();\n      }\n    }\n  };\n\n  let {typeSelectProps} = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: manager\n  });\n\n  if (!disallowTypeAhead) {\n    handlers = mergeProps(typeSelectProps, handlers);\n  }\n\n  // If nothing is focused within the collection, make the collection itself tabbable.\n  // This will be marshalled to either the first or last item depending on where focus came from.\n  // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try\n  // to move real DOM focus to the element anyway.\n  let tabIndex: number;\n  if (!shouldUseVirtualFocus) {\n    tabIndex = manager.focusedKey == null ? 0 : -1;\n  }\n\n  return {\n    collectionProps: {\n      ...handlers,\n      tabIndex\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {focusSafely} from '@react-aria/focus';\nimport {HTMLAttributes, Key, RefObject, useEffect, useRef} from 'react';\nimport {isCtrlKeyPressed, isNonContiguousSelectionModifier} from './utils';\nimport {LongPressEvent, PressEvent} from '@react-types/shared';\nimport {mergeProps} from '@react-aria/utils';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {PressProps, useLongPress, usePress} from '@react-aria/interactions';\n\ninterface SelectableItemOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A unique key for the item.\n   */\n  key: Key,\n  /**\n   * Ref to the item.\n   */\n  ref: RefObject<HTMLElement>,\n  /**\n   * By default, selection occurs on pointer down. This can be strange if selecting an\n   * item causes the UI to disappear immediately (e.g. menus).\n   */\n  shouldSelectOnPressUp?: boolean,\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * Function to focus the item.\n   */\n  focus?: () => void,\n  /**\n   * Whether the option should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /** Whether the item is disabled. */\n  isDisabled?: boolean,\n  /**\n   * Handler that is called when a user performs an action on the cell. The exact user event depends on\n   * the collection's `selectionBehavior` prop and the interaction modality.\n   */\n  onAction?: () => void\n}\n\ninterface SelectableItemAria {\n  /**\n   * Props to be spread on the item root node.\n   */\n  itemProps: HTMLAttributes<HTMLElement>,\n  /** Whether the item is currently in a pressed state. */\n  isPressed: boolean\n}\n\n/**\n * Handles interactions with an item in a selectable collection.\n */\nexport function useSelectableItem(options: SelectableItemOptions): SelectableItemAria {\n  let {\n    selectionManager: manager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    isVirtualized,\n    shouldUseVirtualFocus,\n    focus,\n    isDisabled,\n    onAction\n  } = options;\n\n  let onSelect = (e: PressEvent | LongPressEvent | PointerEvent) => {\n    if (e.pointerType === 'keyboard' && isNonContiguousSelectionModifier(e)) {\n      manager.toggleSelection(key);\n    } else {\n      if (manager.selectionMode === 'none') {\n        return;\n      }\n\n      if (manager.selectionMode === 'single') {\n        if (manager.isSelected(key) && !manager.disallowEmptySelection) {\n          manager.toggleSelection(key);\n        } else {\n          manager.replaceSelection(key);\n        }\n      } else if (e && e.shiftKey) {\n        manager.extendSelection(key);\n      } else if (manager.selectionBehavior === 'toggle' || (e && (isCtrlKeyPressed(e) || e.pointerType === 'touch' || e.pointerType === 'virtual'))) {\n        // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n        manager.toggleSelection(key);\n      } else {\n        manager.replaceSelection(key);\n      }\n    }\n  };\n\n  // Focus the associated DOM node when this item becomes the focusedKey\n  let isFocused = key === manager.focusedKey;\n  useEffect(() => {\n    if (isFocused && manager.isFocused && !shouldUseVirtualFocus && document.activeElement !== ref.current) {\n      if (focus) {\n        focus();\n      } else {\n        focusSafely(ref.current);\n      }\n    }\n  }, [ref, isFocused, manager.focusedKey, manager.childFocusStrategy, manager.isFocused, shouldUseVirtualFocus]);\n\n  // Set tabIndex to 0 if the element is focused, or -1 otherwise so that only the last focused\n  // item is tabbable.  If using virtual focus, don't set a tabIndex at all so that VoiceOver\n  // on iOS 14 doesn't try to move real DOM focus to the item anyway.\n  let itemProps: SelectableItemAria['itemProps'] = {};\n  if (!shouldUseVirtualFocus) {\n    itemProps = {\n      tabIndex: isFocused ? 0 : -1,\n      onFocus(e) {\n        if (e.target === ref.current) {\n          manager.setFocusedKey(key);\n        }\n      }\n    };\n  }\n\n  let modality = useRef(null);\n  let hasPrimaryAction = onAction && manager.selectionMode === 'none';\n  let hasSecondaryAction = onAction && manager.selectionMode !== 'none' && manager.selectionBehavior === 'replace';\n  let allowsSelection = !isDisabled && manager.canSelectItem(key);\n\n  // By default, selection occurs on pointer down. This can be strange if selecting an\n  // item causes the UI to disappear immediately (e.g. menus).\n  // If shouldSelectOnPressUp is true, we use onPressUp instead of onPressStart.\n  // onPress requires a pointer down event on the same element as pointer up. For menus,\n  // we want to be able to have the pointer down on the trigger that opens the menu and\n  // the pointer up on the menu item rather than requiring a separate press.\n  // For keyboard events, selection still occurs on key down.\n  let itemPressProps: PressProps = {};\n  if (shouldSelectOnPressUp) {\n    itemPressProps.onPressStart = (e) => {\n      modality.current = e.pointerType;\n      if (e.pointerType === 'keyboard') {\n        onSelect(e);\n      }\n    };\n\n    itemPressProps.onPressUp = (e) => {\n      if (e.pointerType !== 'keyboard') {\n        onSelect(e);\n      }\n    };\n\n    itemPressProps.onPress = hasPrimaryAction ? () => onAction() : null;\n  } else {\n    // On touch, it feels strange to select on touch down, so we special case this.\n    itemPressProps.onPressStart = (e) => {\n      modality.current = e.pointerType;\n      if (e.pointerType !== 'touch' && e.pointerType !== 'virtual') {\n        onSelect(e);\n      }\n    };\n\n    itemPressProps.onPress = (e) => {\n      if (e.pointerType === 'touch' || e.pointerType === 'virtual' || hasPrimaryAction) {\n        // Single tap on touch with selectionBehavior = 'replace' performs an action, i.e. navigation.\n        // Also perform action on press up when selectionMode = 'none'.\n        if (hasPrimaryAction || hasSecondaryAction) {\n          onAction();\n        } else {\n          onSelect(e);\n        }\n      }\n    };\n  }\n\n  if (!isVirtualized) {\n    itemProps['data-key'] = key;\n  }\n\n  itemPressProps.preventFocusOnPress = shouldUseVirtualFocus;\n  let {pressProps, isPressed} = usePress(itemPressProps);\n\n  // Double clicking with a mouse with selectionBehavior = 'replace' performs an action.\n  let onDoubleClick = hasSecondaryAction ? (e) => {\n    if (modality.current === 'mouse') {\n      e.stopPropagation();\n      e.preventDefault();\n      onAction();\n    }\n  } : undefined;\n\n  // Long pressing an item with touch when selectionBehavior = 'replace' switches the selection behavior\n  // to 'toggle'. This changes the single tap behavior from performing an action (i.e. navigating) to\n  // selecting, and may toggle the appearance of a UI affordance like checkboxes on each item.\n  // TODO: what about when drag and drop is also enabled??\n  let {longPressProps} = useLongPress({\n    isDisabled: !hasSecondaryAction,\n    onLongPress(e) {\n      if (e.pointerType === 'touch') {\n        onSelect(e);\n        manager.setSelectionBehavior('toggle');\n      }\n    }\n  });\n\n  // Pressing the Enter key with selectionBehavior = 'replace' performs an action (i.e. navigation).\n  let onKeyUp = hasSecondaryAction ? (e: KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      onAction();\n    }\n  } : undefined;\n\n  return {\n    itemProps: mergeProps(\n      itemProps,\n      allowsSelection || hasPrimaryAction ? pressProps : {},\n      hasSecondaryAction ? longPressProps : {},\n      {onKeyUp, onDoubleClick}\n    ),\n    isPressed\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, KeyboardDelegate, Node} from '@react-types/shared';\nimport {Key, RefObject} from 'react';\n\nexport class ListKeyboardDelegate<T> implements KeyboardDelegate {\n  private collection: Collection<Node<T>>;\n  private disabledKeys: Set<Key>;\n  private ref: RefObject<HTMLElement>;\n  private collator: Intl.Collator;\n\n  constructor(collection: Collection<Node<T>>, disabledKeys: Set<Key>, ref: RefObject<HTMLElement>, collator?: Intl.Collator) {\n    this.collection = collection;\n    this.disabledKeys = disabledKeys;\n    this.ref = ref;\n    this.collator = collator;\n  }\n\n  getKeyBelow(key: Key) {\n    key = this.collection.getKeyAfter(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n  }\n\n  getKeyAbove(key: Key) {\n    key = this.collection.getKeyBefore(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyBefore(key);\n    }\n  }\n\n  getFirstKey() {\n    let key = this.collection.getFirstKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n  }\n\n  getLastKey() {\n    let key = this.collection.getLastKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyBefore(key);\n    }\n  }\n\n  private getItem(key: Key): HTMLElement {\n    return this.ref.current.querySelector(`[data-key=\"${key}\"]`);\n  }\n\n  getKeyPageAbove(key: Key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) {\n      return null;\n    }\n\n    let pageY = Math.max(0, item.offsetTop + item.offsetHeight - menu.offsetHeight);\n\n    while (item && item.offsetTop > pageY) {\n      key = this.getKeyAbove(key);\n      item = this.getItem(key);\n    }\n\n    return key;\n  }\n\n  getKeyPageBelow(key: Key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) {\n      return null;\n    }\n\n    let pageY = Math.min(menu.scrollHeight, item.offsetTop - item.offsetHeight + menu.offsetHeight);\n\n    while (item && item.offsetTop < pageY) {\n      key = this.getKeyBelow(key);\n      item = this.getItem(key);\n    }\n\n    return key;\n  }\n\n  getKeyForSearch(search: string, fromKey?: Key) {\n    if (!this.collator) {\n      return null;\n    }\n\n    let collection = this.collection;\n    let key = fromKey || this.getFirstKey();\n    while (key != null) {\n      let item = collection.getItem(key);\n      let substring = item.textValue.slice(0, search.length);\n      if (item.textValue && this.collator.compare(substring, search) === 0) {\n        return key;\n      }\n\n      key = this.getKeyBelow(key);\n    }\n\n    return null;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, FocusStrategy, KeyboardDelegate, Node} from '@react-types/shared';\nimport {HTMLAttributes, Key, RefObject, useMemo} from 'react';\nimport {ListKeyboardDelegate} from './ListKeyboardDelegate';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useCollator} from '@react-aria/i18n';\nimport {useSelectableCollection} from './useSelectableCollection';\n\ninterface SelectableListOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * State of the collection.\n   */\n  collection: Collection<Node<unknown>>,\n  /**\n   * The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.\n   */\n  disabledKeys: Set<Key>,\n  /**\n   * A ref to the item.\n   */\n  ref?: RefObject<HTMLElement>,\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean,\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean,\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean,\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean\n}\n\ninterface SelectableListAria {\n  /**\n   * Props for the option element.\n   */\n  listProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles interactions with a selectable list.\n */\nexport function useSelectableList(props: SelectableListOptions): SelectableListAria {\n  let {\n    selectionManager,\n    collection,\n    disabledKeys,\n    ref,\n    keyboardDelegate,\n    autoFocus,\n    shouldFocusWrap,\n    isVirtualized,\n    disallowEmptySelection,\n    selectOnFocus = false,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation\n  } = props;\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({usage: 'search', sensitivity: 'base'});\n  let delegate = useMemo(() => keyboardDelegate || new ListKeyboardDelegate(collection, disabledKeys, ref, collator), [keyboardDelegate, collection, disabledKeys, ref, collator]);\n\n  let {collectionProps} = useSelectableCollection({\n    ref,\n    selectionManager,\n    keyboardDelegate: delegate,\n    autoFocus,\n    shouldFocusWrap,\n    disallowEmptySelection,\n    selectOnFocus,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation,\n    isVirtualized,\n    scrollRef: ref\n  });\n\n  return {\n    listProps: collectionProps\n  };\n}\n"]},"metadata":{},"sourceType":"module"}