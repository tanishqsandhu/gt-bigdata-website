{"ast":null,"code":"import { useEffect as $g7Czo$useEffect } from \"react\";\nimport { useToggle as $g7Czo$useToggle } from \"@react-aria/toggle\";\nimport { filterDOMProps as $g7Czo$filterDOMProps, mergeProps as $g7Czo$mergeProps } from \"@react-aria/utils\";\nimport { useLabel as $g7Czo$useLabel } from \"@react-aria/label\";\nimport { useToggleState as $g7Czo$useToggleState } from \"@react-stately/toggle\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $fea2f35efc29884c$exports = {};\n$parcel$export($fea2f35efc29884c$exports, \"useCheckbox\", () => $fea2f35efc29884c$export$e375f10ce42261c5);\n\nfunction $fea2f35efc29884c$export$e375f10ce42261c5(props, state, inputRef) {\n  let {\n    inputProps: inputProps\n  } = $g7Czo$useToggle(props, state, inputRef);\n  let {\n    isSelected: isSelected\n  } = state;\n  let {\n    isIndeterminate: isIndeterminate\n  } = props;\n  $g7Czo$useEffect(() => {\n    // indeterminate is a property, but it can only be set via javascript\n    // https://css-tricks.com/indeterminate-checkboxes/\n    if (inputRef.current) inputRef.current.indeterminate = isIndeterminate;\n  });\n  return {\n    inputProps: { ...inputProps,\n      checked: isSelected,\n      'aria-checked': isIndeterminate ? 'mixed' : isSelected\n    }\n  };\n}\n\nvar $ec288cd435d5d49a$exports = {};\n$parcel$export($ec288cd435d5d49a$exports, \"useCheckboxGroup\", () => $ec288cd435d5d49a$export$49ff6f28c54f1cbe);\nconst $61350709ee325005$export$31440636951aa68c = new WeakMap();\n\nfunction $ec288cd435d5d49a$export$49ff6f28c54f1cbe(props, state) {\n  let {\n    isDisabled: isDisabled,\n    name: name\n  } = props;\n  let {\n    labelProps: labelProps,\n    fieldProps: fieldProps\n  } = $g7Czo$useLabel({ ...props,\n    // Checkbox group is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n  let domProps = $g7Czo$filterDOMProps(props, {\n    labelable: true\n  }); // Pass name prop from group to all items by attaching to the state.\n\n  $61350709ee325005$export$31440636951aa68c.set(state, name);\n  return {\n    groupProps: $g7Czo$mergeProps(domProps, {\n      role: 'group',\n      'aria-disabled': isDisabled || undefined,\n      ...fieldProps\n    }),\n    labelProps: labelProps\n  };\n}\n\nvar $a84307d0769c22d8$exports = {};\n$parcel$export($a84307d0769c22d8$exports, \"useCheckboxGroupItem\", () => $a84307d0769c22d8$export$353b32fc6898d37d);\n\nfunction $a84307d0769c22d8$export$353b32fc6898d37d(props, state, inputRef) {\n  const toggleState = $g7Czo$useToggleState({\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isSelected: state.isSelected(props.value),\n\n    onChange(isSelected) {\n      if (isSelected) state.addValue(props.value);else state.removeValue(props.value);\n      if (props.onChange) props.onChange(isSelected);\n    }\n\n  });\n  let {\n    inputProps: inputProps\n  } = $fea2f35efc29884c$export$e375f10ce42261c5({ ...props,\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isDisabled: props.isDisabled || state.isDisabled,\n    name: props.name || $61350709ee325005$export$31440636951aa68c.get(state)\n  }, toggleState, inputRef);\n  return {\n    inputProps: inputProps\n  };\n}\n\nexport { $fea2f35efc29884c$export$e375f10ce42261c5 as useCheckbox, $ec288cd435d5d49a$export$49ff6f28c54f1cbe as useCheckboxGroup, $a84307d0769c22d8$export$353b32fc6898d37d as useCheckboxGroupItem };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;SA8BgBA,0CAAYC,OAA0BC,OAAoBC,UAAqD;AAC7H,MAAI;AAACC;AAAD,MAAeC,gBAAS,CAACJ,KAAD,EAAQC,KAAR,EAAeC,QAAf,CAA5B;AACA,MAAI;AAACG;AAAD,MAAeJ,KAAnB;AAEA,MAAI;AAACK;AAAD,MAAoBN,KAAxB;AACAO,kBAAS,OAAO;AACd;AACA;AACA,QAAIL,QAAQ,CAACM,OAAb,EACEN,QAAQ,CAACM,OAAT,CAAiBC,aAAjB,GAAiCH,eAAjC;AAEH,GANQ,CAAT;AAQA,SAAO;AACLH,cAAU,EAAE,KACPA,UADO;AAEVO,aAAO,EAAEL,UAFC;AAGV,sBAAgBC,eAAe,GAAG,OAAH,GAAaD;AAHlC;AADP,GAAP;AAOD;;;;ACpCM,MAAMM,yCAAkB,GAAG,IAAIC,OAAJ,EAA3B;;SCkBSC,0CAAiBb,OAA+BC,OAA8C;AAC5G,MAAI;AAACa,0BAAD;AAAWC,UAAEA;AAAb,MAAqBf,KAAzB;AAEA,MAAI;AAACgB,0BAAD;AAAWC,gBAAEA;AAAb,MAA2BC,eAAQ,CAAC,KACnClB,KADmC;AAEtC;AACA;AACAmB,oBAAgB,EAAE;AAJoB,GAAD,CAAvC;AAOA,MAAIC,QAAQ,GAAGC,qBAAc,CAACrB,KAAD,EAAQ;AAACsB,aAAS,EAAE;AAAZ,GAAR,CAA7B,CAV4G,CAY5G;;AACAX,2CAAkB,CAACY,GAAnB,CAAuBtB,KAAvB,EAA8Bc,IAA9B;AAEA,SAAO;AACLS,cAAU,EAAEC,iBAAU,CAACL,QAAD,EAAW;AAC/BM,UAAI,EAAE,OADyB;AAE/B,uBAAiBZ,UAAU,IAAIa,SAFA;SAG5BV;AAH4B,KAAX,CADjB;gBAMLD;AANK,GAAP;AAQD;;;;;SC7BeY,0CAAqB5B,OAAmCC,OAA2BC,UAAqD;AACtJ,QAAM2B,WAAW,GAAGC,qBAAc,CAAC;AACjCC,cAAU,EAAE/B,KAAK,CAAC+B,UAAN,IAAoB9B,KAAK,CAAC8B,UADL;AAEjC1B,cAAU,EAAEJ,KAAK,CAACI,UAAN,CAAiBL,KAAK,CAACgC,KAAvB,CAFqB;;AAGjCC,YAAQ,CAAC5B,UAAD,EAAa;AACnB,UAAIA,UAAJ,EACEJ,KAAK,CAACiC,QAAN,CAAelC,KAAK,CAACgC,KAArB,EADF,KAGE/B,KAAK,CAACkC,WAAN,CAAkBnC,KAAK,CAACgC,KAAxB;AAGF,UAAIhC,KAAK,CAACiC,QAAV,EACEjC,KAAK,CAACiC,QAAN,CAAe5B,UAAf;AAEH;;AAbgC,GAAD,CAAlC;AAgBA,MAAI;AAACF;AAAD,MAAeJ,yCAAW,CAAC,KAC1BC,KAD0B;AAE7B+B,cAAU,EAAE/B,KAAK,CAAC+B,UAAN,IAAoB9B,KAAK,CAAC8B,UAFT;AAG7BjB,cAAU,EAAEd,KAAK,CAACc,UAAN,IAAoBb,KAAK,CAACa,UAHT;AAI7BC,QAAI,EAAEf,KAAK,CAACe,IAAN,IAAcJ,yCAAkB,CAACyB,GAAnB,CAAuBnC,KAAvB;AAJS,GAAD,EAK3B4B,WAL2B,EAKd3B,QALc,CAA9B;AAOA,SAAO;gBAACC;AAAD,GAAP;AACD","names":["$fea2f35efc29884c$export$e375f10ce42261c5","props","state","inputRef","inputProps","$g7Czo$useToggle","isSelected","isIndeterminate","$g7Czo$useEffect","current","indeterminate","checked","$61350709ee325005$export$31440636951aa68c","WeakMap","$ec288cd435d5d49a$export$49ff6f28c54f1cbe","isDisabled","name","labelProps","fieldProps","$g7Czo$useLabel","labelElementType","domProps","$g7Czo$filterDOMProps","labelable","set","groupProps","$g7Czo$mergeProps","role","undefined","$a84307d0769c22d8$export$353b32fc6898d37d","toggleState","$g7Czo$useToggleState","isReadOnly","value","onChange","addValue","removeValue","get"],"sources":["/Users/asattiraju/Desktop/Big data/gt-bigdata-website/node_modules/@react-aria/checkbox/dist/packages/@react-aria/checkbox/src/useCheckbox.ts","/Users/asattiraju/Desktop/Big data/gt-bigdata-website/node_modules/@react-aria/checkbox/dist/packages/@react-aria/checkbox/src/utils.ts","/Users/asattiraju/Desktop/Big data/gt-bigdata-website/node_modules/@react-aria/checkbox/dist/packages/@react-aria/checkbox/src/useCheckboxGroup.ts","/Users/asattiraju/Desktop/Big data/gt-bigdata-website/node_modules/@react-aria/checkbox/dist/packages/@react-aria/checkbox/src/useCheckboxGroupItem.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxProps} from '@react-types/checkbox';\nimport {InputHTMLAttributes, RefObject, useEffect} from 'react';\nimport {ToggleState} from '@react-stately/toggle';\nimport {useToggle} from '@react-aria/toggle';\n\nexport interface CheckboxAria {\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox component.\n * Checkboxes allow users to select multiple items from a list of individual items, or\n * to mark one individual item as selected.\n * @param props - Props for the checkbox.\n * @param state - State for the checkbox, as returned by `useToggleState`.\n * @param inputRef - A ref for the HTML input element.\n */\nexport function useCheckbox(props: AriaCheckboxProps, state: ToggleState, inputRef: RefObject<HTMLInputElement>): CheckboxAria {\n  let {inputProps} = useToggle(props, state, inputRef);\n  let {isSelected} = state;\n\n  let {isIndeterminate} = props;\n  useEffect(() => {\n    // indeterminate is a property, but it can only be set via javascript\n    // https://css-tricks.com/indeterminate-checkboxes/\n    if (inputRef.current) {\n      inputRef.current.indeterminate = isIndeterminate;\n    }\n  });\n\n  return {\n    inputProps: {\n      ...inputProps,\n      checked: isSelected,\n      'aria-checked': isIndeterminate ? 'mixed' : isSelected\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxGroupState} from '@react-stately/checkbox';\n\nexport const checkboxGroupNames = new WeakMap<CheckboxGroupState, string>();\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxGroupProps} from '@react-types/checkbox';\nimport {checkboxGroupNames} from './utils';\nimport {CheckboxGroupState} from '@react-stately/checkbox';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {HTMLAttributes} from 'react';\nimport {useLabel} from '@react-aria/label';\n\ninterface CheckboxGroupAria {\n  /** Props for the checkbox group wrapper element. */\n  groupProps: HTMLAttributes<HTMLElement>,\n  /** Props for the checkbox group's visible label (if any). */\n  labelProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox group component.\n * Checkbox groups allow users to select multiple items from a list of options.\n * @param props - Props for the checkbox group.\n * @param state - State for the checkbox group, as returned by `useCheckboxGroupState`.\n */\nexport function useCheckboxGroup(props: AriaCheckboxGroupProps, state: CheckboxGroupState): CheckboxGroupAria {\n  let {isDisabled, name} = props;\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    // Checkbox group is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  // Pass name prop from group to all items by attaching to the state.\n  checkboxGroupNames.set(state, name);\n\n  return {\n    groupProps: mergeProps(domProps, {\n      role: 'group',\n      'aria-disabled': isDisabled || undefined,\n      ...fieldProps\n    }),\n    labelProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxGroupItemProps} from '@react-types/checkbox';\nimport {CheckboxAria, useCheckbox} from './useCheckbox';\nimport {checkboxGroupNames} from './utils';\nimport {CheckboxGroupState} from '@react-stately/checkbox';\nimport {RefObject} from 'react';\nimport {useToggleState} from '@react-stately/toggle';\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox component contained within a checkbox group.\n * Checkbox groups allow users to select multiple items from a list of options.\n * @param props - Props for the checkbox.\n * @param state - State for the checkbox, as returned by `useCheckboxGroupState`.\n * @param inputRef - A ref for the HTML input element.\n */\nexport function useCheckboxGroupItem(props: AriaCheckboxGroupItemProps, state: CheckboxGroupState, inputRef: RefObject<HTMLInputElement>): CheckboxAria {\n  const toggleState = useToggleState({\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isSelected: state.isSelected(props.value),\n    onChange(isSelected) {\n      if (isSelected) {\n        state.addValue(props.value);\n      } else {\n        state.removeValue(props.value);\n      }\n\n      if (props.onChange) {\n        props.onChange(isSelected);\n      }\n    }\n  });\n\n  let {inputProps} = useCheckbox({\n    ...props,\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isDisabled: props.isDisabled || state.isDisabled,\n    name: props.name || checkboxGroupNames.get(state)\n  }, toggleState, inputRef);\n\n  return {inputProps};\n}\n"]},"metadata":{},"sourceType":"module"}