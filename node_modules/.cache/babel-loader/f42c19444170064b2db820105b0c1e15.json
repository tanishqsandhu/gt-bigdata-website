{"ast":null,"code":"import { snapValueToStep as $drHW0$snapValueToStep, clamp as $drHW0$clamp } from \"@react-aria/utils\";\nimport { useControlledState as $drHW0$useControlledState } from \"@react-stately/utils\";\nimport { useState as $drHW0$useState, useRef as $drHW0$useRef } from \"react\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $8f011f344c0ccbcc$exports = {};\n$parcel$export($8f011f344c0ccbcc$exports, \"useSliderState\", () => $8f011f344c0ccbcc$export$e5fda3247f5d67f9);\nconst $8f011f344c0ccbcc$var$DEFAULT_MIN_VALUE = 0;\nconst $8f011f344c0ccbcc$var$DEFAULT_MAX_VALUE = 100;\nconst $8f011f344c0ccbcc$var$DEFAULT_STEP_VALUE = 1;\n\nfunction $8f011f344c0ccbcc$export$e5fda3247f5d67f9(props) {\n  const {\n    isDisabled: isDisabled,\n    minValue = $8f011f344c0ccbcc$var$DEFAULT_MIN_VALUE,\n    maxValue = $8f011f344c0ccbcc$var$DEFAULT_MAX_VALUE,\n    numberFormatter: formatter,\n    step = $8f011f344c0ccbcc$var$DEFAULT_STEP_VALUE\n  } = props;\n\n  var _defaultValue;\n\n  const [values, setValues] = $drHW0$useControlledState(props.value, (_defaultValue = props.defaultValue) !== null && _defaultValue !== void 0 ? _defaultValue : [minValue], props.onChange);\n  const [isDraggings, setDraggings] = $drHW0$useState(new Array(values.length).fill(false));\n  const isEditablesRef = $drHW0$useRef(new Array(values.length).fill(true));\n  const [focusedIndex, setFocusedIndex] = $drHW0$useState(undefined);\n  const valuesRef = $drHW0$useRef(null);\n  valuesRef.current = values;\n  const isDraggingsRef = $drHW0$useRef(null);\n  isDraggingsRef.current = isDraggings;\n\n  function getValuePercent(value) {\n    return (value - minValue) / (maxValue - minValue);\n  }\n\n  function getThumbMinValue(index) {\n    return index === 0 ? minValue : values[index - 1];\n  }\n\n  function getThumbMaxValue(index) {\n    return index === values.length - 1 ? maxValue : values[index + 1];\n  }\n\n  function isThumbEditable(index) {\n    return isEditablesRef.current[index];\n  }\n\n  function setThumbEditable(index, editable) {\n    isEditablesRef.current[index] = editable;\n  }\n\n  function updateValue(index, value) {\n    if (isDisabled || !isThumbEditable(index)) return;\n    const thisMin = getThumbMinValue(index);\n    const thisMax = getThumbMaxValue(index); // Round value to multiple of step, clamp value between min and max\n\n    value = $drHW0$snapValueToStep(value, thisMin, thisMax, step);\n    valuesRef.current = $8f011f344c0ccbcc$var$replaceIndex(valuesRef.current, index, value);\n    setValues(valuesRef.current);\n  }\n\n  function updateDragging(index, dragging) {\n    if (isDisabled || !isThumbEditable(index)) return;\n    const wasDragging = isDraggingsRef.current[index];\n    isDraggingsRef.current = $8f011f344c0ccbcc$var$replaceIndex(isDraggingsRef.current, index, dragging);\n    setDraggings(isDraggingsRef.current); // Call onChangeEnd if no handles are dragging.\n\n    if (props.onChangeEnd && wasDragging && !isDraggingsRef.current.some(Boolean)) props.onChangeEnd(valuesRef.current);\n  }\n\n  function getFormattedValue(value) {\n    return formatter.format(value);\n  }\n\n  function setThumbPercent(index, percent) {\n    updateValue(index, getPercentValue(percent));\n  }\n\n  function getRoundedValue(value) {\n    return Math.round((value - minValue) / step) * step + minValue;\n  }\n\n  function getPercentValue(percent) {\n    const val = percent * (maxValue - minValue) + minValue;\n    return $drHW0$clamp(getRoundedValue(val), minValue, maxValue);\n  }\n\n  return {\n    values: values,\n    getThumbValue: index => values[index],\n    setThumbValue: updateValue,\n    setThumbPercent: setThumbPercent,\n    isThumbDragging: index => isDraggings[index],\n    setThumbDragging: updateDragging,\n    focusedThumb: focusedIndex,\n    setFocusedThumb: setFocusedIndex,\n    getThumbPercent: index => getValuePercent(values[index]),\n    getValuePercent: getValuePercent,\n    getThumbValueLabel: index => getFormattedValue(values[index]),\n    getFormattedValue: getFormattedValue,\n    getThumbMinValue: getThumbMinValue,\n    getThumbMaxValue: getThumbMaxValue,\n    getPercentValue: getPercentValue,\n    isThumbEditable: isThumbEditable,\n    setThumbEditable: setThumbEditable,\n    step: step\n  };\n}\n\nfunction $8f011f344c0ccbcc$var$replaceIndex(array, index, value) {\n  if (array[index] === value) return array;\n  return [...array.slice(0, index), value, ...array.slice(index + 1)];\n}\n\nexport { $8f011f344c0ccbcc$export$e5fda3247f5d67f9 as useSliderState };","map":{"version":3,"mappings":"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","names":["$8f011f344c0ccbcc$var$DEFAULT_MIN_VALUE","$8f011f344c0ccbcc$var$DEFAULT_MAX_VALUE","$8f011f344c0ccbcc$var$DEFAULT_STEP_VALUE","$8f011f344c0ccbcc$export$e5fda3247f5d67f9","props","isDisabled","minValue","maxValue","numberFormatter","formatter","step","_defaultValue","values","setValues","$drHW0$useControlledState","value","defaultValue","onChange","isDraggings","setDraggings","$drHW0$useState","Array","length","fill","isEditablesRef","$drHW0$useRef","focusedIndex","setFocusedIndex","undefined","valuesRef","current","isDraggingsRef","getValuePercent","getThumbMinValue","index","getThumbMaxValue","isThumbEditable","setThumbEditable","editable","updateValue","thisMin","thisMax","$drHW0$snapValueToStep","$8f011f344c0ccbcc$var$replaceIndex","updateDragging","dragging","wasDragging","onChangeEnd","some","Boolean","getFormattedValue","format","setThumbPercent","percent","getPercentValue","getRoundedValue","Math","round","val","$drHW0$clamp","getThumbValue","setThumbValue","isThumbDragging","setThumbDragging","focusedThumb","setFocusedThumb","getThumbPercent","getThumbValueLabel","array","slice"],"sources":["/Users/asattiraju/Desktop/gt-bigdata-website/node_modules/@react-stately/slider/dist/packages/@react-stately/slider/src/useSliderState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {clamp, snapValueToStep} from '@react-aria/utils';\nimport {SliderProps} from '@react-types/slider';\nimport {useControlledState} from '@react-stately/utils';\nimport {useRef, useState} from 'react';\n\nexport interface SliderState {\n  /**\n   * Values managed by the slider by thumb index.\n   */\n  readonly values: number[],\n  /**\n   * Get the value for the specified thumb.\n   * @param index\n   */\n  getThumbValue(index: number): number,\n\n  /**\n   * Sets the value for the specified thumb.\n   * The actual value set will be clamped and rounded according to min/max/step.\n   * @param index\n   * @param value\n   */\n  setThumbValue(index: number, value: number): void,\n\n  /**\n   * Sets value for the specified thumb by percent offset (between 0 and 1).\n   * @param index\n   * @param percent\n   */\n  setThumbPercent(index: number, percent: number): void,\n\n  /**\n   * Whether the specific thumb is being dragged.\n   * @param index\n   */\n  isThumbDragging(index: number): boolean,\n  /**\n   * Set is dragging on the specified thumb.\n   * @param index\n   * @param dragging\n   */\n  setThumbDragging(index: number, dragging: boolean): void,\n\n  /**\n   * Currently-focused thumb index.\n   */\n  readonly focusedThumb: number | undefined,\n  /**\n   * Set focused true on specified thumb. This will remove focus from\n   * any thumb that had it before.\n   * @param index\n   */\n  setFocusedThumb(index: number | undefined): void,\n\n  /**\n   * Returns the specified thumb's value as a percentage from 0 to 1.\n   * @param index\n   */\n  getThumbPercent(index: number): number,\n\n  /**\n   * Returns the value as a percent between the min and max of the slider.\n   * @param index\n   */\n  getValuePercent(value: number): number,\n\n  /**\n   * Returns the string label for the specified thumb's value, per props.formatOptions.\n   * @param index\n   */\n  getThumbValueLabel(index: number): string,\n\n  /**\n   * Returns the string label for the value, per props.formatOptions.\n   * @param index\n   */\n  getFormattedValue(value: number): string,\n\n  /**\n   * Returns the min allowed value for the specified thumb.\n   * @param index\n   */\n  getThumbMinValue(index: number): number,\n\n  /**\n   * Returns the max allowed value for the specified thumb.\n   * @param index\n   */\n  getThumbMaxValue(index: number): number,\n\n  /**\n   * Converts a percent along track (between 0 and 1) to the corresponding value.\n   * @param percent\n   */\n  getPercentValue(percent: number): number,\n\n  /**\n   * Returns if the specified thumb is editable.\n   * @param index\n   */\n  isThumbEditable(index: number): boolean,\n\n  /**\n   * Set the specified thumb's editable state.\n   * @param index\n   * @param editable\n   */\n  setThumbEditable(index: number, editable: boolean): void,\n\n  /**\n   * The step amount for the slider.\n   */\n  readonly step: number\n}\n\nconst DEFAULT_MIN_VALUE = 0;\nconst DEFAULT_MAX_VALUE = 100;\nconst DEFAULT_STEP_VALUE = 1;\n\ninterface SliderStateOptions extends SliderProps {\n  numberFormatter: Intl.NumberFormat\n}\n\n/**\n * Provides state management for a slider component. Stores values for all thumbs,\n * formats values for localization, and provides methods to update the position\n * of any thumbs.\n * @param props\n */\nexport function useSliderState(props: SliderStateOptions): SliderState {\n  const {isDisabled, minValue = DEFAULT_MIN_VALUE, maxValue = DEFAULT_MAX_VALUE, numberFormatter: formatter, step = DEFAULT_STEP_VALUE} = props;\n\n  const [values, setValues] = useControlledState<number[]>(\n    props.value as any,\n    props.defaultValue ?? [minValue] as any,\n    props.onChange as any\n  );\n  const [isDraggings, setDraggings] = useState<boolean[]>(new Array(values.length).fill(false));\n  const isEditablesRef = useRef<boolean[]>(new Array(values.length).fill(true));\n  const [focusedIndex, setFocusedIndex] = useState<number | undefined>(undefined);\n\n  const valuesRef = useRef<number[]>(null);\n  valuesRef.current = values;\n  const isDraggingsRef = useRef<boolean[]>(null);\n  isDraggingsRef.current = isDraggings;\n\n  function getValuePercent(value: number) {\n    return (value - minValue) / (maxValue - minValue);\n  }\n\n  function getThumbMinValue(index: number) {\n    return index === 0 ? minValue : values[index - 1];\n  }\n  function getThumbMaxValue(index: number) {\n    return index === values.length - 1 ? maxValue : values[index + 1];\n  }\n\n  function isThumbEditable(index: number) {\n    return isEditablesRef.current[index];\n  }\n\n  function setThumbEditable(index: number, editable: boolean) {\n    isEditablesRef.current[index] = editable;\n  }\n\n  function updateValue(index: number, value: number) {\n    if (isDisabled || !isThumbEditable(index)) {\n      return;\n    }\n    const thisMin = getThumbMinValue(index);\n    const thisMax = getThumbMaxValue(index);\n\n    // Round value to multiple of step, clamp value between min and max\n    value = snapValueToStep(value, thisMin, thisMax, step);\n    valuesRef.current = replaceIndex(valuesRef.current, index, value);\n    setValues(valuesRef.current);\n  }\n\n  function updateDragging(index: number, dragging: boolean) {\n    if (isDisabled || !isThumbEditable(index)) {\n      return;\n    }\n\n    const wasDragging = isDraggingsRef.current[index];\n    isDraggingsRef.current = replaceIndex(isDraggingsRef.current, index, dragging);\n    setDraggings(isDraggingsRef.current);\n\n    // Call onChangeEnd if no handles are dragging.\n    if (props.onChangeEnd && wasDragging && !isDraggingsRef.current.some(Boolean)) {\n      props.onChangeEnd(valuesRef.current);\n    }\n  }\n\n  function getFormattedValue(value: number) {\n    return formatter.format(value);\n  }\n\n  function setThumbPercent(index: number, percent: number) {\n    updateValue(index, getPercentValue(percent));\n  }\n\n  function getRoundedValue(value: number) {\n    return Math.round((value - minValue) / step) * step + minValue;\n  }\n\n  function getPercentValue(percent: number) {\n    const val = percent * (maxValue - minValue) + minValue;\n    return clamp(getRoundedValue(val), minValue, maxValue);\n  }\n\n  return {\n    values: values,\n    getThumbValue: (index: number) => values[index],\n    setThumbValue: updateValue,\n    setThumbPercent,\n    isThumbDragging: (index: number) => isDraggings[index],\n    setThumbDragging: updateDragging,\n    focusedThumb: focusedIndex,\n    setFocusedThumb: setFocusedIndex,\n    getThumbPercent: (index: number) => getValuePercent(values[index]),\n    getValuePercent,\n    getThumbValueLabel: (index: number) => getFormattedValue(values[index]),\n    getFormattedValue,\n    getThumbMinValue,\n    getThumbMaxValue,\n    getPercentValue,\n    isThumbEditable,\n    setThumbEditable,\n    step\n  };\n}\n\nfunction replaceIndex<T>(array: T[], index: number, value: T) {\n  if (array[index] === value) {\n    return array;\n  }\n\n  return [...array.slice(0, index), value, ...array.slice(index + 1)];\n}\n"]},"metadata":{},"sourceType":"module"}