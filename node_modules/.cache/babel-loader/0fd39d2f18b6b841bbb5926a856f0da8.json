{"ast":null,"code":"import { Section as $d9194dbb8d71f3c7$re_export$Section, useCollection as $lqH1y$useCollection } from \"@react-stately/collections\";\nimport { useGridState as $lqH1y$useGridState, GridCollection as $lqH1y$GridCollection } from \"@react-stately/grid\";\nimport $lqH1y$react, { useMemo as $lqH1y$useMemo } from \"react\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $faf2b44c080fba5d$exports = {};\n$parcel$export($faf2b44c080fba5d$exports, \"useTableState\", () => $faf2b44c080fba5d$export$907bcc6c48325fd6);\nconst $52fd3153b80928bf$var$ROW_HEADER_COLUMN_KEY = 'row-header-column-' + Math.random().toString(36).slice(2);\n\nfunction $52fd3153b80928bf$var$buildHeaderRows(keyMap, columnNodes) {\n  let columns = [];\n  let seen = new Map();\n\n  for (let column of columnNodes) {\n    let parentKey = column.parentKey;\n    let col = [column];\n\n    while (parentKey) {\n      let parent = keyMap.get(parentKey); // If we've already seen this parent, than it is shared\n      // with a previous column. If the current column is taller\n      // than the previous column, than we need to shift the parent\n      // in the previous column so it's level with the current column.\n\n      if (seen.has(parent)) {\n        parent.colspan++;\n        let {\n          column: column,\n          index: index\n        } = seen.get(parent);\n        if (index > col.length) break;\n\n        for (let i = index; i < col.length; i++) column.splice(i, 0, null); // Adjust shifted indices\n\n\n        for (let i1 = col.length; i1 < column.length; i1++) if (column[i1] && seen.has(column[i1])) seen.get(column[i1]).index = i1;\n      } else {\n        parent.colspan = 1;\n        col.push(parent);\n        seen.set(parent, {\n          column: col,\n          index: col.length - 1\n        });\n      }\n\n      parentKey = parent.parentKey;\n    }\n\n    columns.push(col);\n    column.index = columns.length - 1;\n  }\n\n  let maxLength = Math.max(...columns.map(c => c.length));\n  let headerRows = Array(maxLength).fill(0).map(() => []); // Convert columns into rows.\n\n  let colIndex = 0;\n\n  for (let column1 of columns) {\n    let i = maxLength - 1;\n\n    for (let item of column1) {\n      if (item) {\n        // Fill the space up until the current column with a placeholder\n        let row = headerRows[i];\n        let rowLength = row.reduce((p, c) => p + c.colspan, 0);\n\n        if (rowLength < colIndex) {\n          let placeholder = {\n            type: 'placeholder',\n            key: 'placeholder-' + item.key,\n            colspan: colIndex - rowLength,\n            index: rowLength,\n            value: null,\n            rendered: null,\n            level: i,\n            hasChildNodes: false,\n            childNodes: [],\n            textValue: null\n          };\n\n          if (row.length > 0) {\n            row[row.length - 1].nextKey = placeholder.key;\n            placeholder.prevKey = row[row.length - 1].key;\n          }\n\n          row.push(placeholder);\n        }\n\n        if (row.length > 0) {\n          row[row.length - 1].nextKey = item.key;\n          item.prevKey = row[row.length - 1].key;\n        }\n\n        item.level = i;\n        item.index = colIndex;\n        row.push(item);\n      }\n\n      i--;\n    }\n\n    colIndex++;\n  } // Add placeholders at the end of each row that is shorter than the maximum\n\n\n  let i = 0;\n\n  for (let row1 of headerRows) {\n    let rowLength = row1.reduce((p, c) => p + c.colspan, 0);\n\n    if (rowLength < columnNodes.length) {\n      let placeholder = {\n        type: 'placeholder',\n        key: 'placeholder-' + row1[row1.length - 1].key,\n        colspan: columnNodes.length - rowLength,\n        index: rowLength,\n        value: null,\n        rendered: null,\n        level: i,\n        hasChildNodes: false,\n        childNodes: [],\n        textValue: null,\n        prevKey: row1[row1.length - 1].key\n      };\n      row1.push(placeholder);\n    }\n\n    i++;\n  }\n\n  return headerRows.map((childNodes, index) => {\n    let row = {\n      type: 'headerrow',\n      key: 'headerrow-' + index,\n      index: index,\n      value: null,\n      rendered: null,\n      level: 0,\n      hasChildNodes: true,\n      childNodes: childNodes,\n      textValue: null\n    };\n    return row;\n  });\n}\n\nvar tmp = Symbol.iterator;\n\nclass $52fd3153b80928bf$export$596e1b2e2cf93690 extends $lqH1y$GridCollection {\n  *[tmp]() {\n    yield* this.body.childNodes;\n  }\n\n  get size() {\n    return [...this.body.childNodes].length;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    var ref;\n    return (ref = [...this.body.childNodes][0]) === null || ref === void 0 ? void 0 : ref.key;\n  }\n\n  getLastKey() {\n    var ref;\n    let rows = [...this.body.childNodes];\n    return (ref = rows[rows.length - 1]) === null || ref === void 0 ? void 0 : ref.key;\n  }\n\n  getItem(key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n\n  constructor(nodes, prev, opts) {\n    let rowHeaderColumnKeys = new Set();\n    let body;\n    let columns = []; // Add cell for selection checkboxes if needed.\n\n    if (opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) {\n      let rowHeaderColumn = {\n        type: 'column',\n        key: $52fd3153b80928bf$var$ROW_HEADER_COLUMN_KEY,\n        value: null,\n        textValue: '',\n        level: 0,\n        index: 0,\n        hasChildNodes: false,\n        rendered: null,\n        childNodes: [],\n        props: {\n          isSelectionCell: true\n        }\n      };\n      columns.unshift(rowHeaderColumn);\n    }\n\n    let rows = [];\n    let columnKeyMap = new Map();\n\n    let visit = node => {\n      switch (node.type) {\n        case 'body':\n          body = node;\n          break;\n\n        case 'column':\n          columnKeyMap.set(node.key, node);\n\n          if (!node.hasChildNodes) {\n            columns.push(node);\n            if (node.props.isRowHeader) rowHeaderColumnKeys.add(node.key);\n          }\n\n          break;\n\n        case 'item':\n          rows.push(node);\n          return;\n        // do not go into childNodes\n      }\n\n      for (let child of node.childNodes) visit(child);\n    };\n\n    for (let node1 of nodes) visit(node1);\n\n    let headerRows = $52fd3153b80928bf$var$buildHeaderRows(columnKeyMap, columns);\n    headerRows.forEach((row, i) => rows.splice(i, 0, row));\n    super({\n      columnCount: columns.length,\n      items: rows,\n      visitNode: node => {\n        node.column = columns[node.index];\n        return node;\n      }\n    });\n    this.columns = columns;\n    this.rowHeaderColumnKeys = rowHeaderColumnKeys;\n    this.body = body;\n    this.headerRows = headerRows; // Default row header column to the first one.\n\n    if (this.rowHeaderColumnKeys.size === 0) this.rowHeaderColumnKeys.add(this.columns[(opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) ? 1 : 0].key);\n  }\n\n}\n\nconst $faf2b44c080fba5d$var$OPPOSITE_SORT_DIRECTION = {\n  ascending: 'descending',\n  descending: 'ascending'\n};\n\nfunction $faf2b44c080fba5d$export$907bcc6c48325fd6(props) {\n  let {\n    selectionMode = 'none'\n  } = props;\n  let context = $lqH1y$useMemo(() => ({\n    showSelectionCheckboxes: props.showSelectionCheckboxes && selectionMode !== 'none',\n    selectionMode: selectionMode,\n    columns: []\n  }), [props.children, props.showSelectionCheckboxes, selectionMode]);\n  let collection = $lqH1y$useCollection(props, (nodes, prev) => new $52fd3153b80928bf$export$596e1b2e2cf93690(nodes, prev, context), context);\n  let {\n    disabledKeys: disabledKeys,\n    selectionManager: selectionManager\n  } = $lqH1y$useGridState({ ...props,\n    collection: collection\n  });\n  return {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    selectionManager: selectionManager,\n    showSelectionCheckboxes: props.showSelectionCheckboxes || false,\n    sortDescriptor: props.sortDescriptor,\n\n    sort(columnKey) {\n      var ref;\n      props.onSortChange({\n        column: columnKey,\n        direction: ((ref = props.sortDescriptor) === null || ref === void 0 ? void 0 : ref.column) === columnKey ? $faf2b44c080fba5d$var$OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction] : 'ascending'\n      });\n    }\n\n  };\n}\n\nvar $c66ef8364f10cc32$exports = {};\n$parcel$export($c66ef8364f10cc32$exports, \"TableHeader\", () => $c66ef8364f10cc32$export$f850895b287ef28e);\n\nfunction $c66ef8364f10cc32$var$TableHeader(props) {\n  return null;\n}\n\n$c66ef8364f10cc32$var$TableHeader.getCollectionNode = function* getCollectionNode(props) {\n  let {\n    children: children,\n    columns: columns\n  } = props;\n\n  if (typeof children === 'function') {\n    if (!columns) throw new Error('props.children was a function but props.columns is missing');\n\n    for (let column of columns) yield {\n      type: 'column',\n      value: column,\n      renderer: children\n    };\n  } else {\n    let columns = [];\n    $lqH1y$react.Children.forEach(children, column => {\n      columns.push({\n        type: 'column',\n        element: column\n      });\n    });\n    yield* columns;\n  }\n};\n/**\n * A TableHeader is a container for the Column elements in a Table. Columns can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `columns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\n\n\nlet $c66ef8364f10cc32$export$f850895b287ef28e = $c66ef8364f10cc32$var$TableHeader;\nvar $6616af99b4843f0d$exports = {};\n$parcel$export($6616af99b4843f0d$exports, \"TableBody\", () => $6616af99b4843f0d$export$76ccd210b9029917);\n\nfunction $6616af99b4843f0d$var$TableBody(props) {\n  return null;\n}\n\n$6616af99b4843f0d$var$TableBody.getCollectionNode = function* getCollectionNode(props) {\n  let {\n    children: children,\n    items: items1\n  } = props;\n  yield {\n    type: 'body',\n    hasChildNodes: true,\n    props: props,\n\n    *childNodes() {\n      if (typeof children === 'function') {\n        if (!items1) throw new Error('props.children was a function but props.items is missing');\n\n        for (let item of items1) yield {\n          type: 'item',\n          value: item,\n          renderer: children\n        };\n      } else {\n        let items = [];\n        $lqH1y$react.Children.forEach(children, item => {\n          items.push({\n            type: 'item',\n            element: item\n          });\n        });\n        yield* items;\n      }\n    }\n\n  };\n};\n/**\n * A TableBody is a container for the Row elements of a Table. Rows can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `items` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\n\n\nlet $6616af99b4843f0d$export$76ccd210b9029917 = $6616af99b4843f0d$var$TableBody;\nvar $ea4ade809d4abb07$exports = {};\n$parcel$export($ea4ade809d4abb07$exports, \"Column\", () => $ea4ade809d4abb07$export$816b5d811295e6bc);\n\nfunction $ea4ade809d4abb07$var$Column(props) {\n  return null;\n}\n\n$ea4ade809d4abb07$var$Column.getCollectionNode = function* getCollectionNode(props, context1) {\n  let {\n    title: title,\n    children: children,\n    childColumns: childColumns1\n  } = props;\n  let rendered = title || children;\n  let textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'];\n  let fullNodes = yield {\n    type: 'column',\n    hasChildNodes: !!childColumns1 || title && $lqH1y$react.Children.count(children) > 0,\n    rendered: rendered,\n    textValue: textValue,\n    props: props,\n\n    *childNodes() {\n      if (childColumns1) for (let child1 of childColumns1) yield {\n        type: 'column',\n        value: child1\n      };else if (title) {\n        let childColumns = [];\n        $lqH1y$react.Children.forEach(children, child => {\n          childColumns.push({\n            type: 'column',\n            element: child\n          });\n        });\n        yield* childColumns;\n      }\n    },\n\n    shouldInvalidate(newContext) {\n      // This is a bit of a hack, but it works.\n      // If this method is called, then there's a cached version of this node available.\n      // But, we need to keep the list of columns in the new context up to date.\n      updateContext(newContext);\n      return false;\n    }\n\n  };\n\n  let updateContext = context => {\n    // register leaf columns on the context so that <Row> can access them\n    for (let node of fullNodes) if (!node.hasChildNodes) context.columns.push(node);\n  };\n\n  updateContext(context1);\n};\n/**\n * A Column represents a field of each item within a Table. Columns may also contain nested\n * Column elements to represent column groups. Nested columns can be statically defined as\n * children, or dynamically generated using a function based on the `childColumns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\n\n\nlet $ea4ade809d4abb07$export$816b5d811295e6bc = $ea4ade809d4abb07$var$Column;\nvar $e2dc941fd2e6f314$exports = {};\n$parcel$export($e2dc941fd2e6f314$exports, \"Row\", () => $e2dc941fd2e6f314$export$b59bdbef9ce70de2);\n\nfunction $e2dc941fd2e6f314$var$Row(props) {\n  return null;\n}\n\n$e2dc941fd2e6f314$var$Row.getCollectionNode = function* getCollectionNode(props, context) {\n  let {\n    children: children,\n    textValue: textValue\n  } = props;\n  yield {\n    type: 'item',\n    props: props,\n    textValue: textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: true,\n\n    *childNodes() {\n      // Process cells first\n      if (context.showSelectionCheckboxes && context.selectionMode !== 'none') yield {\n        type: 'cell',\n        key: 'header',\n        props: {\n          isSelectionCell: true\n        }\n      };\n      if (typeof children === 'function') for (let column of context.columns) yield {\n        type: 'cell',\n        element: children(column.key),\n        key: column.key // this is combined with the row key by CollectionBuilder\n\n      };else {\n        let cells = [];\n        $lqH1y$react.Children.forEach(children, cell => {\n          cells.push({\n            type: 'cell',\n            element: cell\n          });\n        });\n        if (cells.length !== context.columns.length) throw new Error(`Cell count must match column count. Found ${cells.length} cells and ${context.columns.length} columns.`);\n        yield* cells;\n      }\n    },\n\n    shouldInvalidate(newContext) {\n      // Invalidate all rows if the columns changed.\n      return newContext.columns.length !== context.columns.length || newContext.columns.some((c, i) => c.key !== context.columns[i].key) || newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes || newContext.selectionMode !== context.selectionMode;\n    }\n\n  };\n};\n/**\n * A Row represents a single item in a Table and contains Cell elements for each column.\n * Cells can be statically defined as children, or generated dynamically using a function\n * based on the columns defined in the TableHeader.\n */\n// We don't want getCollectionNode to show up in the type definition\n\n\nlet $e2dc941fd2e6f314$export$b59bdbef9ce70de2 = $e2dc941fd2e6f314$var$Row;\nvar $d002254cbf65adb0$exports = {};\n$parcel$export($d002254cbf65adb0$exports, \"Cell\", () => $d002254cbf65adb0$export$f6f0c3fe4ec306ea);\n\nfunction $d002254cbf65adb0$var$Cell(props) {\n  return null;\n}\n\n$d002254cbf65adb0$var$Cell.getCollectionNode = function* getCollectionNode(props) {\n  let {\n    children: children\n  } = props;\n  let textValue = props.textValue || (typeof children === 'string' ? children : '') || props['aria-label'] || '';\n  yield {\n    type: 'cell',\n    props: props,\n    rendered: children,\n    textValue: textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: false\n  };\n};\n/**\n * A Cell represents the value of a single Column within a Table Row.\n */\n// We don't want getCollectionNode to show up in the type definition\n\n\nlet $d002254cbf65adb0$export$f6f0c3fe4ec306ea = $d002254cbf65adb0$var$Cell;\nexport { $d9194dbb8d71f3c7$re_export$Section as Section, $faf2b44c080fba5d$export$907bcc6c48325fd6 as useTableState, $c66ef8364f10cc32$export$f850895b287ef28e as TableHeader, $6616af99b4843f0d$export$76ccd210b9029917 as TableBody, $ea4ade809d4abb07$export$816b5d811295e6bc as Column, $e2dc941fd2e6f314$export$b59bdbef9ce70de2 as Row, $d002254cbf65adb0$export$f6f0c3fe4ec306ea as Cell };","map":{"version":3,"mappings":"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","names":["$52fd3153b80928bf$var$ROW_HEADER_COLUMN_KEY","Math","random","toString","slice","$52fd3153b80928bf$var$buildHeaderRows","keyMap","columnNodes","columns","seen","Map","column","parentKey","col","parent","get","has","colspan","index","length","i","splice","i1","push","set","maxLength","max","map","c","headerRows","Array","fill","colIndex","column1","item","row","rowLength","reduce","p","placeholder","type","key","value","rendered","level","hasChildNodes","childNodes","textValue","nextKey","prevKey","row1","Symbol","iterator","$52fd3153b80928bf$export$596e1b2e2cf93690","$lqH1y$GridCollection","body","size","getKeys","keys","getKeyBefore","node","getKeyAfter","getFirstKey","ref","getLastKey","rows","getItem","at","idx","nodes","prev","opts","rowHeaderColumnKeys","Set","showSelectionCheckboxes","rowHeaderColumn","props","isSelectionCell","unshift","columnKeyMap","visit","isRowHeader","add","child","node1","forEach","columnCount","items","visitNode","$faf2b44c080fba5d$var$OPPOSITE_SORT_DIRECTION","ascending","descending","$faf2b44c080fba5d$export$907bcc6c48325fd6","selectionMode","context","$lqH1y$useMemo","children","collection","$lqH1y$useCollection","disabledKeys","selectionManager","$lqH1y$useGridState","sortDescriptor","sort","columnKey","onSortChange","direction","$c66ef8364f10cc32$var$TableHeader","getCollectionNode","Error","renderer","$lqH1y$react","Children","element","$c66ef8364f10cc32$export$f850895b287ef28e","$6616af99b4843f0d$var$TableBody","items1","$6616af99b4843f0d$export$76ccd210b9029917","$ea4ade809d4abb07$var$Column","context1","title","childColumns","childColumns1","fullNodes","count","child1","shouldInvalidate","newContext","updateContext","$ea4ade809d4abb07$export$816b5d811295e6bc","$e2dc941fd2e6f314$var$Row","cells","cell","some","$e2dc941fd2e6f314$export$b59bdbef9ce70de2","$d002254cbf65adb0$var$Cell","$d002254cbf65adb0$export$f6f0c3fe4ec306ea"],"sources":["/Users/asattiraju/Desktop/Big data/gt-bigdata-website/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/TableCollection.ts","/Users/asattiraju/Desktop/Big data/gt-bigdata-website/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/useTableState.ts","/Users/asattiraju/Desktop/Big data/gt-bigdata-website/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/TableHeader.ts","/Users/asattiraju/Desktop/Big data/gt-bigdata-website/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/TableBody.ts","/Users/asattiraju/Desktop/Big data/gt-bigdata-website/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/Column.ts","/Users/asattiraju/Desktop/Big data/gt-bigdata-website/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/Row.ts","/Users/asattiraju/Desktop/Big data/gt-bigdata-website/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/Cell.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {GridCollection} from '@react-stately/grid';\nimport {GridNode} from '@react-types/grid';\nimport {Key} from 'react';\n\ninterface GridCollectionOptions {\n  showSelectionCheckboxes?: boolean\n}\n\nconst ROW_HEADER_COLUMN_KEY = 'row-header-column-' + Math.random().toString(36).slice(2);\n\nfunction buildHeaderRows<T>(keyMap: Map<Key, GridNode<T>>, columnNodes: GridNode<T>[]): GridNode<T>[] {\n  let columns = [];\n  let seen = new Map();\n  for (let column of columnNodes) {\n    let parentKey = column.parentKey;\n    let col = [column];\n\n    while (parentKey) {\n      let parent: GridNode<T> = keyMap.get(parentKey);\n\n      // If we've already seen this parent, than it is shared\n      // with a previous column. If the current column is taller\n      // than the previous column, than we need to shift the parent\n      // in the previous column so it's level with the current column.\n      if (seen.has(parent)) {\n        parent.colspan++;\n\n        let {column, index} = seen.get(parent);\n        if (index > col.length) {\n          break;\n        }\n\n        for (let i = index; i < col.length; i++) {\n          column.splice(i, 0, null);\n        }\n\n        // Adjust shifted indices\n        for (let i = col.length; i < column.length; i++) {\n          if (column[i] && seen.has(column[i])) {\n            seen.get(column[i]).index = i;\n          }\n        }\n      } else {\n        parent.colspan = 1;\n        col.push(parent);\n        seen.set(parent, {column: col, index: col.length - 1});\n      }\n\n      parentKey = parent.parentKey;\n    }\n\n    columns.push(col);\n    column.index = columns.length - 1;\n  }\n\n  let maxLength = Math.max(...columns.map(c => c.length));\n  let headerRows = Array(maxLength).fill(0).map(() => []);\n\n  // Convert columns into rows.\n  let colIndex = 0;\n  for (let column of columns) {\n    let i = maxLength - 1;\n    for (let item of column) {\n      if (item) {\n        // Fill the space up until the current column with a placeholder\n        let row = headerRows[i];\n        let rowLength = row.reduce((p, c) => p + c.colspan, 0);\n        if (rowLength < colIndex) {\n          let placeholder: GridNode<T> = {\n            type: 'placeholder',\n            key: 'placeholder-' + item.key,\n            colspan: colIndex - rowLength,\n            index: rowLength,\n            value: null,\n            rendered: null,\n            level: i,\n            hasChildNodes: false,\n            childNodes: [],\n            textValue: null\n          };\n\n          if (row.length > 0) {\n            row[row.length - 1].nextKey = placeholder.key;\n            placeholder.prevKey = row[row.length - 1].key;\n          }\n\n          row.push(placeholder);\n        }\n\n        if (row.length > 0) {\n          row[row.length - 1].nextKey = item.key;\n          item.prevKey = row[row.length - 1].key;\n        }\n\n        item.level = i;\n        item.index = colIndex;\n        row.push(item);\n      }\n\n      i--;\n    }\n\n    colIndex++;\n  }\n\n  // Add placeholders at the end of each row that is shorter than the maximum\n  let i = 0;\n  for (let row of headerRows) {\n    let rowLength = row.reduce((p, c) => p + c.colspan, 0);\n    if (rowLength < columnNodes.length) {\n      let placeholder: GridNode<T> = {\n        type: 'placeholder',\n        key: 'placeholder-' + row[row.length - 1].key,\n        colspan: columnNodes.length - rowLength,\n        index: rowLength,\n        value: null,\n        rendered: null,\n        level: i,\n        hasChildNodes: false,\n        childNodes: [],\n        textValue: null,\n        prevKey: row[row.length - 1].key\n      };\n\n      row.push(placeholder);\n    }\n\n    i++;\n  }\n\n  return headerRows.map((childNodes, index) => {\n    let row: GridNode<T> = {\n      type: 'headerrow',\n      key: 'headerrow-' + index,\n      index,\n      value: null,\n      rendered: null,\n      level: 0,\n      hasChildNodes: true,\n      childNodes,\n      textValue: null\n    };\n\n    return row;\n  });\n}\n\nexport class TableCollection<T> extends GridCollection<T> {\n  headerRows: GridNode<T>[];\n  columns: GridNode<T>[];\n  rowHeaderColumnKeys: Set<Key>;\n  body: GridNode<T>;\n\n  constructor(nodes: Iterable<GridNode<T>>, prev?: TableCollection<T>, opts?: GridCollectionOptions) {\n    let rowHeaderColumnKeys: Set<Key> = new Set();\n    let body: GridNode<T>;\n    let columns = [];\n\n    // Add cell for selection checkboxes if needed.\n    if (opts?.showSelectionCheckboxes) {\n      let rowHeaderColumn: GridNode<T> = {\n        type: 'column',\n        key: ROW_HEADER_COLUMN_KEY,\n        value: null,\n        textValue: '',\n        level: 0,\n        index: 0,\n        hasChildNodes: false,\n        rendered: null,\n        childNodes: [],\n        props: {\n          isSelectionCell: true\n        }\n      };\n\n      columns.unshift(rowHeaderColumn);\n    }\n\n    let rows = [];\n    let columnKeyMap = new Map();\n    let visit = (node: GridNode<T>) => {\n      switch (node.type) {\n        case 'body':\n          body = node;\n          break;\n        case 'column':\n          columnKeyMap.set(node.key, node);\n          if (!node.hasChildNodes) {\n            columns.push(node);\n\n            if (node.props.isRowHeader) {\n              rowHeaderColumnKeys.add(node.key);\n            }\n          }\n          break;\n        case 'item':\n          rows.push(node);\n          return; // do not go into childNodes\n      }\n      for (let child of node.childNodes) {\n        visit(child);\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n    let headerRows = buildHeaderRows(columnKeyMap, columns) as GridNode<T>[];\n    headerRows.forEach((row, i) => rows.splice(i, 0, row));\n\n    super({\n      columnCount: columns.length,\n      items: rows,\n      visitNode: node => {\n        node.column = columns[node.index];\n        return node;\n      }\n    });\n    this.columns = columns;\n    this.rowHeaderColumnKeys = rowHeaderColumnKeys;\n    this.body = body;\n    this.headerRows = headerRows;\n\n    // Default row header column to the first one.\n    if (this.rowHeaderColumnKeys.size === 0) {\n      this.rowHeaderColumnKeys.add(this.columns[opts?.showSelectionCheckboxes ? 1 : 0].key);\n    }\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.body.childNodes;\n  }\n\n  get size() {\n    return [...this.body.childNodes].length;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return [...this.body.childNodes][0]?.key;\n  }\n\n  getLastKey() {\n    let rows = [...this.body.childNodes];\n    return rows[rows.length - 1]?.key;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBase, Node, SelectionMode, Sortable, SortDescriptor, SortDirection} from '@react-types/shared';\nimport {GridState, useGridState} from '@react-stately/grid';\nimport {TableCollection as ITableCollection} from '@react-types/table';\nimport {Key, useMemo} from 'react';\nimport {MultipleSelectionStateProps} from '@react-stately/selection';\nimport {TableCollection} from './TableCollection';\nimport {useCollection} from '@react-stately/collections';\n\nexport interface TableState<T> extends GridState<T, ITableCollection<T>> {\n  /** A collection of rows and columns in the table. */\n  collection: ITableCollection<T>,\n  /** Whether the row selection checkboxes should be displayed. */\n  showSelectionCheckboxes: boolean,\n  /** The current sorted column and direction. */\n  sortDescriptor: SortDescriptor,\n  /** Calls the provided onSortChange handler with the provided column key and sort direction. */\n  sort(columnKey: Key): void\n}\n\nexport interface CollectionBuilderContext<T> {\n  showSelectionCheckboxes: boolean,\n  selectionMode: SelectionMode,\n  columns: Node<T>[]\n}\n\nexport interface TableStateProps<T> extends CollectionBase<T>, MultipleSelectionStateProps, Sortable {\n  /** Whether the row selection checkboxes should be displayed. */\n  showSelectionCheckboxes?: boolean\n}\n\nconst OPPOSITE_SORT_DIRECTION = {\n  ascending: 'descending' as SortDirection,\n  descending: 'ascending' as SortDirection\n};\n\n/**\n * Provides state management for a table component. Handles building a collection\n * of columns and rows from props. In addition, it tracks row selection and manages sort order changes.\n */\nexport function useTableState<T extends object>(props: TableStateProps<T>): TableState<T>  {\n  let {selectionMode = 'none'} = props;\n\n  let context = useMemo(() => ({\n    showSelectionCheckboxes: props.showSelectionCheckboxes && selectionMode !== 'none',\n    selectionMode,\n    columns: []\n  }), [props.children, props.showSelectionCheckboxes, selectionMode]);\n\n  let collection = useCollection<T, TableCollection<T>>(\n    props,\n    (nodes, prev) => new TableCollection(nodes, prev, context),\n    context\n  );\n  let {disabledKeys, selectionManager} = useGridState({...props, collection});\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager,\n    showSelectionCheckboxes: props.showSelectionCheckboxes || false,\n    sortDescriptor: props.sortDescriptor,\n    sort(columnKey: Key) {\n      props.onSortChange({\n        column: columnKey,\n        direction: props.sortDescriptor?.column === columnKey\n          ? OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction]\n          : 'ascending'\n      });\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\nimport {TableHeaderProps} from '@react-types/table';\n\nfunction TableHeader<T>(props: TableHeaderProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nTableHeader.getCollectionNode = function* getCollectionNode<T>(props: TableHeaderProps<T>): Generator<PartialNode<T>, void, any> {\n  let {children, columns} = props;\n  if (typeof children === 'function') {\n    if (!columns) {\n      throw new Error('props.children was a function but props.columns is missing');\n    }\n\n    for (let column of columns) {\n      yield {\n        type: 'column',\n        value: column,\n        renderer: children\n      };\n    }\n  } else {\n    let columns: PartialNode<T>[] = [];\n    React.Children.forEach(children, column => {\n      columns.push({\n        type: 'column',\n        element: column\n      });\n    });\n\n    yield* columns;\n  }\n};\n\n/**\n * A TableHeader is a container for the Column elements in a Table. Columns can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `columns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _TableHeader = TableHeader as <T>(props: TableHeaderProps<T>) => JSX.Element;\nexport {_TableHeader as TableHeader};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\nimport {TableBodyProps} from '@react-types/table';\n\nfunction TableBody<T>(props: TableBodyProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nTableBody.getCollectionNode = function* getCollectionNode<T>(props: TableBodyProps<T>): Generator<PartialNode<T>> {\n  let {children, items} = props;\n  yield {\n    type: 'body',\n    hasChildNodes: true,\n    props,\n    *childNodes() {\n      if (typeof children === 'function') {\n        if (!items) {\n          throw new Error('props.children was a function but props.items is missing');\n        }\n\n        for (let item of items) {\n          yield {\n            type: 'item',\n            value: item,\n            renderer: children\n          };\n        }\n      } else {\n        let items: PartialNode<T>[] = [];\n        React.Children.forEach(children, item => {\n          items.push({\n            type: 'item',\n            element: item\n          });\n        });\n\n        yield* items;\n      }\n    }\n  };\n};\n\n/**\n * A TableBody is a container for the Row elements of a Table. Rows can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `items` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _TableBody = TableBody as <T>(props: TableBodyProps<T>) => JSX.Element;\nexport {_TableBody as TableBody};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilderContext} from './useTableState';\nimport {ColumnProps} from '@react-types/table';\nimport {GridNode} from '@react-types/grid';\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\n\nfunction Column<T>(props: ColumnProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nColumn.getCollectionNode = function* getCollectionNode<T>(props: ColumnProps<T>, context: CollectionBuilderContext<T>): Generator<PartialNode<T>, void, GridNode<T>[]> {\n  let {title, children, childColumns} = props;\n\n  let rendered = title || children;\n  let textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'];\n\n  let fullNodes = yield {\n    type: 'column',\n    hasChildNodes: !!childColumns || (title && React.Children.count(children) > 0),\n    rendered,\n    textValue,\n    props,\n    *childNodes() {\n      if (childColumns) {\n        for (let child of childColumns) {\n          yield {\n            type: 'column',\n            value: child\n          };\n        }\n      } else if (title) {\n        let childColumns: PartialNode<T>[] = [];\n        React.Children.forEach(children, child => {\n          childColumns.push({\n            type: 'column',\n            element: child as ReactElement<ColumnProps<T>>\n          });\n        });\n\n        yield* childColumns;\n      }\n    },\n    shouldInvalidate(newContext: CollectionBuilderContext<T>) {\n      // This is a bit of a hack, but it works.\n      // If this method is called, then there's a cached version of this node available.\n      // But, we need to keep the list of columns in the new context up to date.\n      updateContext(newContext);\n      return false;\n    }\n  };\n\n  let updateContext = (context: CollectionBuilderContext<T>) => {\n    // register leaf columns on the context so that <Row> can access them\n    for (let node of fullNodes) {\n      if (!node.hasChildNodes) {\n        context.columns.push(node);\n      }\n    }\n  };\n\n  updateContext(context);\n};\n\n/**\n * A Column represents a field of each item within a Table. Columns may also contain nested\n * Column elements to represent column groups. Nested columns can be statically defined as\n * children, or dynamically generated using a function based on the `childColumns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Column = Column as <T>(props: ColumnProps<T>) => JSX.Element;\nexport {_Column as Column};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilderContext} from './useTableState';\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\nimport {RowProps} from '@react-types/table';\n\nfunction Row(props: RowProps): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nRow.getCollectionNode = function* getCollectionNode<T>(props: RowProps, context: CollectionBuilderContext<T>): Generator<PartialNode<T>> {\n  let {children, textValue} = props;\n\n  yield {\n    type: 'item',\n    props: props,\n    textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: true,\n    *childNodes() {\n      // Process cells first\n      if (context.showSelectionCheckboxes && context.selectionMode !== 'none') {\n        yield {\n          type: 'cell',\n          key: 'header', // this is combined with the row key by CollectionBuilder\n          props: {\n            isSelectionCell: true\n          }\n        };\n      }\n\n      if (typeof children === 'function') {\n        for (let column of context.columns) {\n          yield {\n            type: 'cell',\n            element: children(column.key),\n            key: column.key // this is combined with the row key by CollectionBuilder\n          };\n        }\n      } else {\n        let cells: PartialNode<T>[] = [];\n        React.Children.forEach(children, cell => {\n          cells.push({\n            type: 'cell',\n            element: cell\n          });\n        });\n\n        if (cells.length !== context.columns.length) {\n          throw new Error(`Cell count must match column count. Found ${cells.length} cells and ${context.columns.length} columns.`);\n        }\n\n        yield* cells;\n      }\n    },\n    shouldInvalidate(newContext: CollectionBuilderContext<T>) {\n      // Invalidate all rows if the columns changed.\n      return newContext.columns.length !== context.columns.length ||\n        newContext.columns.some((c, i) => c.key !== context.columns[i].key) ||\n        newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes ||\n        newContext.selectionMode !== context.selectionMode;\n    }\n  };\n};\n\n/**\n * A Row represents a single item in a Table and contains Cell elements for each column.\n * Cells can be statically defined as children, or generated dynamically using a function\n * based on the columns defined in the TableHeader.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Row = Row as (props: RowProps) => JSX.Element;\nexport {_Row as Row};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CellProps} from '@react-types/table';\nimport {PartialNode} from '@react-stately/collections';\nimport {ReactElement} from 'react';\n\nfunction Cell(props: CellProps): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nCell.getCollectionNode = function* getCollectionNode<T>(props: CellProps): Generator<PartialNode<T>> {\n  let {children} = props;\n\n  let textValue = props.textValue || (typeof children === 'string' ? children : '') || props['aria-label'] || '';\n  yield {\n    type: 'cell',\n    props: props,\n    rendered: children,\n    textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: false\n  };\n};\n\n/**\n * A Cell represents the value of a single Column within a Table Row.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Cell = Cell as (props: CellProps) => JSX.Element;\nexport {_Cell as Cell};\n"]},"metadata":{},"sourceType":"module"}