{"ast":null,"code":"import { createFocusManager as $1oG4F$createFocusManager } from \"@react-aria/focus\";\nimport { filterDOMProps as $1oG4F$filterDOMProps, mergeProps as $1oG4F$mergeProps } from \"@react-aria/utils\";\nimport { useLocale as $1oG4F$useLocale } from \"@react-aria/i18n\";\nimport { useRef as $1oG4F$useRef, useEffect as $1oG4F$useEffect } from \"react\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $304ac34015d4535d$exports = {};\n$parcel$export($304ac34015d4535d$exports, \"useActionGroup\", () => $304ac34015d4535d$export$f4bf8d43c16de704);\nconst $304ac34015d4535d$var$BUTTON_GROUP_ROLES = {\n  'none': 'toolbar',\n  'single': 'radiogroup',\n  'multiple': 'toolbar'\n};\n\nfunction $304ac34015d4535d$export$f4bf8d43c16de704(props, state, ref) {\n  let {\n    isDisabled: isDisabled,\n    orientation = 'horizontal'\n  } = props;\n  let allKeys = [...state.collection.getKeys()];\n  if (!allKeys.some(key => !state.disabledKeys.has(key))) isDisabled = true;\n  let {\n    direction: direction\n  } = $1oG4F$useLocale();\n  let focusManager = $1oG4F$createFocusManager(ref);\n  let flipDirection = direction === 'rtl' && orientation === 'horizontal';\n\n  let onKeyDown = e => {\n    if (!e.currentTarget.contains(e.target)) return;\n\n    switch (e.key) {\n      case 'ArrowRight':\n      case 'ArrowDown':\n        e.preventDefault();\n        e.stopPropagation();\n        if (e.key === 'ArrowRight' && flipDirection) focusManager.focusPrevious({\n          wrap: true\n        });else focusManager.focusNext({\n          wrap: true\n        });\n        break;\n\n      case 'ArrowLeft':\n      case 'ArrowUp':\n        e.preventDefault();\n        e.stopPropagation();\n        if (e.key === 'ArrowLeft' && flipDirection) focusManager.focusNext({\n          wrap: true\n        });else focusManager.focusPrevious({\n          wrap: true\n        });\n        break;\n    }\n  };\n\n  let role = $304ac34015d4535d$var$BUTTON_GROUP_ROLES[state.selectionManager.selectionMode];\n  return {\n    actionGroupProps: { ...$1oG4F$filterDOMProps(props, {\n        labelable: true\n      }),\n      role: role,\n      'aria-orientation': role === 'toolbar' ? orientation : null,\n      'aria-disabled': isDisabled,\n      onKeyDown: onKeyDown\n    }\n  };\n}\n\nvar $f0ac0fb73c3ec062$exports = {};\n$parcel$export($f0ac0fb73c3ec062$exports, \"useActionGroupItem\", () => $f0ac0fb73c3ec062$export$9597202bd3099a29);\nconst $f0ac0fb73c3ec062$var$BUTTON_ROLES = {\n  'none': null,\n  'single': 'radio',\n  'multiple': 'checkbox'\n};\n\nfunction $f0ac0fb73c3ec062$export$9597202bd3099a29(props, state, ref) {\n  let selectionMode = state.selectionManager.selectionMode;\n  let buttonProps = {\n    role: $f0ac0fb73c3ec062$var$BUTTON_ROLES[selectionMode]\n  };\n\n  if (selectionMode !== 'none') {\n    let isSelected = state.selectionManager.isSelected(props.key);\n    buttonProps['aria-checked'] = isSelected;\n  }\n\n  let isFocused = props.key === state.selectionManager.focusedKey;\n  let lastRender = $1oG4F$useRef({\n    isFocused: isFocused,\n    state: state\n  });\n  lastRender.current = {\n    isFocused: isFocused,\n    state: state\n  }; // If the focused item is removed from the DOM, reset the focused key to null.\n  // eslint-disable-next-line arrow-body-style\n\n  $1oG4F$useEffect(() => {\n    return () => {\n      if (lastRender.current.isFocused) lastRender.current.state.selectionManager.setFocusedKey(null);\n    };\n  }, []);\n  return {\n    buttonProps: $1oG4F$mergeProps(buttonProps, {\n      tabIndex: isFocused || state.selectionManager.focusedKey == null ? 0 : -1,\n\n      onFocus() {\n        state.selectionManager.setFocusedKey(props.key);\n      },\n\n      onPress() {\n        state.selectionManager.select(props.key);\n      }\n\n    })\n  };\n}\n\nexport { $304ac34015d4535d$export$f4bf8d43c16de704 as useActionGroup, $f0ac0fb73c3ec062$export$9597202bd3099a29 as useActionGroupItem };","map":{"version":3,"mappings":"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","names":["$304ac34015d4535d$var$BUTTON_GROUP_ROLES","$304ac34015d4535d$export$f4bf8d43c16de704","props","state","ref","isDisabled","orientation","allKeys","collection","getKeys","some","key","disabledKeys","has","direction","$1oG4F$useLocale","focusManager","$1oG4F$createFocusManager","flipDirection","onKeyDown","e","currentTarget","contains","target","preventDefault","stopPropagation","focusPrevious","wrap","focusNext","role","selectionManager","selectionMode","actionGroupProps","$1oG4F$filterDOMProps","labelable","$f0ac0fb73c3ec062$var$BUTTON_ROLES","$f0ac0fb73c3ec062$export$9597202bd3099a29","buttonProps","isSelected","isFocused","focusedKey","lastRender","$1oG4F$useRef","current","$1oG4F$useEffect","setFocusedKey","$1oG4F$mergeProps","tabIndex","onFocus","onPress","select"],"sources":["C:\\Users\\ev3rg\\OneDrive\\Documents\\GitHub\\gt-bigdata-website\\node_modules\\@react-aria\\actiongroup\\dist\\packages\\@react-aria\\actiongroup\\src\\useActionGroup.ts","C:\\Users\\ev3rg\\OneDrive\\Documents\\GitHub\\gt-bigdata-website\\node_modules\\@react-aria\\actiongroup\\dist\\packages\\@react-aria\\actiongroup\\src\\useActionGroupItem.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaActionGroupProps} from '@react-types/actiongroup';\nimport {createFocusManager} from '@react-aria/focus';\nimport {filterDOMProps} from '@react-aria/utils';\nimport {HTMLAttributes, RefObject} from 'react';\nimport {ListState} from '@react-stately/list';\nimport {Orientation} from '@react-types/shared';\nimport {useLocale} from '@react-aria/i18n';\n\nconst BUTTON_GROUP_ROLES = {\n  'none': 'toolbar',\n  'single': 'radiogroup',\n  'multiple': 'toolbar'\n};\n\nexport interface ActionGroupAria {\n  actionGroupProps: HTMLAttributes<HTMLElement>\n}\n\nexport function useActionGroup<T>(props: AriaActionGroupProps<T>, state: ListState<T>, ref: RefObject<HTMLElement>): ActionGroupAria {\n  let {\n    isDisabled,\n    orientation = 'horizontal' as Orientation\n  } = props;\n  let allKeys = [...state.collection.getKeys()];\n  if (!allKeys.some(key => !state.disabledKeys.has(key))) {\n    isDisabled = true;\n  }\n\n  let {direction} = useLocale();\n  let focusManager = createFocusManager(ref);\n  let flipDirection = direction === 'rtl' && orientation === 'horizontal';\n  let onKeyDown = (e) => {\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    switch (e.key) {\n      case 'ArrowRight':\n      case 'ArrowDown':\n        e.preventDefault();\n        e.stopPropagation();\n        if (e.key === 'ArrowRight' && flipDirection) {\n          focusManager.focusPrevious({wrap: true});\n        } else {\n          focusManager.focusNext({wrap: true});\n        }\n        break;\n      case 'ArrowLeft':\n      case 'ArrowUp':\n        e.preventDefault();\n        e.stopPropagation();\n        if (e.key === 'ArrowLeft' && flipDirection) {\n          focusManager.focusNext({wrap: true});\n        } else {\n          focusManager.focusPrevious({wrap: true});\n        }\n        break;\n    }\n  };\n\n  let role = BUTTON_GROUP_ROLES[state.selectionManager.selectionMode];\n  return {\n    actionGroupProps: {\n      ...filterDOMProps(props, {labelable: true}),\n      role,\n      'aria-orientation': role === 'toolbar' ? orientation : null,\n      'aria-disabled': isDisabled,\n      onKeyDown\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {HTMLAttributes, Key, RefObject, useEffect, useRef} from 'react';\nimport {ListState} from '@react-stately/list';\nimport {mergeProps} from '@react-aria/utils';\nimport {PressProps} from '@react-aria/interactions';\n\ninterface ActionGroupItemProps {\n  key: Key\n}\n\ninterface ActionGroupItemAria {\n  buttonProps: HTMLAttributes<HTMLElement> & PressProps\n}\n\nconst BUTTON_ROLES = {\n  'none': null,\n  'single': 'radio',\n  'multiple': 'checkbox'\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function useActionGroupItem<T>(props: ActionGroupItemProps, state: ListState<T>, ref?: RefObject<HTMLElement>): ActionGroupItemAria {\n  let selectionMode = state.selectionManager.selectionMode;\n  let buttonProps = {\n    role: BUTTON_ROLES[selectionMode]\n  };\n\n  if (selectionMode !== 'none') {\n    let isSelected = state.selectionManager.isSelected(props.key);\n    buttonProps['aria-checked'] = isSelected;\n  }\n\n  let isFocused = props.key === state.selectionManager.focusedKey;\n  let lastRender = useRef({isFocused, state});\n  lastRender.current = {isFocused, state};\n\n  // If the focused item is removed from the DOM, reset the focused key to null.\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => {\n      if (lastRender.current.isFocused) {\n        lastRender.current.state.selectionManager.setFocusedKey(null);\n      }\n    };\n  }, []);\n\n  return {\n    buttonProps: mergeProps(buttonProps, {\n      tabIndex: isFocused || state.selectionManager.focusedKey == null ? 0 : -1,\n      onFocus() {\n        state.selectionManager.setFocusedKey(props.key);\n      },\n      onPress() {\n        state.selectionManager.select(props.key);\n      }\n    })\n  };\n}\n"]},"metadata":{},"sourceType":"module"}