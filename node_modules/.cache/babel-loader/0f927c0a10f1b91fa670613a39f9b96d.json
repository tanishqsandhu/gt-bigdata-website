{"ast":null,"code":"import { filterDOMProps as $1uahB$filterDOMProps } from \"@react-aria/utils\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $c7a318c69e40f5a5$exports = {};\n$parcel$export($c7a318c69e40f5a5$exports, \"useSeparator\", () => $c7a318c69e40f5a5$export$52210f68a14655d0);\n\nfunction $c7a318c69e40f5a5$export$52210f68a14655d0(props) {\n  let domProps = $1uahB$filterDOMProps(props, {\n    labelable: true\n  });\n  let ariaOrientation; // if orientation is horizontal, aria-orientation default is horizontal, so we leave it undefined\n  // if it's vertical, we need to specify it\n\n  if (props.orientation === 'vertical') ariaOrientation = 'vertical'; // hr elements implicitly have role = separator and a horizontal orientation\n\n  if (props.elementType !== 'hr') return {\n    separatorProps: { ...domProps,\n      role: 'separator',\n      'aria-orientation': ariaOrientation\n    }\n  };\n  return {\n    separatorProps: domProps\n  };\n}\n\nexport { $c7a318c69e40f5a5$export$52210f68a14655d0 as useSeparator };","map":{"version":3,"mappings":";;;;;;;;;;;;;;SAoCgBA,0CAAaC,OAAsC;AACjE,MAAIC,QAAQ,GAAGC,qBAAc,CAACF,KAAD,EAAQ;AAACG,aAAS,EAAE;AAAZ,GAAR,CAA7B;AACA,MAAIC,eAAJ,CAFiE,CAGjE;AACA;;AACA,MAAIJ,KAAK,CAACK,WAAN,KAAsB,UAA1B,EACED,eAAe,GAAG,UAAlB,CAN+D,CAQjE;;AACA,MAAIJ,KAAK,CAACM,WAAN,KAAsB,IAA1B,EACE,OAAO;AACLC,kBAAc,EAAE,KACXN,QADW;AAEdO,UAAI,EAAE,WAFQ;AAGd,0BAAoBJ;AAHN;AADX,GAAP;AAQF,SAAO;AAACG,kBAAc,EAAEN;AAAjB,GAAP;AACD","names":["$c7a318c69e40f5a5$export$52210f68a14655d0","props","domProps","$1uahB$filterDOMProps","labelable","ariaOrientation","orientation","elementType","separatorProps","role"],"sources":["/Users/asattiraju/Desktop/gt-bigdata-website/node_modules/@react-aria/separator/dist/packages/@react-aria/separator/src/useSeparator.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps, DOMProps, Orientation} from '@react-types/shared';\nimport {filterDOMProps} from '@react-aria/utils';\nimport {HTMLAttributes} from 'react';\n\nexport interface SeparatorProps extends DOMProps, AriaLabelingProps {\n  /**\n   * The orientation of the separator.\n   * @default 'horizontal'\n   */\n  orientation?: Orientation,\n  /** The HTML element type that will be used to render the separator. */\n  elementType?: string\n}\n\nexport interface SeparatorAria {\n  /** Props for the separator element. */\n  separatorProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the accessibility implementation for a separator.\n * A separator is a visual divider between two groups of content,\n * e.g. groups of menu items or sections of a page.\n */\nexport function useSeparator(props: SeparatorProps): SeparatorAria {\n  let domProps = filterDOMProps(props, {labelable: true});\n  let ariaOrientation;\n  // if orientation is horizontal, aria-orientation default is horizontal, so we leave it undefined\n  // if it's vertical, we need to specify it\n  if (props.orientation === 'vertical') {\n    ariaOrientation = 'vertical';\n  }\n  // hr elements implicitly have role = separator and a horizontal orientation\n  if (props.elementType !== 'hr') {\n    return {\n      separatorProps: {\n        ...domProps,\n        role: 'separator',\n        'aria-orientation': ariaOrientation\n      }\n    };\n  }\n  return {separatorProps: domProps};\n}\n"]},"metadata":{},"sourceType":"module"}