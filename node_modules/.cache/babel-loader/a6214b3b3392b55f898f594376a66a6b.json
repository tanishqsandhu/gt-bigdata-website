{"ast":null,"code":"import $1Ofoe$intlmessageformat from \"intl-messageformat\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $70eee6030fd7c1a1$exports = {};\n$parcel$export($70eee6030fd7c1a1$exports, \"MessageDictionary\", () => $70eee6030fd7c1a1$export$64839e615120df17);\n\nclass $70eee6030fd7c1a1$export$64839e615120df17 {\n  getStringForLocale(key, locale) {\n    let strings = this.messages[locale];\n\n    if (!strings) {\n      strings = $70eee6030fd7c1a1$var$getStringsForLocale(locale, this.messages, this.defaultLocale);\n      this.messages[locale] = strings;\n    }\n\n    let string = strings[key];\n    if (!string) throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n    return string;\n  }\n\n  constructor(messages) {\n    let defaultLocale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';\n    // Clone messages so we don't modify the original object.\n    this.messages = { ...messages\n    };\n    this.defaultLocale = defaultLocale;\n  }\n\n}\n\nfunction $70eee6030fd7c1a1$var$getStringsForLocale(locale, strings) {\n  let defaultLocale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en-US';\n  // If there is an exact match, use it.\n  if (strings[locale]) return strings[locale]; // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n\n  let language = $70eee6030fd7c1a1$var$getLanguage(locale);\n\n  for (let key in strings) {\n    if (key.startsWith(language + '-')) return strings[key];\n  } // Nothing close, use english.\n\n\n  return strings[defaultLocale];\n}\n\nfunction $70eee6030fd7c1a1$var$getLanguage(locale) {\n  // @ts-ignore\n  if (Intl.Locale) // @ts-ignore\n    return new Intl.Locale(locale).language;\n  return locale.split('-')[0];\n}\n\nvar $a96338b8d4eb3cb0$exports = {};\n$parcel$export($a96338b8d4eb3cb0$exports, \"MessageFormatter\", () => $a96338b8d4eb3cb0$export$526ebc05ff964723);\n\nclass $a96338b8d4eb3cb0$export$526ebc05ff964723 {\n  format(key, variables) {\n    let message = this.cache[key];\n\n    if (!message) {\n      let msg = this.messages.getStringForLocale(key, this.locale);\n      if (!msg) throw new Error(`Could not find intl message ${key} in ${this.locale} locale`);\n      message = new $1Ofoe$intlmessageformat(msg, this.locale);\n      this.cache[key] = message;\n    }\n\n    let varCopy;\n    if (variables) varCopy = Object.keys(variables).reduce((acc, key) => {\n      acc[key] = variables[key] == null ? false : variables[key];\n      return acc;\n    }, {});\n    return message.format(varCopy);\n  }\n\n  constructor(locale, messages) {\n    this.locale = locale;\n    this.messages = messages;\n    this.cache = {};\n  }\n\n}\n\nexport { $70eee6030fd7c1a1$export$64839e615120df17 as MessageDictionary, $a96338b8d4eb3cb0$export$526ebc05ff964723 as MessageFormatter };","map":{"version":3,"mappings":";;;;;;;;;;;;;;MAsBaA,0CAAiB;AAU5BC,oBAAkB,CAACC,GAAD,EAAcC,MAAd,EAA8B;AAC9C,QAAIC,OAAO,GAAG,KAAKC,QAAL,CAAcF,MAAd,CAAd;;AACA,QAAE,CAAGC,OAAL,EAAc;AACZA,aAAO,GAAGE,yCAAmB,CAACH,MAAD,EAAS,KAAKE,QAAd,EAAwB,KAAKE,aAA7B,CAA7B;AACA,WAAKF,QAAL,CAAcF,MAAd,IAAwBC,OAAxB;AACD;;AAED,QAAII,MAAM,GAAGJ,OAAO,CAACF,GAAD,CAApB;AACA,QAAE,CAAGM,MAAL,EACE,MAAM,IAAIC,KAAJ,CAAW,+BAA8BP,GAAI,OAAMC,MAAO,SAA1D,CAAN;AAGF,WAAOK,MAAP;AACD;;cAnBWH,UAA6D;AAAA,QAAjCE,aAAiC,uEAAT,OAAS;AACvE;AACA,SAAKF,QAAL,GAAgB,KAAIA;AAAJ,KAAhB;AACA,SAAKE,aAAL,GAAqBA,aAArB;AACD;;AAR2B;;SA0BrBD,0CAAoBH,QAAgBC,SAAoD;AAAA,MAAzBG,aAAyB,uEAAT,OAAS;AAC/F;AACA,MAAIH,OAAO,CAACD,MAAD,CAAX,EACE,OAAOC,OAAO,CAACD,MAAD,CAAd,CAH6F,CAM/F;AACA;AACA;AACA;AACA;;AACA,MAAIO,QAAQ,GAAGC,iCAAW,CAACR,MAAD,CAA1B;;AACA,OAAK,IAAID,GAAT,IAAgBE,OAAhB,EAAyB;AACvB,QAAIF,GAAG,CAACU,UAAJ,CAAeF,QAAQ,GAAG,GAA1B,CAAJ,EACE,OAAON,OAAO,CAACF,GAAD,CAAd;AAEH,GAhB8F,CAkB/F;;;AACA,SAAOE,OAAO,CAACG,aAAD,CAAd;AACD;;SAEQI,kCAAYR,QAAgB;AACnC;AACA,MAAIU,IAAI,CAACC,MAAT,EACE;AACA,WAAO,IAAID,IAAI,CAACC,MAAT,CAAgBX,MAAhB,EAAwBO,QAA/B;AAGF,SAAOP,MAAM,CAACY,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAP;AACD;;;;;MC3DYC,0CAAgB;AAW3BC,QAAM,CAAWf,GAAX,EAAwBgB,SAAxB,EAAuI;AAC3I,QAAIC,OAAO,GAAG,KAAKC,KAAL,CAAWlB,GAAX,CAAd;;AACA,QAAE,CAAGiB,OAAL,EAAc;AACZ,UAAIE,GAAG,GAAG,KAAKhB,QAAL,CAAcJ,kBAAd,CAAiCC,GAAjC,EAAsC,KAAKC,MAA3C,CAAV;AACA,UAAE,CAAGkB,GAAL,EACE,MAAM,IAAIZ,KAAJ,CAAW,+BAA8BP,GAAI,OAAM,KAAKC,MAAO,SAA/D,CAAN;AAGFgB,aAAO,GAAG,IAAIG,wBAAJ,CAAsBD,GAAtB,EAA2B,KAAKlB,MAAhC,CAAV;AACA,WAAKiB,KAAL,CAAWlB,GAAX,IAAkBiB,OAAlB;AACD;;AACD,QAAII,OAAJ;AACA,QAAIL,SAAJ,EACEK,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYP,SAAZ,EAAuBQ,MAAvB,CAA6B,CAAEC,GAAF,EAAOzB,GAAP,KAAe;AACpDyB,SAAG,CAACzB,GAAD,CAAH,GAAWgB,SAAS,CAAChB,GAAD,CAAT,IAAkB,IAAlB,GAAyB,KAAzB,GAAiCgB,SAAS,CAAChB,GAAD,CAArD;AACA,aAAOyB,GAAP;AACD,KAHS,EAGP,EAHO,CAAV;AAMF,WAAOR,OAAO,CAACF,MAAR,CAAeM,OAAf,CAAP;AACD;;cA1BWpB,QAAgBE,UAA6B;AACvD,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKE,QAAL,GAAgBA,QAAhB;AACA,SAAKe,KAAL,GAAa,EAAb;AACD;;AAT0B","names":["$70eee6030fd7c1a1$export$64839e615120df17","getStringForLocale","key","locale","strings","messages","$70eee6030fd7c1a1$var$getStringsForLocale","defaultLocale","string","Error","language","$70eee6030fd7c1a1$var$getLanguage","startsWith","Intl","Locale","split","$a96338b8d4eb3cb0$export$526ebc05ff964723","format","variables","message","cache","msg","$1Ofoe$intlmessageformat","varCopy","Object","keys","reduce","acc"],"sources":["/Users/asattiraju/Desktop/gt-bigdata-website/node_modules/@internationalized/message/dist/packages/@internationalized/message/src/MessageDictionary.ts","/Users/asattiraju/Desktop/gt-bigdata-website/node_modules/@internationalized/message/dist/packages/@internationalized/message/src/MessageFormatter.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type LocalizedStrings = {\n  [lang: string]: {\n    [key: string]: string\n  }\n};\n\n/**\n * Stores a mapping of localized strings. Can be used to find the\n * closest available string for a given locale.\n */\nexport class MessageDictionary {\n  private messages: LocalizedStrings;\n  private defaultLocale: string;\n\n  constructor(messages: LocalizedStrings, defaultLocale: string = 'en-US') {\n    // Clone messages so we don't modify the original object.\n    this.messages = {...messages};\n    this.defaultLocale = defaultLocale;\n  }\n\n  getStringForLocale(key: string, locale: string) {\n    let strings = this.messages[locale];\n    if (!strings) {\n      strings = getStringsForLocale(locale, this.messages, this.defaultLocale);\n      this.messages[locale] = strings;\n    }\n\n    let string = strings[key];\n    if (!string) {\n      throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n    }\n\n    return string;\n  }\n}\n\nfunction getStringsForLocale(locale: string, strings: LocalizedStrings, defaultLocale = 'en-US') {\n  // If there is an exact match, use it.\n  if (strings[locale]) {\n    return strings[locale];\n  }\n\n  // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n  let language = getLanguage(locale);\n  for (let key in strings) {\n    if (key.startsWith(language + '-')) {\n      return strings[key];\n    }\n  }\n\n  // Nothing close, use english.\n  return strings[defaultLocale];\n}\n\nfunction getLanguage(locale: string) {\n  // @ts-ignore\n  if (Intl.Locale) {\n    // @ts-ignore\n    return new Intl.Locale(locale).language;\n  }\n\n  return locale.split('-')[0];\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FormatXMLElementFn, PrimitiveType} from 'intl-messageformat/src/formatters';\nimport IntlMessageFormat from 'intl-messageformat';\nimport {MessageDictionary} from './MessageDictionary';\n\n/**\n * Formats ICU Message strings to create localized strings from a MessageDictionary.\n */\nexport class MessageFormatter {\n  private locale: string;\n  private messages: MessageDictionary;\n  private cache: {[key: string]: IntlMessageFormat};\n\n  constructor(locale: string, messages: MessageDictionary) {\n    this.locale = locale;\n    this.messages = messages;\n    this.cache = {};\n  }\n\n  format<T = void>(key: string, variables: Record<string, PrimitiveType | T | FormatXMLElementFn<T, string | T | (string | T)[]>> | undefined) {\n    let message = this.cache[key];\n    if (!message) {\n      let msg = this.messages.getStringForLocale(key, this.locale);\n      if (!msg) {\n        throw new Error(`Could not find intl message ${key} in ${this.locale} locale`);\n      }\n\n      message = new IntlMessageFormat(msg, this.locale);\n      this.cache[key] = message;\n    }\n    let varCopy: Record<string, PrimitiveType | T | FormatXMLElementFn<T, string | T | (string | T)[]>> | undefined;\n    if (variables) {\n      varCopy = Object.keys(variables).reduce((acc, key) => {\n        acc[key] = variables[key] == null ? false : variables[key];\n        return acc;\n      }, {});\n    }\n\n    return message.format(varCopy);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}