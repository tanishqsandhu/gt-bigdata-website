{"ast":null,"code":"import { useMenuTriggerState as $1Y8YR$useMenuTriggerState } from \"@react-stately/menu\";\nimport { useSingleSelectListState as $1Y8YR$useSingleSelectListState } from \"@react-stately/list\";\nimport { useState as $1Y8YR$useState } from \"react\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $2cf721c498a73112$exports = {};\n$parcel$export($2cf721c498a73112$exports, \"useSelectState\", () => $2cf721c498a73112$export$5159ec8b34d4ec12);\n\nfunction $2cf721c498a73112$export$5159ec8b34d4ec12(props) {\n  let triggerState = $1Y8YR$useMenuTriggerState(props);\n  let listState = $1Y8YR$useSingleSelectListState({ ...props,\n    onSelectionChange: key => {\n      if (props.onSelectionChange != null) props.onSelectionChange(key);\n      triggerState.close();\n    }\n  });\n  let [isFocused, setFocused] = $1Y8YR$useState(false);\n  return { ...listState,\n    ...triggerState,\n\n    open() {\n      // Don't open if the collection is empty.\n      if (listState.collection.size !== 0) triggerState.open();\n    },\n\n    toggle(focusStrategy) {\n      if (listState.collection.size !== 0) triggerState.toggle(focusStrategy);\n    },\n\n    isFocused: isFocused,\n    setFocused: setFocused\n  };\n}\n\nexport { $2cf721c498a73112$export$5159ec8b34d4ec12 as useSelectState };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;SA8BgBA,0CAAiCC,OAAwC;AACvF,MAAIC,YAAY,GAAGC,0BAAmB,CAACF,KAAD,CAAtC;AACA,MAAIG,SAAS,GAAGC,+BAAwB,CAAC,KACpCJ,KADoC;AAEvCK,qBAAiB,EAAGC,GAAH,IAAW;AAC1B,UAAIN,KAAK,CAACK,iBAAN,IAA2B,IAA/B,EACEL,KAAK,CAACK,iBAAN,CAAwBC,GAAxB;AAGFL,kBAAY,CAACM,KAAb;AACD;AARsC,GAAD,CAAxC;AAWA,MAAG,CAAEC,SAAF,EAAaC,UAAb,IAA2BC,eAAQ,CAAC,KAAD,CAAtC;AAEA,SAAO,KACFP,SADE;OAEFF,YAFE;;AAGLU,QAAI,GAAG;AACL;AACA,UAAIR,SAAS,CAACS,UAAV,CAAqBC,IAArB,KAA8B,CAAlC,EACEZ,YAAY,CAACU,IAAb;AAEH,KARI;;AASLG,UAAM,CAACC,aAAD,EAAgB;AACpB,UAAIZ,SAAS,CAACS,UAAV,CAAqBC,IAArB,KAA8B,CAAlC,EACEZ,YAAY,CAACa,MAAb,CAAoBC,aAApB;AAEH,KAbI;;eAcLP,SAdK;gBAeLC;AAfK,GAAP;AAiBD","names":["$2cf721c498a73112$export$5159ec8b34d4ec12","props","triggerState","$1Y8YR$useMenuTriggerState","listState","$1Y8YR$useSingleSelectListState","onSelectionChange","key","close","isFocused","setFocused","$1Y8YR$useState","open","collection","size","toggle","focusStrategy"],"sources":["/Users/asattiraju/Desktop/gt-bigdata-website/node_modules/@react-stately/select/dist/packages/@react-stately/select/src/useSelectState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {MenuTriggerState, useMenuTriggerState} from '@react-stately/menu';\nimport {SelectProps} from '@react-types/select';\nimport {SingleSelectListState, useSingleSelectListState} from '@react-stately/list';\nimport {useState} from 'react';\n\nexport interface SelectState<T> extends SingleSelectListState<T>, MenuTriggerState {\n  /** Whether the select is currently focused. */\n  readonly isFocused: boolean,\n\n  /** Sets whether the select is focused. */\n  setFocused(isFocused: boolean): void\n}\n\n/**\n * Provides state management for a select component. Handles building a collection\n * of items from props, handles the open state for the popup menu, and manages\n * multiple selection state.\n */\nexport function useSelectState<T extends object>(props: SelectProps<T>): SelectState<T>  {\n  let triggerState = useMenuTriggerState(props);\n  let listState = useSingleSelectListState({\n    ...props,\n    onSelectionChange: (key) => {\n      if (props.onSelectionChange != null) {\n        props.onSelectionChange(key);\n      }\n\n      triggerState.close();\n    }\n  });\n\n  let [isFocused, setFocused] = useState(false);\n\n  return {\n    ...listState,\n    ...triggerState,\n    open() {\n      // Don't open if the collection is empty.\n      if (listState.collection.size !== 0) {\n        triggerState.open();\n      }\n    },\n    toggle(focusStrategy) {\n      if (listState.collection.size !== 0) {\n        triggerState.toggle(focusStrategy);\n      }\n    },\n    isFocused,\n    setFocused\n  };\n}\n"]},"metadata":{},"sourceType":"module"}