{"ast":null,"code":"import { Rect as $gtW1T$Rect, LayoutInfo as $gtW1T$LayoutInfo, Size as $gtW1T$Size, Layout as $gtW1T$Layout } from \"@react-stately/virtualizer\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $61ef60fc9b1041f4$exports = {};\n$parcel$export($61ef60fc9b1041f4$exports, \"ListLayout\", () => $61ef60fc9b1041f4$export$cacbb3924155d68e);\nconst $61ef60fc9b1041f4$var$DEFAULT_HEIGHT = 48;\n\nclass $61ef60fc9b1041f4$export$cacbb3924155d68e extends $gtW1T$Layout {\n  getLayoutInfo(key) {\n    return this.layoutInfos.get(key);\n  }\n\n  getVisibleLayoutInfos(rect) {\n    let res = [];\n\n    let addNodes = nodes => {\n      for (let node of nodes) if (this.isVisible(node, rect)) {\n        res.push(node.layoutInfo);\n        if (node.header) res.push(node.header);\n        if (node.children) addNodes(node.children);\n      }\n    };\n\n    addNodes(this.rootNodes);\n    return res;\n  }\n\n  isVisible(node, rect) {\n    return node.layoutInfo.rect.intersects(rect) || node.layoutInfo.isSticky;\n  }\n\n  validate(invalidationContext) {\n    // Invalidate cache if the size of the collection changed.\n    // In this case, we need to recalculate the entire layout.\n    this.invalidateEverything = invalidationContext.sizeChanged;\n    this.collection = this.virtualizer.collection;\n    this.rootNodes = this.buildCollection(); // Remove deleted layout nodes\n\n    if (this.lastCollection) {\n      for (let key of this.lastCollection.getKeys()) if (!this.collection.getItem(key)) {\n        let layoutNode = this.layoutNodes.get(key);\n\n        if (layoutNode) {\n          var ref;\n          this.layoutInfos.delete(layoutNode.layoutInfo.key);\n          this.layoutInfos.delete((ref = layoutNode.header) === null || ref === void 0 ? void 0 : ref.key);\n          this.layoutNodes.delete(key);\n        }\n      }\n    }\n\n    this.lastWidth = this.virtualizer.visibleRect.width;\n    this.lastCollection = this.collection;\n  }\n\n  buildCollection() {\n    let y = this.padding;\n    let nodes = [];\n\n    for (let node of this.collection) {\n      let layoutNode = this.buildChild(node, 0, y);\n      y = layoutNode.layoutInfo.rect.maxY;\n      nodes.push(layoutNode);\n    }\n\n    if (this.isLoading) {\n      var _loaderHeight;\n\n      let rect = new $gtW1T$Rect(0, y, this.virtualizer.visibleRect.width, (_loaderHeight = this.loaderHeight) !== null && _loaderHeight !== void 0 ? _loaderHeight : this.virtualizer.visibleRect.height);\n      let loader = new $gtW1T$LayoutInfo('loader', 'loader', rect);\n      this.layoutInfos.set('loader', loader);\n      nodes.push({\n        layoutInfo: loader\n      });\n      y = loader.rect.maxY;\n    }\n\n    if (nodes.length === 0) {\n      var _placeholderHeight;\n\n      let rect = new $gtW1T$Rect(0, y, this.virtualizer.visibleRect.width, (_placeholderHeight = this.placeholderHeight) !== null && _placeholderHeight !== void 0 ? _placeholderHeight : this.virtualizer.visibleRect.height);\n      let placeholder = new $gtW1T$LayoutInfo('placeholder', 'placeholder', rect);\n      this.layoutInfos.set('placeholder', placeholder);\n      nodes.push({\n        layoutInfo: placeholder\n      });\n      y = placeholder.rect.maxY;\n    }\n\n    this.contentSize = new $gtW1T$Size(this.virtualizer.visibleRect.width, y + this.padding);\n    return nodes;\n  }\n\n  buildChild(node, x, y) {\n    let cached = this.layoutNodes.get(node.key);\n    if (!this.invalidateEverything && cached && cached.node === node && y === (cached.header || cached.layoutInfo).rect.y) return cached;\n    let layoutNode = this.buildNode(node, x, y);\n    layoutNode.node = node;\n\n    var _parentKey;\n\n    layoutNode.layoutInfo.parentKey = (_parentKey = node.parentKey) !== null && _parentKey !== void 0 ? _parentKey : null;\n    this.layoutInfos.set(layoutNode.layoutInfo.key, layoutNode.layoutInfo);\n    if (layoutNode.header) this.layoutInfos.set(layoutNode.header.key, layoutNode.header);\n    this.layoutNodes.set(node.key, layoutNode);\n    return layoutNode;\n  }\n\n  buildNode(node, x, y) {\n    switch (node.type) {\n      case 'section':\n        return this.buildSection(node, x, y);\n\n      case 'item':\n        return this.buildItem(node, x, y);\n    }\n  }\n\n  buildSection(node, x, y) {\n    let width = this.virtualizer.visibleRect.width;\n    let rectHeight = this.headingHeight;\n    let isEstimated = false; // If no explicit height is available, use an estimated height.\n\n    if (rectHeight == null) {\n      // If a previous version of this layout info exists, reuse its height.\n      // Mark as estimated if the size of the overall collection view changed,\n      // or the content of the item changed.\n      let previousLayoutNode = this.layoutNodes.get(node.key);\n\n      if (previousLayoutNode && previousLayoutNode.header) {\n        let curNode = this.collection.getItem(node.key);\n        let lastNode = this.lastCollection ? this.lastCollection.getItem(node.key) : null;\n        rectHeight = previousLayoutNode.header.rect.height;\n        isEstimated = width !== this.lastWidth || curNode !== lastNode || previousLayoutNode.header.estimatedSize;\n      } else {\n        rectHeight = node.rendered ? this.estimatedHeadingHeight : 0;\n        isEstimated = true;\n      }\n    }\n\n    if (rectHeight == null) rectHeight = $61ef60fc9b1041f4$var$DEFAULT_HEIGHT;\n    let headerRect = new $gtW1T$Rect(0, y, width, rectHeight);\n    let header = new $gtW1T$LayoutInfo('header', node.key + ':header', headerRect);\n    header.estimatedSize = isEstimated;\n    header.parentKey = node.key;\n    y += header.rect.height;\n    let rect = new $gtW1T$Rect(0, y, width, 0);\n    let layoutInfo = new $gtW1T$LayoutInfo(node.type, node.key, rect);\n    let startY = y;\n    let children = [];\n\n    for (let child of node.childNodes) {\n      let layoutNode = this.buildChild(child, x, y);\n      y = layoutNode.layoutInfo.rect.maxY;\n      children.push(layoutNode);\n    }\n\n    rect.height = y - startY;\n    return {\n      header: header,\n      layoutInfo: layoutInfo,\n      children: children\n    };\n  }\n\n  buildItem(node, x, y) {\n    let width = this.virtualizer.visibleRect.width;\n    let rectHeight = this.rowHeight;\n    let isEstimated = false; // If no explicit height is available, use an estimated height.\n\n    if (rectHeight == null) {\n      // If a previous version of this layout info exists, reuse its height.\n      // Mark as estimated if the size of the overall collection view changed,\n      // or the content of the item changed.\n      let previousLayoutNode = this.layoutNodes.get(node.key);\n\n      if (previousLayoutNode) {\n        let curNode = this.collection.getItem(node.key);\n        let lastNode = this.lastCollection ? this.lastCollection.getItem(node.key) : null;\n        rectHeight = previousLayoutNode.layoutInfo.rect.height;\n        isEstimated = width !== this.lastWidth || curNode !== lastNode || previousLayoutNode.layoutInfo.estimatedSize;\n      } else {\n        rectHeight = this.estimatedRowHeight;\n        isEstimated = true;\n      }\n    }\n\n    if (rectHeight == null) rectHeight = $61ef60fc9b1041f4$var$DEFAULT_HEIGHT;\n    if (typeof this.indentationForItem === 'function') x += this.indentationForItem(this.collection, node.key) || 0;\n    let rect = new $gtW1T$Rect(x, y, width - x, rectHeight);\n    let layoutInfo = new $gtW1T$LayoutInfo(node.type, node.key, rect);\n    layoutInfo.estimatedSize = isEstimated;\n    return {\n      layoutInfo: layoutInfo\n    };\n  }\n\n  updateItemSize(key, size) {\n    let layoutInfo = this.layoutInfos.get(key); // If no layoutInfo, item has been deleted/removed.\n\n    if (!layoutInfo) return false;\n    layoutInfo.estimatedSize = false;\n\n    if (layoutInfo.rect.height !== size.height) {\n      // Copy layout info rather than mutating so that later caches are invalidated.\n      let newLayoutInfo = layoutInfo.copy();\n      newLayoutInfo.rect.height = size.height;\n      this.layoutInfos.set(key, newLayoutInfo); // Invalidate layout for this layout node and all parents\n\n      this.updateLayoutNode(key, layoutInfo, newLayoutInfo);\n      let node = this.collection.getItem(layoutInfo.parentKey);\n\n      while (node) {\n        this.updateLayoutNode(node.key, layoutInfo, newLayoutInfo);\n        node = this.collection.getItem(node.parentKey);\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  updateLayoutNode(key, oldLayoutInfo, newLayoutInfo) {\n    let n = this.layoutNodes.get(key);\n\n    if (n) {\n      // Invalidate by clearing node.\n      n.node = null; // Replace layout info in LayoutNode\n\n      if (n.header === oldLayoutInfo) n.header = newLayoutInfo;else if (n.layoutInfo === oldLayoutInfo) n.layoutInfo = newLayoutInfo;\n    }\n  }\n\n  getContentSize() {\n    return this.contentSize;\n  }\n\n  getKeyAbove(key) {\n    let collection = this.collection;\n    key = collection.getKeyBefore(key);\n\n    while (key != null) {\n      let item = collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(item.key)) return key;\n      key = collection.getKeyBefore(key);\n    }\n  }\n\n  getKeyBelow(key) {\n    let collection = this.collection;\n    key = collection.getKeyAfter(key);\n\n    while (key != null) {\n      let item = collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(item.key)) return key;\n      key = collection.getKeyAfter(key);\n    }\n  }\n\n  getKeyPageAbove(key) {\n    let layoutInfo = this.getLayoutInfo(key);\n\n    if (layoutInfo) {\n      let pageY = Math.max(0, layoutInfo.rect.y + layoutInfo.rect.height - this.virtualizer.visibleRect.height);\n\n      while (layoutInfo && layoutInfo.rect.y > pageY) {\n        let keyAbove = this.getKeyAbove(layoutInfo.key);\n        layoutInfo = this.getLayoutInfo(keyAbove);\n      }\n\n      if (layoutInfo) return layoutInfo.key;\n    }\n\n    return this.getFirstKey();\n  }\n\n  getKeyPageBelow(key) {\n    let layoutInfo = this.getLayoutInfo(key != null ? key : this.getFirstKey());\n\n    if (layoutInfo) {\n      let pageY = Math.min(this.virtualizer.contentSize.height, layoutInfo.rect.y - layoutInfo.rect.height + this.virtualizer.visibleRect.height);\n\n      while (layoutInfo && layoutInfo.rect.y < pageY) {\n        let keyBelow = this.getKeyBelow(layoutInfo.key);\n        layoutInfo = this.getLayoutInfo(keyBelow);\n      }\n\n      if (layoutInfo) return layoutInfo.key;\n    }\n\n    return this.getLastKey();\n  }\n\n  getFirstKey() {\n    let collection = this.collection;\n    let key = collection.getFirstKey();\n\n    while (key != null) {\n      let item = collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(item.key)) return key;\n      key = collection.getKeyAfter(key);\n    }\n  }\n\n  getLastKey() {\n    let collection = this.collection;\n    let key = collection.getLastKey();\n\n    while (key != null) {\n      let item = collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(item.key)) return key;\n      key = collection.getKeyBefore(key);\n    }\n  }\n\n  getKeyForSearch(search, fromKey) {\n    if (!this.collator) return null;\n    let collection = this.collection;\n    let key = fromKey || this.getFirstKey();\n\n    while (key != null) {\n      let item = collection.getItem(key);\n      let substring = item.textValue.slice(0, search.length);\n      if (item.textValue && this.collator.compare(substring, search) === 0) return key;\n      key = this.getKeyBelow(key);\n    }\n\n    return null;\n  } // getDragTarget(point: Point): DragTarget {\n  //   let visible = this.getVisibleLayoutInfos(new Rect(point.x, point.y, 1, 1));\n  //   if (visible.length > 0) {\n  //     visible = visible.sort((a, b) => b.zIndex - a.zIndex);\n  //     return {\n  //       type: 'item',\n  //       key: visible[0].key\n  //     };\n  //   }\n  //   return null;\n  // }\n  // getDropTarget(point: Point): DropTarget {\n  //   let key = this.virtualizer.keyAtPoint(point);\n  //   if (key) {\n  //     return {\n  //       type: 'item',\n  //       key,\n  //       dropPosition: DropPosition.ON\n  //     };\n  //   }\n  //   return null;\n  // }\n\n\n  getInitialLayoutInfo(layoutInfo) {\n    layoutInfo.opacity = 0;\n    layoutInfo.transform = 'scale3d(0.8, 0.8, 0.8)';\n    return layoutInfo;\n  }\n\n  getFinalLayoutInfo(layoutInfo) {\n    layoutInfo.opacity = 0;\n    layoutInfo.transform = 'scale3d(0.8, 0.8, 0.8)';\n    return layoutInfo;\n  }\n  /**\n  * Creates a new ListLayout with options. See the list of properties below for a description\n  * of the options that can be provided.\n  */\n\n\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    this.disabledKeys = new Set();\n    this.rowHeight = options.rowHeight;\n    this.estimatedRowHeight = options.estimatedRowHeight;\n    this.headingHeight = options.headingHeight;\n    this.estimatedHeadingHeight = options.estimatedHeadingHeight;\n    this.padding = options.padding || 0;\n    this.indentationForItem = options.indentationForItem;\n    this.collator = options.collator;\n    this.loaderHeight = options.loaderHeight;\n    this.placeholderHeight = options.placeholderHeight;\n    this.layoutInfos = new Map();\n    this.layoutNodes = new Map();\n    this.rootNodes = [];\n    this.lastWidth = 0;\n    this.lastCollection = null;\n  }\n\n}\n\nvar $a152112e902709bf$exports = {};\n$parcel$export($a152112e902709bf$exports, \"TableLayout\", () => $a152112e902709bf$export$62444c3c724b1b20);\n\nclass $a152112e902709bf$export$62444c3c724b1b20 extends $61ef60fc9b1041f4$export$cacbb3924155d68e {\n  buildCollection() {\n    // If columns changed, clear layout cache.\n    if (!this.lastCollection || this.collection.columns.length !== this.lastCollection.columns.length || this.collection.columns.some((c, i) => c.key !== this.lastCollection.columns[i].key)) // Invalidate everything in this layout pass. Will be reset in ListLayout on the next pass.\n      this.invalidateEverything = true; // Track whether we were previously loading. This is used to adjust the animations of async loading vs inserts.\n\n    let loadingState = this.collection.body.props.loadingState;\n    this.wasLoading = this.isLoading;\n    this.isLoading = loadingState === 'loading' || loadingState === 'loadingMore';\n    this.buildColumnWidths();\n    let header = this.buildHeader();\n    let body = this.buildBody(0);\n    body.layoutInfo.rect.width = Math.max(header.layoutInfo.rect.width, body.layoutInfo.rect.width);\n    this.contentSize = new $gtW1T$Size(body.layoutInfo.rect.width, body.layoutInfo.rect.maxY);\n    return [header, body];\n  }\n\n  buildColumnWidths() {\n    this.columnWidths = new Map();\n    this.stickyColumnIndices = []; // Pass 1: set widths for all explicitly defined columns.\n\n    let remainingColumns = new Set();\n    let remainingSpace = this.virtualizer.visibleRect.width;\n\n    for (let column of this.collection.columns) {\n      let props = column.props;\n\n      var _width;\n\n      let width = (_width = props.width) !== null && _width !== void 0 ? _width : this.getDefaultWidth(props);\n\n      if (width != null) {\n        let w = this.parseWidth(width);\n        this.columnWidths.set(column.key, w);\n        remainingSpace -= w;\n      } else remainingColumns.add(column); // The selection cell and any other sticky columns always need to be visible.\n      // In addition, row headers need to be in the DOM for accessibility labeling.\n\n\n      if (column.props.isSelectionCell || this.collection.rowHeaderColumnKeys.has(column.key)) this.stickyColumnIndices.push(column.index);\n    } // Pass 2: if there are remaining columns, then distribute the remaining space evenly.\n\n\n    if (remainingColumns.size > 0) {\n      let columnWidth = remainingSpace / (this.collection.columns.length - this.columnWidths.size);\n\n      for (let column of remainingColumns) {\n        let props = column.props;\n        let minWidth = props.minWidth != null ? this.parseWidth(props.minWidth) : 75;\n        let maxWidth = props.maxWidth != null ? this.parseWidth(props.maxWidth) : Infinity;\n        let width = Math.max(minWidth, Math.min(maxWidth, columnWidth));\n        this.columnWidths.set(column.key, width);\n        remainingSpace -= width;\n        if (width !== columnWidth) columnWidth = remainingSpace / (this.collection.columns.length - this.columnWidths.size);\n      }\n    }\n  }\n\n  parseWidth(width) {\n    if (typeof width === 'string') {\n      let match = width.match(/^(\\d+)%$/);\n      if (!match) throw new Error('Only percentages are supported as column widths');\n      return this.virtualizer.visibleRect.width * (parseInt(match[1], 10) / 100);\n    }\n\n    return width;\n  }\n\n  buildHeader() {\n    let rect = new $gtW1T$Rect(0, 0, 0, 0);\n    let layoutInfo = new $gtW1T$LayoutInfo('header', 'header', rect);\n    let y = 0;\n    let width = 0;\n    let children = [];\n\n    for (let headerRow of this.collection.headerRows) {\n      let layoutNode = this.buildChild(headerRow, 0, y);\n      layoutNode.layoutInfo.parentKey = 'header';\n      y = layoutNode.layoutInfo.rect.maxY;\n      width = Math.max(width, layoutNode.layoutInfo.rect.width);\n      children.push(layoutNode);\n    }\n\n    rect.width = width;\n    rect.height = y;\n    this.layoutInfos.set('header', layoutInfo);\n    return {\n      layoutInfo: layoutInfo,\n      children: children\n    };\n  }\n\n  buildHeaderRow(headerRow, x, y) {\n    let rect = new $gtW1T$Rect(0, y, 0, 0);\n    let row = new $gtW1T$LayoutInfo('headerrow', headerRow.key, rect);\n    let height = 0;\n    let columns = [];\n\n    for (let cell of headerRow.childNodes) {\n      let layoutNode = this.buildChild(cell, x, y);\n      layoutNode.layoutInfo.parentKey = row.key;\n      x = layoutNode.layoutInfo.rect.maxX;\n      height = Math.max(height, layoutNode.layoutInfo.rect.height);\n      columns.push(layoutNode);\n    }\n\n    this.setChildHeights(columns, height);\n    rect.height = height;\n    rect.width = x;\n    return {\n      layoutInfo: row,\n      children: columns\n    };\n  }\n\n  setChildHeights(children, height) {\n    for (let child of children) if (child.layoutInfo.rect.height !== height) {\n      // Need to copy the layout info before we mutate it.\n      child.layoutInfo = child.layoutInfo.copy();\n      this.layoutInfos.set(child.layoutInfo.key, child.layoutInfo);\n      child.layoutInfo.rect.height = height;\n    }\n  }\n\n  getColumnWidth(node) {\n    var _colspan;\n\n    let colspan = (_colspan = node.colspan) !== null && _colspan !== void 0 ? _colspan : 1;\n    let width = 0;\n\n    for (let i = 0; i < colspan; i++) {\n      let column = this.collection.columns[node.index + i];\n      width += this.columnWidths.get(column.key);\n    }\n\n    return width;\n  }\n\n  getEstimatedHeight(node, width, height, estimatedHeight) {\n    let isEstimated = false; // If no explicit height is available, use an estimated height.\n\n    if (height == null) {\n      // If a previous version of this layout info exists, reuse its height.\n      // Mark as estimated if the size of the overall collection view changed,\n      // or the content of the item changed.\n      let previousLayoutNode = this.layoutNodes.get(node.key);\n\n      if (previousLayoutNode) {\n        let curNode = this.collection.getItem(node.key);\n        let lastNode = this.lastCollection ? this.lastCollection.getItem(node.key) : null;\n        height = previousLayoutNode.layoutInfo.rect.height;\n        isEstimated = curNode !== lastNode || width !== previousLayoutNode.layoutInfo.rect.width || previousLayoutNode.layoutInfo.estimatedSize;\n      } else {\n        height = estimatedHeight;\n        isEstimated = true;\n      }\n    }\n\n    return {\n      height: height,\n      isEstimated: isEstimated\n    };\n  }\n\n  buildColumn(node, x, y) {\n    var ref;\n    let width = this.getColumnWidth(node);\n    let {\n      height: height,\n      isEstimated: isEstimated\n    } = this.getEstimatedHeight(node, width, this.headingHeight, this.estimatedHeadingHeight);\n    let rect = new $gtW1T$Rect(x, y, width, height);\n    let layoutInfo = new $gtW1T$LayoutInfo(node.type, node.key, rect);\n    layoutInfo.isSticky = (ref = node.props) === null || ref === void 0 ? void 0 : ref.isSelectionCell;\n    layoutInfo.zIndex = layoutInfo.isSticky ? 2 : 1;\n    layoutInfo.estimatedSize = isEstimated;\n    return {\n      layoutInfo: layoutInfo\n    };\n  }\n\n  buildBody(y) {\n    let rect = new $gtW1T$Rect(0, y, 0, 0);\n    let layoutInfo = new $gtW1T$LayoutInfo('rowgroup', 'body', rect);\n    let startY = y;\n    let width = 0;\n    let children = [];\n\n    for (let node of this.collection.body.childNodes) {\n      let layoutNode = this.buildChild(node, 0, y);\n      layoutNode.layoutInfo.parentKey = 'body';\n      y = layoutNode.layoutInfo.rect.maxY;\n      width = Math.max(width, layoutNode.layoutInfo.rect.width);\n      children.push(layoutNode);\n    }\n\n    if (this.isLoading) {\n      let rect = new $gtW1T$Rect(0, y, width || this.virtualizer.visibleRect.width, children.length === 0 ? this.virtualizer.visibleRect.height : 60);\n      let loader = new $gtW1T$LayoutInfo('loader', 'loader', rect);\n      loader.parentKey = 'body';\n      loader.isSticky = children.length === 0;\n      this.layoutInfos.set('loader', loader);\n      children.push({\n        layoutInfo: loader\n      });\n      y = loader.rect.maxY;\n      width = Math.max(width, rect.width);\n    } else if (children.length === 0) {\n      let rect = new $gtW1T$Rect(0, y, this.virtualizer.visibleRect.width, this.virtualizer.visibleRect.height);\n      let empty = new $gtW1T$LayoutInfo('empty', 'empty', rect);\n      empty.parentKey = 'body';\n      empty.isSticky = true;\n      this.layoutInfos.set('empty', empty);\n      children.push({\n        layoutInfo: empty\n      });\n      y = empty.rect.maxY;\n      width = Math.max(width, rect.width);\n    }\n\n    rect.width = width;\n    rect.height = y - startY;\n    this.layoutInfos.set('body', layoutInfo);\n    return {\n      layoutInfo: layoutInfo,\n      children: children\n    };\n  }\n\n  buildNode(node, x, y) {\n    switch (node.type) {\n      case 'headerrow':\n        return this.buildHeaderRow(node, x, y);\n\n      case 'item':\n        return this.buildRow(node, x, y);\n\n      case 'column':\n      case 'placeholder':\n        return this.buildColumn(node, x, y);\n\n      case 'cell':\n        return this.buildCell(node, x, y);\n\n      default:\n        throw new Error('Unknown node type ' + node.type);\n    }\n  }\n\n  buildRow(node, x, y) {\n    let rect = new $gtW1T$Rect(x, y, 0, 0);\n    let layoutInfo = new $gtW1T$LayoutInfo('row', node.key, rect);\n    let children = [];\n    let height = 0;\n\n    for (let child of node.childNodes) {\n      let layoutNode = this.buildChild(child, x, y);\n      x = layoutNode.layoutInfo.rect.maxX;\n      height = Math.max(height, layoutNode.layoutInfo.rect.height);\n      children.push(layoutNode);\n    }\n\n    this.setChildHeights(children, height);\n    rect.width = x;\n    rect.height = height + 1; // +1 for bottom border\n\n    return {\n      layoutInfo: layoutInfo,\n      children: children\n    };\n  }\n\n  buildCell(node, x, y) {\n    var ref;\n    let width = this.getColumnWidth(node);\n    let {\n      height: height,\n      isEstimated: isEstimated\n    } = this.getEstimatedHeight(node, width, this.rowHeight, this.estimatedRowHeight);\n    let rect = new $gtW1T$Rect(x, y, width, height);\n    let layoutInfo = new $gtW1T$LayoutInfo(node.type, node.key, rect);\n    layoutInfo.isSticky = (ref = node.props) === null || ref === void 0 ? void 0 : ref.isSelectionCell;\n    layoutInfo.zIndex = layoutInfo.isSticky ? 2 : 1;\n    layoutInfo.estimatedSize = isEstimated;\n    return {\n      layoutInfo: layoutInfo\n    };\n  }\n\n  getVisibleLayoutInfos(rect) {\n    let res = [];\n\n    for (let node of this.rootNodes) {\n      res.push(node.layoutInfo);\n      this.addVisibleLayoutInfos(res, node, rect);\n    }\n\n    return res;\n  }\n\n  addVisibleLayoutInfos(res, node, rect) {\n    if (!node.children || node.children.length === 0) return;\n\n    switch (node.layoutInfo.type) {\n      case 'header':\n        for (let child of node.children) {\n          res.push(child.layoutInfo);\n          this.addVisibleLayoutInfos(res, child, rect);\n        }\n\n        break;\n\n      case 'rowgroup':\n        {\n          let firstVisibleRow = this.binarySearch(node.children, rect.topLeft, 'y');\n          let lastVisibleRow = this.binarySearch(node.children, rect.bottomRight, 'y');\n\n          for (let i = firstVisibleRow; i <= lastVisibleRow; i++) {\n            res.push(node.children[i].layoutInfo);\n            this.addVisibleLayoutInfos(res, node.children[i], rect);\n          }\n\n          break;\n        }\n\n      case 'headerrow':\n      case 'row':\n        {\n          let firstVisibleCell = this.binarySearch(node.children, rect.topLeft, 'x');\n          let lastVisibleCell = this.binarySearch(node.children, rect.topRight, 'x');\n          let stickyIndex = 0;\n\n          for (let i = firstVisibleCell; i <= lastVisibleCell; i++) {\n            // Sticky columns and row headers are always in the DOM. Interleave these\n            // with the visible range so that they are in the right order.\n            if (stickyIndex < this.stickyColumnIndices.length) {\n              let idx = this.stickyColumnIndices[stickyIndex];\n\n              while (idx < i) {\n                res.push(node.children[idx].layoutInfo);\n                idx = this.stickyColumnIndices[stickyIndex++];\n              }\n            }\n\n            res.push(node.children[i].layoutInfo);\n          }\n\n          while (stickyIndex < this.stickyColumnIndices.length) {\n            let idx = this.stickyColumnIndices[stickyIndex++];\n            res.push(node.children[idx].layoutInfo);\n          }\n\n          break;\n        }\n\n      default:\n        throw new Error('Unknown node type ' + node.layoutInfo.type);\n    }\n  }\n\n  binarySearch(items, point, axis) {\n    let low = 0;\n    let high = items.length - 1;\n\n    while (low <= high) {\n      let mid = low + high >> 1;\n      let item = items[mid];\n      if (axis === 'x' && item.layoutInfo.rect.maxX < point.x || axis === 'y' && item.layoutInfo.rect.maxY < point.y) low = mid + 1;else if (axis === 'x' && item.layoutInfo.rect.x > point.x || axis === 'y' && item.layoutInfo.rect.y > point.y) high = mid - 1;else return mid;\n    }\n\n    return Math.max(0, Math.min(items.length - 1, low));\n  }\n\n  getInitialLayoutInfo(layoutInfo) {\n    let res = super.getInitialLayoutInfo(layoutInfo); // If this insert was the result of async loading, remove the zoom effect and just keep the fade in.\n\n    if (this.wasLoading) res.transform = null;\n    return res;\n  }\n\n  constructor(options) {\n    super(options);\n    this.wasLoading = false;\n    this.isLoading = false;\n    this.getDefaultWidth = options.getDefaultWidth;\n  }\n\n}\n\nexport { $61ef60fc9b1041f4$export$cacbb3924155d68e as ListLayout, $a152112e902709bf$export$62444c3c724b1b20 as TableLayout };","map":{"version":3,"mappings":"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","names":["$61ef60fc9b1041f4$var$DEFAULT_HEIGHT","$61ef60fc9b1041f4$export$cacbb3924155d68e","$gtW1T$Layout","getLayoutInfo","key","layoutInfos","get","getVisibleLayoutInfos","rect","res","addNodes","nodes","node","isVisible","push","layoutInfo","header","children","rootNodes","intersects","isSticky","validate","invalidationContext","invalidateEverything","sizeChanged","collection","virtualizer","buildCollection","lastCollection","getKeys","getItem","layoutNode","layoutNodes","ref","delete","lastWidth","visibleRect","width","y","padding","buildChild","maxY","isLoading","_loaderHeight","$gtW1T$Rect","loaderHeight","height","loader","$gtW1T$LayoutInfo","set","length","_placeholderHeight","placeholderHeight","placeholder","contentSize","$gtW1T$Size","x","cached","buildNode","_parentKey","parentKey","type","buildSection","buildItem","rectHeight","headingHeight","isEstimated","previousLayoutNode","curNode","lastNode","estimatedSize","rendered","estimatedHeadingHeight","headerRect","startY","child","childNodes","rowHeight","estimatedRowHeight","indentationForItem","updateItemSize","size","newLayoutInfo","copy","updateLayoutNode","oldLayoutInfo","n","getContentSize","getKeyAbove","getKeyBefore","item","disabledKeys","has","getKeyBelow","getKeyAfter","getKeyPageAbove","pageY","Math","max","keyAbove","getFirstKey","getKeyPageBelow","min","keyBelow","getLastKey","getKeyForSearch","search","fromKey","collator","substring","textValue","slice","compare","getInitialLayoutInfo","opacity","transform","getFinalLayoutInfo","constructor","options","Set","Map","$a152112e902709bf$export$62444c3c724b1b20","columns","some","c","i","loadingState","body","props","wasLoading","buildColumnWidths","buildHeader","buildBody","columnWidths","stickyColumnIndices","remainingColumns","remainingSpace","column","_width","getDefaultWidth","w","parseWidth","add","isSelectionCell","rowHeaderColumnKeys","index","columnWidth","minWidth","maxWidth","Infinity","match","Error","parseInt","headerRow","headerRows","buildHeaderRow","row","cell","maxX","setChildHeights","getColumnWidth","_colspan","colspan","getEstimatedHeight","estimatedHeight","buildColumn","zIndex","empty","buildRow","buildCell","addVisibleLayoutInfos","firstVisibleRow","binarySearch","topLeft","lastVisibleRow","bottomRight","firstVisibleCell","lastVisibleCell","topRight","stickyIndex","idx","items","point","axis","low","high","mid"],"sources":["C:\\Users\\ev3rg\\OneDrive\\Documents\\GitHub\\gt-bigdata-website\\node_modules\\@react-stately\\layout\\dist\\packages\\@react-stately\\layout\\src\\ListLayout.ts","C:\\Users\\ev3rg\\OneDrive\\Documents\\GitHub\\gt-bigdata-website\\node_modules\\@react-stately\\layout\\dist\\packages\\@react-stately\\layout\\src\\TableLayout.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, KeyboardDelegate, Node} from '@react-types/shared';\nimport {InvalidationContext, Layout, LayoutInfo, Rect, Size} from '@react-stately/virtualizer';\nimport {Key} from 'react';\n// import { DragTarget, DropTarget, DropPosition } from '@react-types/shared';\n\nexport type ListLayoutOptions<T> = {\n  /** The height of a row in px. */\n  rowHeight?: number,\n  estimatedRowHeight?: number,\n  headingHeight?: number,\n  estimatedHeadingHeight?: number,\n  padding?: number,\n  indentationForItem?: (collection: Collection<Node<T>>, key: Key) => number,\n  collator?: Intl.Collator,\n  loaderHeight?: number,\n  placeholderHeight?: number\n};\n\n// A wrapper around LayoutInfo that supports hierarchy\nexport interface LayoutNode {\n  node?: Node<unknown>,\n  layoutInfo: LayoutInfo,\n  header?: LayoutInfo,\n  children?: LayoutNode[]\n}\n\nconst DEFAULT_HEIGHT = 48;\n\n/**\n * The ListLayout class is an implementation of a collection view {@link Layout}\n * it is used for creating lists and lists with indented sub-lists.\n *\n * To configure a ListLayout, you can use the properties to define the\n * layouts and/or use the method for defining indentation.\n * The {@link ListKeyboardDelegate} extends the existing collection view\n * delegate with an additional method to do this (it uses the same delegate object as\n * the collection view itself).\n */\nexport class ListLayout<T> extends Layout<Node<T>> implements KeyboardDelegate {\n  protected rowHeight: number;\n  protected estimatedRowHeight: number;\n  protected headingHeight: number;\n  protected estimatedHeadingHeight: number;\n  protected padding: number;\n  protected indentationForItem?: (collection: Collection<Node<T>>, key: Key) => number;\n  protected layoutInfos: Map<Key, LayoutInfo>;\n  protected layoutNodes: Map<Key, LayoutNode>;\n  protected contentSize: Size;\n  collection: Collection<Node<T>>;\n  disabledKeys: Set<Key> = new Set();\n  isLoading: boolean;\n  protected lastWidth: number;\n  protected lastCollection: Collection<Node<T>>;\n  protected rootNodes: LayoutNode[];\n  protected collator: Intl.Collator;\n  protected invalidateEverything: boolean;\n  protected loaderHeight: number;\n  protected placeholderHeight: number;\n\n  /**\n   * Creates a new ListLayout with options. See the list of properties below for a description\n   * of the options that can be provided.\n   */\n  constructor(options: ListLayoutOptions<T> = {}) {\n    super();\n    this.rowHeight = options.rowHeight;\n    this.estimatedRowHeight = options.estimatedRowHeight;\n    this.headingHeight = options.headingHeight;\n    this.estimatedHeadingHeight = options.estimatedHeadingHeight;\n    this.padding = options.padding || 0;\n    this.indentationForItem = options.indentationForItem;\n    this.collator = options.collator;\n    this.loaderHeight = options.loaderHeight;\n    this.placeholderHeight = options.placeholderHeight;\n    this.layoutInfos = new Map();\n    this.layoutNodes = new Map();\n    this.rootNodes = [];\n    this.lastWidth = 0;\n    this.lastCollection = null;\n  }\n\n  getLayoutInfo(key: Key) {\n    return this.layoutInfos.get(key);\n  }\n\n  getVisibleLayoutInfos(rect: Rect) {\n    let res: LayoutInfo[] = [];\n\n    let addNodes = (nodes: LayoutNode[]) => {\n      for (let node of nodes) {\n        if (this.isVisible(node, rect)) {\n          res.push(node.layoutInfo);\n          if (node.header) {\n            res.push(node.header);\n          }\n\n          if (node.children) {\n            addNodes(node.children);\n          }\n        }\n      }\n    };\n\n    addNodes(this.rootNodes);\n    return res;\n  }\n\n  isVisible(node: LayoutNode, rect: Rect) {\n    return node.layoutInfo.rect.intersects(rect) || node.layoutInfo.isSticky;\n  }\n\n  validate(invalidationContext: InvalidationContext<Node<T>, unknown>) {\n    // Invalidate cache if the size of the collection changed.\n    // In this case, we need to recalculate the entire layout.\n    this.invalidateEverything = invalidationContext.sizeChanged;\n\n    this.collection = this.virtualizer.collection;\n    this.rootNodes = this.buildCollection();\n\n    // Remove deleted layout nodes\n    if (this.lastCollection) {\n      for (let key of this.lastCollection.getKeys()) {\n        if (!this.collection.getItem(key)) {\n          let layoutNode = this.layoutNodes.get(key);\n          if (layoutNode) {\n            this.layoutInfos.delete(layoutNode.layoutInfo.key);\n            this.layoutInfos.delete(layoutNode.header?.key);\n            this.layoutNodes.delete(key);\n          }\n        }\n      }\n    }\n\n    this.lastWidth = this.virtualizer.visibleRect.width;\n    this.lastCollection = this.collection;\n  }\n\n  buildCollection(): LayoutNode[] {\n    let y = this.padding;\n    let nodes = [];\n    for (let node of this.collection) {\n      let layoutNode = this.buildChild(node, 0, y);\n      y = layoutNode.layoutInfo.rect.maxY;\n      nodes.push(layoutNode);\n    }\n\n    if (this.isLoading) {\n      let rect = new Rect(0, y, this.virtualizer.visibleRect.width,\n        this.loaderHeight ?? this.virtualizer.visibleRect.height);\n      let loader = new LayoutInfo('loader', 'loader', rect);\n      this.layoutInfos.set('loader', loader);\n      nodes.push({layoutInfo: loader});\n      y = loader.rect.maxY;\n    }\n\n    if (nodes.length === 0) {\n      let rect = new Rect(0, y, this.virtualizer.visibleRect.width,\n        this.placeholderHeight ?? this.virtualizer.visibleRect.height);\n      let placeholder = new LayoutInfo('placeholder', 'placeholder', rect);\n      this.layoutInfos.set('placeholder', placeholder);\n      nodes.push({layoutInfo: placeholder});\n      y = placeholder.rect.maxY;\n    }\n\n    this.contentSize = new Size(this.virtualizer.visibleRect.width, y + this.padding);\n    return nodes;\n  }\n\n  buildChild(node: Node<T>, x: number, y: number): LayoutNode {\n    let cached = this.layoutNodes.get(node.key);\n    if (!this.invalidateEverything && cached && cached.node === node && y === (cached.header || cached.layoutInfo).rect.y) {\n      return cached;\n    }\n\n    let layoutNode = this.buildNode(node, x, y);\n    layoutNode.node = node;\n\n    layoutNode.layoutInfo.parentKey = node.parentKey ?? null;\n    this.layoutInfos.set(layoutNode.layoutInfo.key, layoutNode.layoutInfo);\n    if (layoutNode.header) {\n      this.layoutInfos.set(layoutNode.header.key, layoutNode.header);\n    }\n\n    this.layoutNodes.set(node.key, layoutNode);\n    return layoutNode;\n  }\n\n  buildNode(node: Node<T>, x: number, y: number): LayoutNode {\n    switch (node.type) {\n      case 'section':\n        return this.buildSection(node, x, y);\n      case 'item':\n        return this.buildItem(node, x, y);\n    }\n  }\n\n  buildSection(node: Node<T>, x: number, y: number): LayoutNode {\n    let width = this.virtualizer.visibleRect.width;\n    let rectHeight = this.headingHeight;\n    let isEstimated = false;\n\n    // If no explicit height is available, use an estimated height.\n    if (rectHeight == null) {\n      // If a previous version of this layout info exists, reuse its height.\n      // Mark as estimated if the size of the overall collection view changed,\n      // or the content of the item changed.\n      let previousLayoutNode = this.layoutNodes.get(node.key);\n      if (previousLayoutNode && previousLayoutNode.header) {\n        let curNode = this.collection.getItem(node.key);\n        let lastNode = this.lastCollection ? this.lastCollection.getItem(node.key) : null;\n        rectHeight = previousLayoutNode.header.rect.height;\n        isEstimated = width !== this.lastWidth || curNode !== lastNode || previousLayoutNode.header.estimatedSize;\n      } else {\n        rectHeight = (node.rendered ? this.estimatedHeadingHeight : 0);\n        isEstimated = true;\n      }\n    }\n\n    if (rectHeight == null) {\n      rectHeight = DEFAULT_HEIGHT;\n    }\n\n    let headerRect = new Rect(0, y, width, rectHeight);\n    let header = new LayoutInfo('header', node.key + ':header', headerRect);\n    header.estimatedSize = isEstimated;\n    header.parentKey = node.key;\n    y += header.rect.height;\n\n    let rect = new Rect(0, y, width, 0);\n    let layoutInfo = new LayoutInfo(node.type, node.key, rect);\n\n    let startY = y;\n    let children = [];\n    for (let child of node.childNodes) {\n      let layoutNode = this.buildChild(child, x, y);\n      y = layoutNode.layoutInfo.rect.maxY;\n      children.push(layoutNode);\n    }\n\n    rect.height = y - startY;\n\n    return {\n      header,\n      layoutInfo,\n      children\n    };\n  }\n\n  buildItem(node: Node<T>, x: number, y: number): LayoutNode {\n    let width = this.virtualizer.visibleRect.width;\n    let rectHeight = this.rowHeight;\n    let isEstimated = false;\n\n    // If no explicit height is available, use an estimated height.\n    if (rectHeight == null) {\n      // If a previous version of this layout info exists, reuse its height.\n      // Mark as estimated if the size of the overall collection view changed,\n      // or the content of the item changed.\n      let previousLayoutNode = this.layoutNodes.get(node.key);\n      if (previousLayoutNode) {\n        let curNode = this.collection.getItem(node.key);\n        let lastNode = this.lastCollection ? this.lastCollection.getItem(node.key) : null;\n        rectHeight = previousLayoutNode.layoutInfo.rect.height;\n        isEstimated = width !== this.lastWidth || curNode !== lastNode || previousLayoutNode.layoutInfo.estimatedSize;\n      } else {\n        rectHeight = this.estimatedRowHeight;\n        isEstimated = true;\n      }\n    }\n\n    if (rectHeight == null) {\n      rectHeight = DEFAULT_HEIGHT;\n    }\n\n    if (typeof this.indentationForItem === 'function') {\n      x += this.indentationForItem(this.collection, node.key) || 0;\n    }\n\n    let rect = new Rect(x, y, width - x, rectHeight);\n    let layoutInfo = new LayoutInfo(node.type, node.key, rect);\n    layoutInfo.estimatedSize = isEstimated;\n    return {\n      layoutInfo\n    };\n  }\n\n  updateItemSize(key: Key, size: Size) {\n    let layoutInfo = this.layoutInfos.get(key);\n    // If no layoutInfo, item has been deleted/removed.\n    if (!layoutInfo) {\n      return false;\n    }\n\n    layoutInfo.estimatedSize = false;\n    if (layoutInfo.rect.height !== size.height) {\n      // Copy layout info rather than mutating so that later caches are invalidated.\n      let newLayoutInfo = layoutInfo.copy();\n      newLayoutInfo.rect.height = size.height;\n      this.layoutInfos.set(key, newLayoutInfo);\n\n      // Invalidate layout for this layout node and all parents\n      this.updateLayoutNode(key, layoutInfo, newLayoutInfo);\n\n      let node = this.collection.getItem(layoutInfo.parentKey);\n      while (node) {\n        this.updateLayoutNode(node.key, layoutInfo, newLayoutInfo);\n        node = this.collection.getItem(node.parentKey);\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  updateLayoutNode(key: Key, oldLayoutInfo: LayoutInfo, newLayoutInfo: LayoutInfo) {\n    let n = this.layoutNodes.get(key);\n    if (n) {\n      // Invalidate by clearing node.\n      n.node = null;\n\n      // Replace layout info in LayoutNode\n      if (n.header === oldLayoutInfo) {\n        n.header = newLayoutInfo;\n      } else if (n.layoutInfo === oldLayoutInfo) {\n        n.layoutInfo = newLayoutInfo;\n      }\n    }\n  }\n\n  getContentSize() {\n    return this.contentSize;\n  }\n\n  getKeyAbove(key: Key) {\n    let collection = this.collection;\n\n    key = collection.getKeyBefore(key);\n    while (key != null) {\n      let item = collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(item.key)) {\n        return key;\n      }\n\n      key = collection.getKeyBefore(key);\n    }\n  }\n\n  getKeyBelow(key: Key) {\n    let collection = this.collection;\n\n    key = collection.getKeyAfter(key);\n    while (key != null) {\n      let item = collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(item.key)) {\n        return key;\n      }\n\n      key = collection.getKeyAfter(key);\n    }\n  }\n\n  getKeyPageAbove(key: Key) {\n    let layoutInfo = this.getLayoutInfo(key);\n\n    if (layoutInfo) {\n      let pageY = Math.max(0, layoutInfo.rect.y + layoutInfo.rect.height - this.virtualizer.visibleRect.height);\n      while (layoutInfo && layoutInfo.rect.y > pageY) {\n        let keyAbove = this.getKeyAbove(layoutInfo.key);\n        layoutInfo = this.getLayoutInfo(keyAbove);\n      }\n\n      if (layoutInfo) {\n        return layoutInfo.key;\n      }\n    }\n\n    return this.getFirstKey();\n  }\n\n  getKeyPageBelow(key: Key) {\n    let layoutInfo = this.getLayoutInfo(key != null ? key : this.getFirstKey());\n\n    if (layoutInfo) {\n      let pageY = Math.min(this.virtualizer.contentSize.height, layoutInfo.rect.y - layoutInfo.rect.height + this.virtualizer.visibleRect.height);\n      while (layoutInfo && layoutInfo.rect.y < pageY) {\n        let keyBelow = this.getKeyBelow(layoutInfo.key);\n        layoutInfo = this.getLayoutInfo(keyBelow);\n      }\n\n      if (layoutInfo) {\n        return layoutInfo.key;\n      }\n    }\n\n    return this.getLastKey();\n  }\n\n  getFirstKey() {\n    let collection = this.collection;\n    let key = collection.getFirstKey();\n    while (key != null) {\n      let item = collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(item.key)) {\n        return key;\n      }\n\n      key = collection.getKeyAfter(key);\n    }\n  }\n\n  getLastKey() {\n    let collection = this.collection;\n    let key = collection.getLastKey();\n    while (key != null) {\n      let item = collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(item.key)) {\n        return key;\n      }\n\n      key = collection.getKeyBefore(key);\n    }\n  }\n\n  getKeyForSearch(search: string, fromKey?: Key) {\n    if (!this.collator) {\n      return null;\n    }\n\n    let collection = this.collection;\n    let key = fromKey || this.getFirstKey();\n    while (key != null) {\n      let item = collection.getItem(key);\n      let substring = item.textValue.slice(0, search.length);\n      if (item.textValue && this.collator.compare(substring, search) === 0) {\n        return key;\n      }\n\n      key = this.getKeyBelow(key);\n    }\n\n    return null;\n  }\n\n  // getDragTarget(point: Point): DragTarget {\n  //   let visible = this.getVisibleLayoutInfos(new Rect(point.x, point.y, 1, 1));\n  //   if (visible.length > 0) {\n  //     visible = visible.sort((a, b) => b.zIndex - a.zIndex);\n  //     return {\n  //       type: 'item',\n  //       key: visible[0].key\n  //     };\n  //   }\n\n  //   return null;\n  // }\n\n  // getDropTarget(point: Point): DropTarget {\n  //   let key = this.virtualizer.keyAtPoint(point);\n  //   if (key) {\n  //     return {\n  //       type: 'item',\n  //       key,\n  //       dropPosition: DropPosition.ON\n  //     };\n  //   }\n\n  //   return null;\n  // }\n\n  getInitialLayoutInfo(layoutInfo: LayoutInfo) {\n    layoutInfo.opacity = 0;\n    layoutInfo.transform = 'scale3d(0.8, 0.8, 0.8)';\n    return layoutInfo;\n  }\n\n  getFinalLayoutInfo(layoutInfo: LayoutInfo) {\n    layoutInfo.opacity = 0;\n    layoutInfo.transform = 'scale3d(0.8, 0.8, 0.8)';\n    return layoutInfo;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ColumnProps, TableCollection} from '@react-types/table';\nimport {GridNode} from '@react-types/grid';\nimport {Key} from 'react';\nimport {LayoutInfo, Point, Rect, Size} from '@react-stately/virtualizer';\nimport {LayoutNode, ListLayout, ListLayoutOptions} from './ListLayout';\n\n\ntype TableLayoutOptions<T> = ListLayoutOptions<T> & {\n  getDefaultWidth: (props) => string | number\n}\n\nexport class TableLayout<T> extends ListLayout<T> {\n  collection: TableCollection<T>;\n  lastCollection: TableCollection<T>;\n  columnWidths: Map<Key, number>;\n  stickyColumnIndices: number[];\n  getDefaultWidth: (props) => string | number;\n  wasLoading = false;\n  isLoading = false;\n\n  constructor(options: TableLayoutOptions<T>) {\n    super(options);\n    this.getDefaultWidth = options.getDefaultWidth;\n  }\n\n\n  buildCollection(): LayoutNode[] {\n    // If columns changed, clear layout cache.\n    if (\n      !this.lastCollection ||\n      this.collection.columns.length !== this.lastCollection.columns.length ||\n      this.collection.columns.some((c, i) => c.key !== this.lastCollection.columns[i].key)\n    ) {\n      // Invalidate everything in this layout pass. Will be reset in ListLayout on the next pass.\n      this.invalidateEverything = true;\n    }\n\n    // Track whether we were previously loading. This is used to adjust the animations of async loading vs inserts.\n    let loadingState = this.collection.body.props.loadingState;\n    this.wasLoading = this.isLoading;\n    this.isLoading = loadingState === 'loading' || loadingState === 'loadingMore';\n\n    this.buildColumnWidths();\n    let header = this.buildHeader();\n    let body = this.buildBody(0);\n    body.layoutInfo.rect.width = Math.max(header.layoutInfo.rect.width, body.layoutInfo.rect.width);\n    this.contentSize = new Size(body.layoutInfo.rect.width, body.layoutInfo.rect.maxY);\n    return [\n      header,\n      body\n    ];\n  }\n\n  buildColumnWidths() {\n    this.columnWidths = new Map();\n    this.stickyColumnIndices = [];\n\n    // Pass 1: set widths for all explicitly defined columns.\n    let remainingColumns = new Set<GridNode<T>>();\n    let remainingSpace = this.virtualizer.visibleRect.width;\n    for (let column of this.collection.columns) {\n      let props = column.props as ColumnProps<T>;\n      let width = props.width ?? this.getDefaultWidth(props);\n      if (width != null) {\n        let w = this.parseWidth(width);\n        this.columnWidths.set(column.key, w);\n        remainingSpace -= w;\n      } else {\n        remainingColumns.add(column);\n      }\n\n      // The selection cell and any other sticky columns always need to be visible.\n      // In addition, row headers need to be in the DOM for accessibility labeling.\n      if (column.props.isSelectionCell || this.collection.rowHeaderColumnKeys.has(column.key)) {\n        this.stickyColumnIndices.push(column.index);\n      }\n    }\n\n    // Pass 2: if there are remaining columns, then distribute the remaining space evenly.\n    if (remainingColumns.size > 0) {\n      let columnWidth = remainingSpace / (this.collection.columns.length - this.columnWidths.size);\n\n      for (let column of remainingColumns) {\n        let props = column.props as ColumnProps<T>;\n        let minWidth = props.minWidth != null ? this.parseWidth(props.minWidth) : 75;\n        let maxWidth = props.maxWidth != null ? this.parseWidth(props.maxWidth) : Infinity;\n        let width = Math.max(minWidth, Math.min(maxWidth, columnWidth));\n\n        this.columnWidths.set(column.key, width);\n        remainingSpace -= width;\n        if (width !== columnWidth) {\n          columnWidth = remainingSpace / (this.collection.columns.length - this.columnWidths.size);\n        }\n      }\n    }\n  }\n\n  parseWidth(width: number | string): number {\n    if (typeof width === 'string') {\n      let match = width.match(/^(\\d+)%$/);\n      if (!match) {\n        throw new Error('Only percentages are supported as column widths');\n      }\n\n      return this.virtualizer.visibleRect.width * (parseInt(match[1], 10) / 100);\n    }\n\n    return width;\n  }\n\n  buildHeader(): LayoutNode {\n    let rect = new Rect(0, 0, 0, 0);\n    let layoutInfo = new LayoutInfo('header', 'header', rect);\n\n    let y = 0;\n    let width = 0;\n    let children: LayoutNode[] = [];\n    for (let headerRow of this.collection.headerRows) {\n      let layoutNode = this.buildChild(headerRow, 0, y);\n      layoutNode.layoutInfo.parentKey = 'header';\n      y = layoutNode.layoutInfo.rect.maxY;\n      width = Math.max(width, layoutNode.layoutInfo.rect.width);\n      children.push(layoutNode);\n    }\n\n    rect.width = width;\n    rect.height = y;\n\n    this.layoutInfos.set('header', layoutInfo);\n\n    return {\n      layoutInfo,\n      children\n    };\n  }\n\n  buildHeaderRow(headerRow: GridNode<T>, x: number, y: number) {\n    let rect = new Rect(0, y, 0, 0);\n    let row = new LayoutInfo('headerrow', headerRow.key, rect);\n\n    let height = 0;\n    let columns: LayoutNode[] = [];\n    for (let cell of headerRow.childNodes) {\n      let layoutNode = this.buildChild(cell, x, y);\n      layoutNode.layoutInfo.parentKey = row.key;\n      x = layoutNode.layoutInfo.rect.maxX;\n      height = Math.max(height, layoutNode.layoutInfo.rect.height);\n      columns.push(layoutNode);\n    }\n\n    this.setChildHeights(columns, height);\n\n    rect.height = height;\n    rect.width = x;\n\n    return {\n      layoutInfo: row,\n      children: columns\n    };\n  }\n\n  setChildHeights(children: LayoutNode[], height: number) {\n    for (let child of children) {\n      if (child.layoutInfo.rect.height !== height) {\n        // Need to copy the layout info before we mutate it.\n        child.layoutInfo = child.layoutInfo.copy();\n        this.layoutInfos.set(child.layoutInfo.key, child.layoutInfo);\n\n        child.layoutInfo.rect.height = height;\n      }\n    }\n  }\n\n  getColumnWidth(node: GridNode<T>) {\n    let colspan = node.colspan ?? 1;\n    let width = 0;\n    for (let i = 0; i < colspan; i++) {\n      let column = this.collection.columns[node.index + i];\n      width += this.columnWidths.get(column.key);\n    }\n\n    return width;\n  }\n\n  getEstimatedHeight(node: GridNode<T>, width: number, height: number, estimatedHeight: number) {\n    let isEstimated = false;\n\n    // If no explicit height is available, use an estimated height.\n    if (height == null) {\n      // If a previous version of this layout info exists, reuse its height.\n      // Mark as estimated if the size of the overall collection view changed,\n      // or the content of the item changed.\n      let previousLayoutNode = this.layoutNodes.get(node.key);\n      if (previousLayoutNode) {\n        let curNode = this.collection.getItem(node.key);\n        let lastNode = this.lastCollection ? this.lastCollection.getItem(node.key) : null;\n        height = previousLayoutNode.layoutInfo.rect.height;\n        isEstimated = curNode !== lastNode || width !== previousLayoutNode.layoutInfo.rect.width || previousLayoutNode.layoutInfo.estimatedSize;\n      } else {\n        height = estimatedHeight;\n        isEstimated = true;\n      }\n    }\n\n    return {height, isEstimated};\n  }\n\n  buildColumn(node: GridNode<T>, x: number, y: number): LayoutNode {\n    let width = this.getColumnWidth(node);\n    let {height, isEstimated} = this.getEstimatedHeight(node, width, this.headingHeight, this.estimatedHeadingHeight);\n    let rect = new Rect(x, y, width, height);\n    let layoutInfo = new LayoutInfo(node.type, node.key, rect);\n    layoutInfo.isSticky = node.props?.isSelectionCell;\n    layoutInfo.zIndex = layoutInfo.isSticky ? 2 : 1;\n    layoutInfo.estimatedSize = isEstimated;\n\n    return {\n      layoutInfo\n    };\n  }\n\n  buildBody(y: number): LayoutNode {\n    let rect = new Rect(0, y, 0, 0);\n    let layoutInfo = new LayoutInfo('rowgroup', 'body', rect);\n\n    let startY = y;\n    let width = 0;\n    let children: LayoutNode[] = [];\n    for (let node of this.collection.body.childNodes) {\n      let layoutNode = this.buildChild(node, 0, y);\n      layoutNode.layoutInfo.parentKey = 'body';\n      y = layoutNode.layoutInfo.rect.maxY;\n      width = Math.max(width, layoutNode.layoutInfo.rect.width);\n      children.push(layoutNode);\n    }\n\n    if (this.isLoading) {\n      let rect = new Rect(0, y, width || this.virtualizer.visibleRect.width, children.length === 0 ? this.virtualizer.visibleRect.height : 60);\n      let loader = new LayoutInfo('loader', 'loader', rect);\n      loader.parentKey = 'body';\n      loader.isSticky = children.length === 0;\n      this.layoutInfos.set('loader', loader);\n      children.push({layoutInfo: loader});\n      y = loader.rect.maxY;\n      width = Math.max(width, rect.width);\n    } else if (children.length === 0) {\n      let rect = new Rect(0, y, this.virtualizer.visibleRect.width, this.virtualizer.visibleRect.height);\n      let empty = new LayoutInfo('empty', 'empty', rect);\n      empty.parentKey = 'body';\n      empty.isSticky = true;\n      this.layoutInfos.set('empty', empty);\n      children.push({layoutInfo: empty});\n      y = empty.rect.maxY;\n      width = Math.max(width, rect.width);\n    }\n\n    rect.width = width;\n    rect.height = y - startY;\n\n    this.layoutInfos.set('body', layoutInfo);\n\n    return {\n      layoutInfo,\n      children\n    };\n  }\n\n  buildNode(node: GridNode<T>, x: number, y: number): LayoutNode {\n    switch (node.type) {\n      case 'headerrow':\n        return this.buildHeaderRow(node, x, y);\n      case 'item':\n        return this.buildRow(node, x, y);\n      case 'column':\n      case 'placeholder':\n        return this.buildColumn(node, x, y);\n      case 'cell':\n        return this.buildCell(node, x, y);\n      default:\n        throw new Error('Unknown node type ' + node.type);\n    }\n  }\n\n  buildRow(node: GridNode<T>, x: number, y: number): LayoutNode {\n    let rect = new Rect(x, y, 0, 0);\n    let layoutInfo = new LayoutInfo('row', node.key, rect);\n\n    let children: LayoutNode[] = [];\n    let height = 0;\n    for (let child of node.childNodes) {\n      let layoutNode = this.buildChild(child, x, y);\n      x = layoutNode.layoutInfo.rect.maxX;\n      height = Math.max(height, layoutNode.layoutInfo.rect.height);\n      children.push(layoutNode);\n    }\n\n    this.setChildHeights(children, height);\n\n    rect.width = x;\n    rect.height = height + 1; // +1 for bottom border\n\n    return {\n      layoutInfo,\n      children\n    };\n  }\n\n  buildCell(node: GridNode<T>, x: number, y: number): LayoutNode {\n    let width = this.getColumnWidth(node);\n    let {height, isEstimated} = this.getEstimatedHeight(node, width, this.rowHeight, this.estimatedRowHeight);\n    let rect = new Rect(x, y, width, height);\n    let layoutInfo = new LayoutInfo(node.type, node.key, rect);\n    layoutInfo.isSticky = node.props?.isSelectionCell;\n    layoutInfo.zIndex = layoutInfo.isSticky ? 2 : 1;\n    layoutInfo.estimatedSize = isEstimated;\n\n    return {\n      layoutInfo\n    };\n  }\n\n  getVisibleLayoutInfos(rect: Rect) {\n    let res: LayoutInfo[] = [];\n\n    for (let node of this.rootNodes) {\n      res.push(node.layoutInfo);\n      this.addVisibleLayoutInfos(res, node, rect);\n    }\n\n    return res;\n  }\n\n  addVisibleLayoutInfos(res: LayoutInfo[], node: LayoutNode, rect: Rect) {\n    if (!node.children || node.children.length === 0) {\n      return;\n    }\n\n    switch (node.layoutInfo.type) {\n      case 'header': {\n        for (let child of node.children) {\n          res.push(child.layoutInfo);\n          this.addVisibleLayoutInfos(res, child, rect);\n        }\n        break;\n      }\n      case 'rowgroup': {\n        let firstVisibleRow = this.binarySearch(node.children, rect.topLeft, 'y');\n        let lastVisibleRow = this.binarySearch(node.children, rect.bottomRight, 'y');\n        for (let i = firstVisibleRow; i <= lastVisibleRow; i++) {\n          res.push(node.children[i].layoutInfo);\n          this.addVisibleLayoutInfos(res, node.children[i], rect);\n        }\n        break;\n      }\n      case 'headerrow':\n      case 'row': {\n        let firstVisibleCell = this.binarySearch(node.children, rect.topLeft, 'x');\n        let lastVisibleCell = this.binarySearch(node.children, rect.topRight, 'x');\n        let stickyIndex = 0;\n        for (let i = firstVisibleCell; i <= lastVisibleCell; i++) {\n          // Sticky columns and row headers are always in the DOM. Interleave these\n          // with the visible range so that they are in the right order.\n          if (stickyIndex < this.stickyColumnIndices.length) {\n            let idx = this.stickyColumnIndices[stickyIndex];\n            while (idx < i) {\n              res.push(node.children[idx].layoutInfo);\n              idx = this.stickyColumnIndices[stickyIndex++];\n            }\n          }\n\n          res.push(node.children[i].layoutInfo);\n        }\n\n        while (stickyIndex < this.stickyColumnIndices.length) {\n          let idx = this.stickyColumnIndices[stickyIndex++];\n          res.push(node.children[idx].layoutInfo);\n        }\n        break;\n      }\n      default:\n        throw new Error('Unknown node type ' + node.layoutInfo.type);\n    }\n  }\n\n  binarySearch(items: LayoutNode[], point: Point, axis: 'x' | 'y') {\n    let low = 0;\n    let high = items.length - 1;\n    while (low <= high) {\n      let mid = (low + high) >> 1;\n      let item = items[mid];\n\n      if ((axis === 'x' && item.layoutInfo.rect.maxX < point.x) || (axis === 'y' && item.layoutInfo.rect.maxY < point.y)) {\n        low = mid + 1;\n      } else if ((axis === 'x' && item.layoutInfo.rect.x > point.x) || (axis === 'y' && item.layoutInfo.rect.y > point.y)) {\n        high = mid - 1;\n      } else {\n        return mid;\n      }\n    }\n\n    return Math.max(0, Math.min(items.length - 1, low));\n  }\n\n  getInitialLayoutInfo(layoutInfo: LayoutInfo) {\n    let res = super.getInitialLayoutInfo(layoutInfo);\n\n    // If this insert was the result of async loading, remove the zoom effect and just keep the fade in.\n    if (this.wasLoading) {\n      res.transform = null;\n    }\n\n    return res;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}