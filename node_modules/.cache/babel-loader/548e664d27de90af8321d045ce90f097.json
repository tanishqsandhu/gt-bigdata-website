{"ast":null,"code":"import { filterDOMProps as $thkiX$filterDOMProps, mergeProps as $thkiX$mergeProps, useId as $thkiX$useId, chain as $thkiX$chain } from \"@react-aria/utils\";\nimport $thkiX$react, { useMemo as $thkiX$useMemo } from \"react\";\nimport { ListKeyboardDelegate as $thkiX$ListKeyboardDelegate, useTypeSelect as $thkiX$useTypeSelect } from \"@react-aria/selection\";\nimport { setInteractionModality as $thkiX$setInteractionModality, useInteractionModality as $thkiX$useInteractionModality } from \"@react-aria/interactions\";\nimport { useCollator as $thkiX$useCollator } from \"@react-aria/i18n\";\nimport { useField as $thkiX$useField } from \"@react-aria/label\";\nimport { useMenuTrigger as $thkiX$useMenuTrigger } from \"@react-aria/menu\";\nimport { useVisuallyHidden as $thkiX$useVisuallyHidden } from \"@react-aria/visually-hidden\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $58aed456727eb0f3$exports = {};\n$parcel$export($58aed456727eb0f3$exports, \"useSelect\", () => $58aed456727eb0f3$export$e64b2f635402ca43);\n\nfunction $58aed456727eb0f3$export$e64b2f635402ca43(props, state, ref) {\n  let {\n    keyboardDelegate: keyboardDelegate,\n    isDisabled: isDisabled\n  } = props; // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n\n  let collator = $thkiX$useCollator({\n    usage: 'search',\n    sensitivity: 'base'\n  });\n  let delegate = $thkiX$useMemo(() => keyboardDelegate || new $thkiX$ListKeyboardDelegate(state.collection, state.disabledKeys, null, collator), [keyboardDelegate, state.collection, state.disabledKeys, collator]);\n  let {\n    menuTriggerProps: menuTriggerProps,\n    menuProps: menuProps\n  } = $thkiX$useMenuTrigger({\n    isDisabled: isDisabled,\n    type: 'listbox'\n  }, state, ref);\n\n  let onKeyDown = e => {\n    switch (e.key) {\n      case 'ArrowLeft':\n        {\n          // prevent scrolling containers\n          e.preventDefault();\n          let key = state.selectedKey != null ? delegate.getKeyAbove(state.selectedKey) : delegate.getFirstKey();\n          if (key) state.setSelectedKey(key);\n          break;\n        }\n\n      case 'ArrowRight':\n        {\n          // prevent scrolling containers\n          e.preventDefault();\n          let key = state.selectedKey != null ? delegate.getKeyBelow(state.selectedKey) : delegate.getFirstKey();\n          if (key) state.setSelectedKey(key);\n          break;\n        }\n    }\n  };\n\n  let {\n    typeSelectProps: typeSelectProps\n  } = $thkiX$useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: state.selectionManager,\n\n    onTypeSelect(key) {\n      state.setSelectedKey(key);\n    }\n\n  });\n  let {\n    labelProps: labelProps,\n    fieldProps: fieldProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  } = $thkiX$useField({ ...props,\n    labelElementType: 'span'\n  });\n  typeSelectProps.onKeyDown = typeSelectProps.onKeyDownCapture;\n  delete typeSelectProps.onKeyDownCapture;\n  let domProps = $thkiX$filterDOMProps(props, {\n    labelable: true\n  });\n  let triggerProps = $thkiX$mergeProps(typeSelectProps, menuTriggerProps, fieldProps);\n  let valueId = $thkiX$useId();\n  return {\n    labelProps: { ...labelProps,\n      onClick: () => {\n        if (!props.isDisabled) {\n          ref.current.focus(); // Show the focus ring so the user knows where focus went\n\n          $thkiX$setInteractionModality('keyboard');\n        }\n      }\n    },\n    triggerProps: $thkiX$mergeProps(domProps, { ...triggerProps,\n      onKeyDown: $thkiX$chain(triggerProps.onKeyDown, onKeyDown, props.onKeyDown),\n      onKeyUp: props.onKeyUp,\n      'aria-labelledby': [triggerProps['aria-labelledby'], triggerProps['aria-label'] && !triggerProps['aria-labelledby'] ? triggerProps.id : null, valueId].filter(Boolean).join(' '),\n\n      onFocus(e) {\n        if (state.isFocused) return;\n        if (props.onFocus) props.onFocus(e);\n        state.setFocused(true);\n      },\n\n      onBlur(e) {\n        if (state.isOpen) return;\n        if (props.onBlur) props.onBlur(e);\n        state.setFocused(false);\n      }\n\n    }),\n    valueProps: {\n      id: valueId\n    },\n    menuProps: { ...menuProps,\n      autoFocus: state.focusStrategy || true,\n      shouldSelectOnPressUp: true,\n      shouldFocusOnHover: true,\n      disallowEmptySelection: true,\n      onBlur: e => {\n        if (e.currentTarget.contains(e.relatedTarget)) return;\n        if (props.onBlur) props.onBlur(e);\n        state.setFocused(false);\n      },\n      'aria-labelledby': [fieldProps['aria-labelledby'], triggerProps['aria-label'] && !fieldProps['aria-labelledby'] ? triggerProps.id : null].filter(Boolean).join(' ')\n    },\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  };\n}\n\nvar $bdd25dc72710631f$exports = {};\n$parcel$export($bdd25dc72710631f$exports, \"useHiddenSelect\", () => $bdd25dc72710631f$export$f809e80f58e251d1);\n$parcel$export($bdd25dc72710631f$exports, \"HiddenSelect\", () => $bdd25dc72710631f$export$cbd84cdb2e668835);\n\nfunction $bdd25dc72710631f$export$f809e80f58e251d1(props, state, triggerRef) {\n  let {\n    autoComplete: autoComplete,\n    name: name,\n    isDisabled: isDisabled\n  } = props;\n  let modality = $thkiX$useInteractionModality();\n  let {\n    visuallyHiddenProps: visuallyHiddenProps\n  } = $thkiX$useVisuallyHidden();\n\n  var _selectedKey; // In Safari, the <select> cannot have `display: none` or `hidden` for autofill to work.\n  // In Firefox, there must be a <label> to identify the <select> whereas other browsers\n  // seem to identify it just by surrounding text.\n  // The solution is to use <VisuallyHidden> to hide the elements, which clips the elements to a\n  // 1px rectangle. In addition, we hide from screen readers with aria-hidden, and make the <select>\n  // non tabbable with tabIndex={-1}.\n  //\n  // In mobile browsers, there are next/previous buttons above the software keyboard for navigating\n  // between fields in a form. These only support native form inputs that are tabbable. In order to\n  // support those, an additional hidden input is used to marshall focus to the button. It is tabbable\n  // except when the button is focused, so that shift tab works properly to go to the actual previous\n  // input in the form. Using the <select> for this also works, but Safari on iOS briefly flashes\n  // the native menu on focus, so this isn't ideal. A font-size of 16px or greater is required to\n  // prevent Safari from zooming in on the input when it is focused.\n  //\n  // If the current interaction modality is null, then the user hasn't interacted with the page yet.\n  // In this case, we set the tabIndex to -1 on the input element so that automated accessibility\n  // checkers don't throw false-positives about focusable elements inside an aria-hidden parent.\n\n\n  return {\n    containerProps: { ...visuallyHiddenProps,\n      'aria-hidden': true\n    },\n    inputProps: {\n      type: 'text',\n      tabIndex: modality == null || state.isFocused || state.isOpen ? -1 : 0,\n      style: {\n        fontSize: 16\n      },\n      onFocus: () => triggerRef.current.focus(),\n      disabled: isDisabled\n    },\n    selectProps: {\n      tabIndex: -1,\n      autoComplete: autoComplete,\n      disabled: isDisabled,\n      name: name,\n      size: state.collection.size,\n      value: (_selectedKey = state.selectedKey) !== null && _selectedKey !== void 0 ? _selectedKey : '',\n      onChange: e => state.setSelectedKey(e.target.value)\n    }\n  };\n}\n\nfunction $bdd25dc72710631f$export$cbd84cdb2e668835(props) {\n  let {\n    state: state,\n    triggerRef: triggerRef,\n    label: label,\n    name: name,\n    isDisabled: isDisabled\n  } = props;\n  let {\n    containerProps: containerProps,\n    inputProps: inputProps,\n    selectProps: selectProps\n  } = $bdd25dc72710631f$export$f809e80f58e251d1(props, state, triggerRef); // If used in a <form>, use a hidden input so the value can be submitted to a server.\n  // If the collection isn't too big, use a hidden <select> element for this so that browser\n  // autofill will work. Otherwise, use an <input type=\"hidden\">.\n\n  if (state.collection.size <= 300) return /*#__PURE__*/$thkiX$react.createElement(\"div\", containerProps, /*#__PURE__*/$thkiX$react.createElement(\"input\", inputProps), /*#__PURE__*/$thkiX$react.createElement(\"label\", null, label, /*#__PURE__*/$thkiX$react.createElement(\"select\", selectProps, /*#__PURE__*/$thkiX$react.createElement(\"option\", null), [...state.collection.getKeys()].map(key => {\n    let item = state.collection.getItem(key);\n    if (item.type === 'item') return /*#__PURE__*/$thkiX$react.createElement(\"option\", {\n      key: item.key,\n      value: item.key\n    }, item.textValue);\n  }))));else if (name) return /*#__PURE__*/$thkiX$react.createElement(\"input\", {\n    type: \"hidden\",\n    autoComplete: selectProps.autoComplete,\n    name: name,\n    disabled: isDisabled,\n    value: state.selectedKey\n  });\n  return null;\n}\n\nexport { $58aed456727eb0f3$export$e64b2f635402ca43 as useSelect, $bdd25dc72710631f$export$f809e80f58e251d1 as useHiddenSelect, $bdd25dc72710631f$export$cbd84cdb2e668835 as HiddenSelect };","map":{"version":3,"mappings":"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","names":["$58aed456727eb0f3$export$e64b2f635402ca43","props","state","ref","keyboardDelegate","isDisabled","collator","$thkiX$useCollator","usage","sensitivity","delegate","$thkiX$useMemo","$thkiX$ListKeyboardDelegate","collection","disabledKeys","menuTriggerProps","menuProps","$thkiX$useMenuTrigger","type","onKeyDown","e","key","preventDefault","selectedKey","getKeyAbove","getFirstKey","setSelectedKey","getKeyBelow","typeSelectProps","$thkiX$useTypeSelect","selectionManager","onTypeSelect","labelProps","fieldProps","descriptionProps","errorMessageProps","$thkiX$useField","labelElementType","onKeyDownCapture","domProps","$thkiX$filterDOMProps","labelable","triggerProps","$thkiX$mergeProps","valueId","$thkiX$useId","onClick","current","focus","$thkiX$setInteractionModality","$thkiX$chain","onKeyUp","id","filter","Boolean","join","onFocus","isFocused","setFocused","onBlur","isOpen","valueProps","autoFocus","focusStrategy","shouldSelectOnPressUp","shouldFocusOnHover","disallowEmptySelection","currentTarget","contains","relatedTarget","$bdd25dc72710631f$export$f809e80f58e251d1","triggerRef","autoComplete","name","modality","$thkiX$useInteractionModality","visuallyHiddenProps","$thkiX$useVisuallyHidden","_selectedKey","containerProps","inputProps","tabIndex","style","fontSize","disabled","selectProps","size","value","onChange","target","$bdd25dc72710631f$export$cbd84cdb2e668835","label","getKeys","map","item","getItem","textValue"],"sources":["C:\\Users\\ev3rg\\OneDrive\\Documents\\GitHub\\gt-bigdata-website\\node_modules\\@react-aria\\select\\dist\\packages\\@react-aria\\select\\src\\useSelect.ts","C:\\Users\\ev3rg\\OneDrive\\Documents\\GitHub\\gt-bigdata-website\\node_modules\\@react-aria\\select\\dist\\packages\\@react-aria\\select\\src\\HiddenSelect.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonProps} from '@react-types/button';\nimport {AriaListBoxOptions} from '@react-aria/listbox';\nimport {AriaSelectProps} from '@react-types/select';\nimport {chain, filterDOMProps, mergeProps, useId} from '@react-aria/utils';\nimport {FocusEvent, HTMLAttributes, RefObject, useMemo} from 'react';\nimport {KeyboardDelegate} from '@react-types/shared';\nimport {ListKeyboardDelegate, useTypeSelect} from '@react-aria/selection';\nimport {SelectState} from '@react-stately/select';\nimport {setInteractionModality} from '@react-aria/interactions';\nimport {useCollator} from '@react-aria/i18n';\nimport {useField} from '@react-aria/label';\nimport {useMenuTrigger} from '@react-aria/menu';\n\ninterface AriaSelectOptions<T> extends AriaSelectProps<T> {\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate\n}\n\ninterface SelectAria {\n  /** Props for the label element. */\n  labelProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the popup trigger element. */\n  triggerProps: AriaButtonProps,\n\n  /** Props for the element representing the selected value. */\n  valueProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the popup. */\n  menuProps: AriaListBoxOptions<unknown>,\n\n  /** Props for the select's description element, if any. */\n  descriptionProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the select's error message element, if any. */\n  errorMessageProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a select component.\n * A select displays a collapsible list of options and allows a user to select one of them.\n * @param props - Props for the select.\n * @param state - State for the select, as returned by `useListState`.\n */\nexport function useSelect<T>(props: AriaSelectOptions<T>, state: SelectState<T>, ref: RefObject<HTMLElement>): SelectAria {\n  let {\n    keyboardDelegate,\n    isDisabled\n  } = props;\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({usage: 'search', sensitivity: 'base'});\n  let delegate = useMemo(() => keyboardDelegate || new ListKeyboardDelegate(state.collection, state.disabledKeys, null, collator), [keyboardDelegate, state.collection, state.disabledKeys, collator]);\n\n  let {menuTriggerProps, menuProps} = useMenuTrigger(\n    {\n      isDisabled,\n      type: 'listbox'\n    },\n    state,\n    ref\n  );\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    switch (e.key) {\n      case 'ArrowLeft': {\n        // prevent scrolling containers\n        e.preventDefault();\n\n        let key = state.selectedKey != null ? delegate.getKeyAbove(state.selectedKey) : delegate.getFirstKey();\n        if (key) {\n          state.setSelectedKey(key);\n        }\n        break;\n      }\n      case 'ArrowRight': {\n        // prevent scrolling containers\n        e.preventDefault();\n\n        let key = state.selectedKey != null ? delegate.getKeyBelow(state.selectedKey) : delegate.getFirstKey();\n        if (key) {\n          state.setSelectedKey(key);\n        }\n        break;\n      }\n    }\n  };\n\n  let {typeSelectProps} = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: state.selectionManager,\n    onTypeSelect(key) {\n      state.setSelectedKey(key);\n    }\n  });\n\n  let {labelProps, fieldProps, descriptionProps, errorMessageProps} = useField({\n    ...props,\n    labelElementType: 'span'\n  });\n\n  typeSelectProps.onKeyDown = typeSelectProps.onKeyDownCapture;\n  delete typeSelectProps.onKeyDownCapture;\n\n  let domProps = filterDOMProps(props, {labelable: true});\n  let triggerProps = mergeProps(typeSelectProps, menuTriggerProps, fieldProps);\n\n  let valueId = useId();\n\n  return {\n    labelProps: {\n      ...labelProps,\n      onClick: () => {\n        if (!props.isDisabled) {\n          ref.current.focus();\n\n          // Show the focus ring so the user knows where focus went\n          setInteractionModality('keyboard');\n        }\n      }\n    },\n    triggerProps: mergeProps(domProps, {\n      ...triggerProps,\n      onKeyDown: chain(triggerProps.onKeyDown, onKeyDown, props.onKeyDown),\n      onKeyUp: props.onKeyUp,\n      'aria-labelledby': [\n        triggerProps['aria-labelledby'],\n        triggerProps['aria-label'] && !triggerProps['aria-labelledby'] ? triggerProps.id : null,\n        valueId\n      ].filter(Boolean).join(' '),\n      onFocus(e: FocusEvent) {\n        if (state.isFocused) {\n          return;\n        }\n\n        if (props.onFocus) {\n          props.onFocus(e);\n        }\n\n        state.setFocused(true);\n      },\n      onBlur(e: FocusEvent) {\n        if (state.isOpen) {\n          return;\n        }\n\n        if (props.onBlur) {\n          props.onBlur(e);\n        }\n\n        state.setFocused(false);\n      }\n    }),\n    valueProps: {\n      id: valueId\n    },\n    menuProps: {\n      ...menuProps,\n      autoFocus: state.focusStrategy || true,\n      shouldSelectOnPressUp: true,\n      shouldFocusOnHover: true,\n      disallowEmptySelection: true,\n      onBlur: (e) => {\n        if (e.currentTarget.contains(e.relatedTarget as Node)) {\n          return;\n        }\n\n        if (props.onBlur) {\n          props.onBlur(e);\n        }\n        state.setFocused(false);\n      },\n      'aria-labelledby': [\n        fieldProps['aria-labelledby'],\n        triggerProps['aria-label'] && !fieldProps['aria-labelledby'] ? triggerProps.id : null\n      ].filter(Boolean).join(' ')\n    },\n    descriptionProps,\n    errorMessageProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React, {ReactNode, RefObject} from 'react';\nimport {SelectState} from '@react-stately/select';\nimport {useInteractionModality} from '@react-aria/interactions';\nimport {useVisuallyHidden} from '@react-aria/visually-hidden';\n\ninterface AriaHiddenSelectProps {\n  /**\n   * Describes the type of autocomplete functionality the input should provide if any. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautocomplete).\n   */\n   autoComplete?: string,\n\n  /** The text label for the select. */\n  label?: ReactNode,\n\n  /** HTML form input name. */\n  name?: string,\n\n  /** Sets the disabled state of the select and input. */\n  isDisabled?: boolean\n}\n\ninterface HiddenSelectProps<T> extends AriaHiddenSelectProps {\n  /** State for the select. */\n  state: SelectState<T>,\n\n  /** A ref to the trigger element. */\n  triggerRef: RefObject<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a hidden `<select>` element, which\n * can be used in combination with `useSelect` to support browser form autofill, mobile form\n * navigation, and native HTML form submission.\n */\nexport function useHiddenSelect<T>(props: AriaHiddenSelectProps, state: SelectState<T>, triggerRef: RefObject<HTMLElement>) {\n  let {autoComplete, name, isDisabled} = props;\n  let modality = useInteractionModality();\n  let {visuallyHiddenProps} = useVisuallyHidden();\n\n  // In Safari, the <select> cannot have `display: none` or `hidden` for autofill to work.\n  // In Firefox, there must be a <label> to identify the <select> whereas other browsers\n  // seem to identify it just by surrounding text.\n  // The solution is to use <VisuallyHidden> to hide the elements, which clips the elements to a\n  // 1px rectangle. In addition, we hide from screen readers with aria-hidden, and make the <select>\n  // non tabbable with tabIndex={-1}.\n  //\n  // In mobile browsers, there are next/previous buttons above the software keyboard for navigating\n  // between fields in a form. These only support native form inputs that are tabbable. In order to\n  // support those, an additional hidden input is used to marshall focus to the button. It is tabbable\n  // except when the button is focused, so that shift tab works properly to go to the actual previous\n  // input in the form. Using the <select> for this also works, but Safari on iOS briefly flashes\n  // the native menu on focus, so this isn't ideal. A font-size of 16px or greater is required to\n  // prevent Safari from zooming in on the input when it is focused.\n  //\n  // If the current interaction modality is null, then the user hasn't interacted with the page yet.\n  // In this case, we set the tabIndex to -1 on the input element so that automated accessibility\n  // checkers don't throw false-positives about focusable elements inside an aria-hidden parent.\n  return {\n    containerProps: {\n      ...visuallyHiddenProps,\n      'aria-hidden': true\n    },\n    inputProps: {\n      type: 'text',\n      tabIndex: modality == null || state.isFocused || state.isOpen ? -1 : 0,\n      style: {fontSize: 16},\n      onFocus: () => triggerRef.current.focus(),\n      disabled: isDisabled\n    },\n    selectProps: {\n      tabIndex: -1,\n      autoComplete,\n      disabled: isDisabled,\n      name,\n      size: state.collection.size,\n      value: state.selectedKey ?? '',\n      onChange: (e: React.ChangeEvent<HTMLSelectElement>) => state.setSelectedKey(e.target.value)\n    }\n  };\n}\n\n/**\n * Renders a hidden native `<select>` element, which can be used to support browser\n * form autofill, mobile form navigation, and native form submission.\n */\nexport function HiddenSelect<T>(props: HiddenSelectProps<T>) {\n  let {state, triggerRef, label, name, isDisabled} = props;\n  let {containerProps, inputProps, selectProps} = useHiddenSelect(props, state, triggerRef);\n\n  // If used in a <form>, use a hidden input so the value can be submitted to a server.\n  // If the collection isn't too big, use a hidden <select> element for this so that browser\n  // autofill will work. Otherwise, use an <input type=\"hidden\">.\n  if (state.collection.size <= 300) {\n    return (\n      <div {...containerProps}>\n        <input {...inputProps} />\n        <label>\n          {label}\n          <select {...selectProps}>\n            <option />\n            {[...state.collection.getKeys()].map(key => {\n              let item = state.collection.getItem(key);\n              if (item.type === 'item') {\n                return (\n                  <option\n                    key={item.key}\n                    value={item.key}>\n                    {item.textValue}\n                  </option>\n                );\n              }\n            })}\n          </select>\n        </label>\n      </div>\n    );\n  } else if (name) {\n    return (\n      <input\n        type=\"hidden\"\n        autoComplete={selectProps.autoComplete}\n        name={name}\n        disabled={isDisabled}\n        value={state.selectedKey} />\n    );\n  }\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}