{"ast":null,"code":"import \"./main.css\";\nimport { useLayoutEffect as $evhxb$useLayoutEffect, chain as $evhxb$chain, mergeProps as $evhxb$mergeProps } from \"@react-aria/utils\";\nimport $evhxb$react, { useRef as $evhxb$useRef, useCallback as $evhxb$useCallback, useImperativeHandle as $evhxb$useImperativeHandle, cloneElement as $evhxb$cloneElement, forwardRef as $evhxb$forwardRef } from \"react\";\nimport { useControlledState as $evhxb$useControlledState } from \"@react-stately/utils\";\nimport { useProviderProps as $evhxb$useProviderProps } from \"@react-spectrum/provider\";\nimport { useTextField as $evhxb$useTextField } from \"@react-aria/textfield\";\nimport $evhxb$spectrumiconsuiAlertMedium from \"@spectrum-icons/ui/AlertMedium\";\nimport $evhxb$spectrumiconsuiCheckmarkMedium from \"@spectrum-icons/ui/CheckmarkMedium\";\nimport { createFocusableRef as $evhxb$createFocusableRef, classNames as $evhxb$classNames } from \"@react-spectrum/utils\";\nimport { Field as $evhxb$Field } from \"@react-spectrum/label\";\nimport { FocusRing as $evhxb$FocusRing } from \"@react-aria/focus\";\nimport { useHover as $evhxb$useHover } from \"@react-aria/interactions\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nvar $cc187bf91f8eea73$exports = {};\n$parcel$export($cc187bf91f8eea73$exports, \"TextArea\", () => $cc187bf91f8eea73$export$f5c9f3c2c4054eec);\nvar $599adb75312e6492$exports = {};\n$parcel$export($599adb75312e6492$exports, \"TextFieldBase\", () => $599adb75312e6492$export$d22444a338b6e3c2);\nvar $c14528ddc146317f$exports = {};\n$parcel$export($c14528ddc146317f$exports, \"spectrum-Textfield-input\", () => $c14528ddc146317f$export$1ac009feb2b0bd0c, v => $c14528ddc146317f$export$1ac009feb2b0bd0c = v);\n$parcel$export($c14528ddc146317f$exports, \"spectrum-Textfield\", () => $c14528ddc146317f$export$2c8a10299d8b3418, v => $c14528ddc146317f$export$2c8a10299d8b3418 = v);\n$parcel$export($c14528ddc146317f$exports, \"spectrum-Textfield--quiet\", () => $c14528ddc146317f$export$bffd5e3d61a81737, v => $c14528ddc146317f$export$bffd5e3d61a81737 = v);\n$parcel$export($c14528ddc146317f$exports, \"spectrum-Textfield--multiline\", () => $c14528ddc146317f$export$9699f1c538a448a0, v => $c14528ddc146317f$export$9699f1c538a448a0 = v);\n$parcel$export($c14528ddc146317f$exports, \"is-placeholder\", () => $c14528ddc146317f$export$e5b2f5233e4e5194, v => $c14528ddc146317f$export$e5b2f5233e4e5194 = v);\n$parcel$export($c14528ddc146317f$exports, \"is-hovered\", () => $c14528ddc146317f$export$b8813cd5d7824ce7, v => $c14528ddc146317f$export$b8813cd5d7824ce7 = v);\n$parcel$export($c14528ddc146317f$exports, \"spectrum-Textfield--valid\", () => $c14528ddc146317f$export$c2abbc3f970170b7, v => $c14528ddc146317f$export$c2abbc3f970170b7 = v);\n$parcel$export($c14528ddc146317f$exports, \"spectrum-Textfield--invalid\", () => $c14528ddc146317f$export$58e50b10d30123df, v => $c14528ddc146317f$export$58e50b10d30123df = v);\n$parcel$export($c14528ddc146317f$exports, \"spectrum-Textfield--loadable\", () => $c14528ddc146317f$export$14fd30fea6f1348c, v => $c14528ddc146317f$export$14fd30fea6f1348c = v);\n$parcel$export($c14528ddc146317f$exports, \"spectrum-Textfield-validationIcon\", () => $c14528ddc146317f$export$cf0ead5b44db0da3, v => $c14528ddc146317f$export$cf0ead5b44db0da3 = v);\n$parcel$export($c14528ddc146317f$exports, \"spectrum-Textfield-icon\", () => $c14528ddc146317f$export$222d1ccd1870be1d, v => $c14528ddc146317f$export$222d1ccd1870be1d = v);\n$parcel$export($c14528ddc146317f$exports, \"spectrum-Textfield-inputIcon\", () => $c14528ddc146317f$export$c1cdcaa5fe76a871, v => $c14528ddc146317f$export$c1cdcaa5fe76a871 = v);\n$parcel$export($c14528ddc146317f$exports, \"spectrum-Textfield-circleLoader\", () => $c14528ddc146317f$export$82a249fb4d6127, v => $c14528ddc146317f$export$82a249fb4d6127 = v);\n$parcel$export($c14528ddc146317f$exports, \"is-focused\", () => $c14528ddc146317f$export$e7dc768d35940237, v => $c14528ddc146317f$export$e7dc768d35940237 = v);\n$parcel$export($c14528ddc146317f$exports, \"focus-ring\", () => $c14528ddc146317f$export$f39a09f249340e2a, v => $c14528ddc146317f$export$f39a09f249340e2a = v);\n$parcel$export($c14528ddc146317f$exports, \"is-disabled\", () => $c14528ddc146317f$export$d35bc1e505d1ebbf, v => $c14528ddc146317f$export$d35bc1e505d1ebbf = v);\nvar $c14528ddc146317f$export$1ac009feb2b0bd0c;\nvar $c14528ddc146317f$export$2c8a10299d8b3418;\nvar $c14528ddc146317f$export$bffd5e3d61a81737;\nvar $c14528ddc146317f$export$9699f1c538a448a0;\nvar $c14528ddc146317f$export$e5b2f5233e4e5194;\nvar $c14528ddc146317f$export$b8813cd5d7824ce7;\nvar $c14528ddc146317f$export$c2abbc3f970170b7;\nvar $c14528ddc146317f$export$58e50b10d30123df;\nvar $c14528ddc146317f$export$14fd30fea6f1348c;\nvar $c14528ddc146317f$export$cf0ead5b44db0da3;\nvar $c14528ddc146317f$export$222d1ccd1870be1d;\nvar $c14528ddc146317f$export$c1cdcaa5fe76a871;\nvar $c14528ddc146317f$export$82a249fb4d6127;\nvar $c14528ddc146317f$export$e7dc768d35940237;\nvar $c14528ddc146317f$export$f39a09f249340e2a;\nvar $c14528ddc146317f$export$d35bc1e505d1ebbf;\n$c14528ddc146317f$export$1ac009feb2b0bd0c = \"spectrum-Textfield-input_73bc77\";\n$c14528ddc146317f$export$2c8a10299d8b3418 = \"spectrum-Textfield_73bc77\";\n$c14528ddc146317f$export$bffd5e3d61a81737 = \"spectrum-Textfield--quiet_73bc77\";\n$c14528ddc146317f$export$9699f1c538a448a0 = \"spectrum-Textfield--multiline_73bc77\";\n$c14528ddc146317f$export$e5b2f5233e4e5194 = \"is-placeholder_73bc77\";\n$c14528ddc146317f$export$b8813cd5d7824ce7 = \"is-hovered_73bc77\";\n$c14528ddc146317f$export$c2abbc3f970170b7 = \"spectrum-Textfield--valid_73bc77\";\n$c14528ddc146317f$export$58e50b10d30123df = \"spectrum-Textfield--invalid_73bc77\";\n$c14528ddc146317f$export$14fd30fea6f1348c = \"spectrum-Textfield--loadable_73bc77\";\n$c14528ddc146317f$export$cf0ead5b44db0da3 = \"spectrum-Textfield-validationIcon_73bc77\";\n$c14528ddc146317f$export$222d1ccd1870be1d = \"spectrum-Textfield-icon_73bc77\";\n$c14528ddc146317f$export$c1cdcaa5fe76a871 = \"spectrum-Textfield-inputIcon_73bc77\";\n$c14528ddc146317f$export$82a249fb4d6127 = \"spectrum-Textfield-circleLoader_73bc77\";\n$c14528ddc146317f$export$e7dc768d35940237 = \"is-focused_73bc77\";\n$c14528ddc146317f$export$f39a09f249340e2a = \"focus-ring_73bc77\";\n$c14528ddc146317f$export$d35bc1e505d1ebbf = \"is-disabled_73bc77\";\n\nfunction $599adb75312e6492$var$TextFieldBase(props, ref) {\n  let {\n    label: label,\n    validationState: validationState,\n    icon: icon,\n    isQuiet = false,\n    isDisabled: isDisabled,\n    multiLine: multiLine,\n    autoFocus: autoFocus,\n    inputClassName: inputClassName,\n    wrapperChildren: wrapperChildren,\n    labelProps: labelProps,\n    inputProps: inputProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps,\n    inputRef: inputRef,\n    isLoading: isLoading,\n    loadingIndicator: loadingIndicator,\n    validationIconClassName: validationIconClassName\n  } = props;\n  let {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  } = $evhxb$useHover({\n    isDisabled: isDisabled\n  });\n  let domRef = $evhxb$useRef(null);\n  let defaultInputRef = $evhxb$useRef(null);\n  inputRef = inputRef || defaultInputRef; // Expose imperative interface for ref\n\n  $evhxb$useImperativeHandle(ref, () => ({ ...$evhxb$createFocusableRef(domRef, inputRef),\n\n    select() {\n      if (inputRef.current) inputRef.current.select();\n    },\n\n    getInputElement() {\n      return inputRef.current;\n    }\n\n  }));\n  let ElementType = multiLine ? 'textarea' : 'input';\n  let isInvalid = validationState === 'invalid';\n\n  if (icon) {\n    let UNSAFE_className = $evhxb$classNames( /*@__PURE__*/$parcel$interopDefault($c14528ddc146317f$exports), icon.props && icon.props.UNSAFE_className, 'spectrum-Textfield-icon');\n    icon = /*#__PURE__*/$evhxb$cloneElement(icon, {\n      UNSAFE_className: UNSAFE_className,\n      size: 'S'\n    });\n  }\n\n  let validationIcon = isInvalid ? /*#__PURE__*/$evhxb$react.createElement($evhxb$spectrumiconsuiAlertMedium, null) : /*#__PURE__*/$evhxb$react.createElement($evhxb$spectrumiconsuiCheckmarkMedium, null);\n  let validation = /*#__PURE__*/$evhxb$cloneElement(validationIcon, {\n    UNSAFE_className: $evhxb$classNames( /*@__PURE__*/$parcel$interopDefault($c14528ddc146317f$exports), 'spectrum-Textfield-validationIcon', validationIconClassName)\n  });\n  let textField = /*#__PURE__*/$evhxb$react.createElement(\"div\", {\n    className: $evhxb$classNames( /*@__PURE__*/$parcel$interopDefault($c14528ddc146317f$exports), 'spectrum-Textfield', {\n      'spectrum-Textfield--invalid': isInvalid,\n      'spectrum-Textfield--valid': validationState === 'valid',\n      'spectrum-Textfield--loadable': loadingIndicator,\n      'spectrum-Textfield--quiet': isQuiet,\n      'spectrum-Textfield--multiline': multiLine\n    })\n  }, /*#__PURE__*/$evhxb$react.createElement($evhxb$FocusRing, {\n    focusRingClass: $evhxb$classNames( /*@__PURE__*/$parcel$interopDefault($c14528ddc146317f$exports), 'focus-ring'),\n    isTextInput: true,\n    autoFocus: autoFocus\n  }, /*#__PURE__*/$evhxb$react.createElement(ElementType, { ...$evhxb$mergeProps(inputProps, hoverProps),\n    ref: inputRef,\n    rows: multiLine ? 1 : undefined,\n    className: $evhxb$classNames( /*@__PURE__*/$parcel$interopDefault($c14528ddc146317f$exports), 'spectrum-Textfield-input', {\n      'spectrum-Textfield-inputIcon': icon,\n      'is-hovered': isHovered\n    }, inputClassName)\n  })), icon, validationState && !isLoading ? validation : null, isLoading && loadingIndicator, wrapperChildren);\n  if (label) textField = /*#__PURE__*/$evhxb$react.cloneElement(textField, $evhxb$mergeProps(textField.props, {\n    className: multiLine ? 'spectrum-Field-field--multiline' : ''\n  }));\n  return /*#__PURE__*/$evhxb$react.createElement($evhxb$Field, { ...props,\n    labelProps: labelProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps,\n    showErrorIcon: false,\n    ref: domRef\n  }, textField);\n}\n\nconst $599adb75312e6492$export$d22444a338b6e3c2 = /*#__PURE__*/$evhxb$forwardRef($599adb75312e6492$var$TextFieldBase);\n\nfunction $cc187bf91f8eea73$var$TextArea(props, ref) {\n  props = $evhxb$useProviderProps(props);\n  let {\n    isDisabled = false,\n    isQuiet = false,\n    isReadOnly = false,\n    isRequired = false,\n    onChange: onChange,\n    ...otherProps\n  } = props; // not in stately because this is so we know when to re-measure, which is a spectrum design\n\n  let [inputValue, setInputValue] = $evhxb$useControlledState(props.value, props.defaultValue, () => {});\n  let inputRef = $evhxb$useRef();\n  let onHeightChange = $evhxb$useCallback(() => {\n    if (isQuiet) {\n      let input = inputRef.current;\n      let prevAlignment = input.style.alignSelf;\n      input.style.alignSelf = 'start';\n      input.style.height = 'auto';\n      input.style.height = `${input.scrollHeight}px`;\n      input.style.alignSelf = prevAlignment;\n    }\n  }, [isQuiet, inputRef]);\n  $evhxb$useLayoutEffect(() => {\n    if (inputRef.current) onHeightChange();\n  }, [onHeightChange, inputValue, inputRef]);\n  let {\n    labelProps: labelProps,\n    inputProps: inputProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  } = $evhxb$useTextField({ ...props,\n    onChange: $evhxb$chain(onChange, setInputValue),\n    inputElementType: 'textarea'\n  }, inputRef);\n  return /*#__PURE__*/$evhxb$react.createElement($599adb75312e6492$export$d22444a338b6e3c2, { ...otherProps,\n    ref: ref,\n    inputRef: inputRef,\n    labelProps: labelProps,\n    inputProps: inputProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps,\n    multiLine: true,\n    isDisabled: isDisabled,\n    isQuiet: isQuiet,\n    isReadOnly: isReadOnly,\n    isRequired: isRequired\n  });\n}\n/**\n * TextAreas are multiline text inputs, useful for cases where users have\n * a sizable amount of text to enter. They allow for all customizations that\n * are available to text fields.\n */\n\n\nlet $cc187bf91f8eea73$export$f5c9f3c2c4054eec = /*#__PURE__*/$evhxb$react.forwardRef($cc187bf91f8eea73$var$TextArea);\nvar $265457f9427aa380$exports = {};\n$parcel$export($265457f9427aa380$exports, \"TextField\", () => $265457f9427aa380$export$2c73285ae9390cec);\n\nfunction $265457f9427aa380$var$TextField(props, ref) {\n  props = $evhxb$useProviderProps(props);\n  let inputRef = $evhxb$useRef();\n  let {\n    labelProps: labelProps,\n    inputProps: inputProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  } = $evhxb$useTextField(props, inputRef);\n  return /*#__PURE__*/$evhxb$react.createElement($599adb75312e6492$export$d22444a338b6e3c2, { ...props,\n    labelProps: labelProps,\n    inputProps: inputProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps,\n    ref: ref,\n    inputRef: inputRef\n  });\n}\n/**\n * TextFields are text inputs that allow users to input custom text entries\n * with a keyboard. Various decorations can be displayed around the field to\n * communicate the entry requirements.\n */\n\n\nconst $265457f9427aa380$export$2c73285ae9390cec = /*#__PURE__*/$evhxb$forwardRef($265457f9427aa380$var$TextField);\nexport { $cc187bf91f8eea73$export$f5c9f3c2c4054eec as TextArea, $265457f9427aa380$export$2c73285ae9390cec as TextField, $599adb75312e6492$export$d22444a338b6e3c2 as TextFieldBase };","map":{"version":3,"mappings":"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","names":["$c14528ddc146317f$export$1ac009feb2b0bd0c","$c14528ddc146317f$export$2c8a10299d8b3418","$c14528ddc146317f$export$bffd5e3d61a81737","$c14528ddc146317f$export$9699f1c538a448a0","$c14528ddc146317f$export$e5b2f5233e4e5194","$c14528ddc146317f$export$b8813cd5d7824ce7","$c14528ddc146317f$export$c2abbc3f970170b7","$c14528ddc146317f$export$58e50b10d30123df","$c14528ddc146317f$export$14fd30fea6f1348c","$c14528ddc146317f$export$cf0ead5b44db0da3","$c14528ddc146317f$export$222d1ccd1870be1d","$c14528ddc146317f$export$c1cdcaa5fe76a871","$c14528ddc146317f$export$82a249fb4d6127","$c14528ddc146317f$export$e7dc768d35940237","$c14528ddc146317f$export$f39a09f249340e2a","$c14528ddc146317f$export$d35bc1e505d1ebbf","$599adb75312e6492$var$TextFieldBase","props","ref","label","validationState","icon","isQuiet","isDisabled","multiLine","autoFocus","inputClassName","wrapperChildren","labelProps","inputProps","descriptionProps","errorMessageProps","inputRef","isLoading","loadingIndicator","validationIconClassName","hoverProps","isHovered","$evhxb$useHover","domRef","$evhxb$useRef","defaultInputRef","$evhxb$useImperativeHandle","$evhxb$createFocusableRef","select","current","getInputElement","ElementType","isInvalid","UNSAFE_className","$evhxb$classNames","$evhxb$cloneElement","size","validationIcon","$evhxb$spectrumiconsuiAlertMedium","$evhxb$spectrumiconsuiCheckmarkMedium","validation","textField","className","$evhxb$FocusRing","focusRingClass","isTextInput","$evhxb$mergeProps","rows","undefined","$evhxb$react","cloneElement","$evhxb$Field","showErrorIcon","$599adb75312e6492$export$d22444a338b6e3c2","$evhxb$forwardRef","$cc187bf91f8eea73$var$TextArea","$evhxb$useProviderProps","isReadOnly","isRequired","onChange","otherProps","inputValue","setInputValue","$evhxb$useControlledState","value","defaultValue","onHeightChange","$evhxb$useCallback","input","prevAlignment","style","alignSelf","height","scrollHeight","$evhxb$useLayoutEffect","$evhxb$useTextField","$evhxb$chain","inputElementType","$cc187bf91f8eea73$export$f5c9f3c2c4054eec","forwardRef","$265457f9427aa380$var$TextField","$265457f9427aa380$export$2c73285ae9390cec"],"sources":["C:\\Users\\ev3rg\\OneDrive\\Documents\\GitHub\\gt-bigdata-website\\node_modules\\@react-spectrum\\textfield\\dist\\packages\\@adobe\\spectrum-css-temp\\components\\textfield\\vars.css","C:\\Users\\ev3rg\\OneDrive\\Documents\\GitHub\\gt-bigdata-website\\node_modules\\@react-spectrum\\textfield\\dist\\packages\\@react-spectrum\\textfield\\src\\TextFieldBase.tsx","C:\\Users\\ev3rg\\OneDrive\\Documents\\GitHub\\gt-bigdata-website\\node_modules\\@react-spectrum\\textfield\\dist\\packages\\@react-spectrum\\textfield\\src\\TextArea.tsx","C:\\Users\\ev3rg\\OneDrive\\Documents\\GitHub\\gt-bigdata-website\\node_modules\\@react-spectrum\\textfield\\dist\\packages\\@react-spectrum\\textfield\\src\\TextField.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n@import './index.css';\n@import './skin.css';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport AlertMedium from '@spectrum-icons/ui/AlertMedium';\nimport CheckmarkMedium from '@spectrum-icons/ui/CheckmarkMedium';\nimport {classNames, createFocusableRef} from '@react-spectrum/utils';\nimport {Field} from '@react-spectrum/label';\nimport {FocusRing} from '@react-aria/focus';\nimport {mergeProps} from '@react-aria/utils';\nimport {PressEvents} from '@react-types/shared';\nimport React, {cloneElement, forwardRef, HTMLAttributes, InputHTMLAttributes, LabelHTMLAttributes, ReactElement, Ref, RefObject, TextareaHTMLAttributes, useImperativeHandle, useRef} from 'react';\nimport {SpectrumTextFieldProps, TextFieldRef} from '@react-types/textfield';\nimport styles from '@adobe/spectrum-css-temp/components/textfield/vars.css';\nimport {useHover} from '@react-aria/interactions';\n\ninterface TextFieldBaseProps extends Omit<SpectrumTextFieldProps, 'onChange'>, PressEvents {\n  wrapperChildren?: ReactElement | ReactElement[],\n  inputClassName?: string,\n  validationIconClassName?: string,\n  multiLine?: boolean,\n  labelProps?: LabelHTMLAttributes<HTMLLabelElement>,\n  inputProps: InputHTMLAttributes<HTMLInputElement> | TextareaHTMLAttributes<HTMLTextAreaElement>,\n  descriptionProps?: HTMLAttributes<HTMLElement>,\n  errorMessageProps?: HTMLAttributes<HTMLElement>,\n  inputRef?: RefObject<HTMLInputElement | HTMLTextAreaElement>,\n  loadingIndicator?: ReactElement,\n  isLoading?: boolean\n}\n\nfunction TextFieldBase(props: TextFieldBaseProps, ref: Ref<TextFieldRef>) {\n  let {\n    label,\n    validationState,\n    icon,\n    isQuiet = false,\n    isDisabled,\n    multiLine,\n    autoFocus,\n    inputClassName,\n    wrapperChildren,\n    labelProps,\n    inputProps,\n    descriptionProps,\n    errorMessageProps,\n    inputRef,\n    isLoading,\n    loadingIndicator,\n    validationIconClassName\n  } = props;\n  let {hoverProps, isHovered} = useHover({isDisabled});\n  let domRef = useRef<HTMLDivElement>(null);\n  let defaultInputRef = useRef<HTMLInputElement | HTMLTextAreaElement>(null);\n  inputRef = inputRef || defaultInputRef;\n\n  // Expose imperative interface for ref\n  useImperativeHandle(ref, () => ({\n    ...createFocusableRef(domRef, inputRef),\n    select() {\n      if (inputRef.current) {\n        inputRef.current.select();\n      }\n    },\n    getInputElement() {\n      return inputRef.current;\n    }\n  }));\n\n  let ElementType: React.ElementType = multiLine ? 'textarea' : 'input';\n  let isInvalid = validationState === 'invalid';\n\n  if (icon) {\n    let UNSAFE_className = classNames(\n      styles,\n      icon.props && icon.props.UNSAFE_className,\n      'spectrum-Textfield-icon'\n    );\n\n    icon = cloneElement(icon, {\n      UNSAFE_className,\n      size: 'S'\n    });\n  }\n\n  let validationIcon = isInvalid ? <AlertMedium /> : <CheckmarkMedium />;\n  let validation = cloneElement(validationIcon, {\n    UNSAFE_className: classNames(\n      styles,\n      'spectrum-Textfield-validationIcon',\n      validationIconClassName\n    )\n  });\n\n  let textField = (\n    <div\n      className={\n        classNames(\n          styles,\n          'spectrum-Textfield',\n          {\n            'spectrum-Textfield--invalid': isInvalid,\n            'spectrum-Textfield--valid': validationState === 'valid',\n            'spectrum-Textfield--loadable': loadingIndicator,\n            'spectrum-Textfield--quiet': isQuiet,\n            'spectrum-Textfield--multiline': multiLine\n          }\n        )\n      }>\n      <FocusRing focusRingClass={classNames(styles, 'focus-ring')} isTextInput autoFocus={autoFocus}>\n        <ElementType\n          {...mergeProps(inputProps, hoverProps)}\n          ref={inputRef as any}\n          rows={multiLine ? 1 : undefined}\n          className={\n            classNames(\n              styles,\n              'spectrum-Textfield-input',\n              {\n                'spectrum-Textfield-inputIcon': icon,\n                'is-hovered': isHovered\n              },\n              inputClassName\n            )\n          } />\n      </FocusRing>\n      {icon}\n      {validationState && !isLoading ? validation : null}\n      {isLoading && loadingIndicator}\n      {wrapperChildren}\n    </div>\n  );\n\n  if (label) {\n    textField = React.cloneElement(textField, mergeProps(textField.props, {\n      className: multiLine ? 'spectrum-Field-field--multiline' : ''\n    }));\n  }\n\n  return (\n    <Field\n      {...props}\n      labelProps={labelProps}\n      descriptionProps={descriptionProps}\n      errorMessageProps={errorMessageProps}\n      showErrorIcon={false}\n      ref={domRef}>\n      {textField}\n    </Field>\n  );\n}\n\nconst _TextFieldBase = forwardRef(TextFieldBase);\nexport {_TextFieldBase as TextFieldBase};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {chain, useLayoutEffect} from '@react-aria/utils';\nimport React, {RefObject, useCallback, useRef} from 'react';\nimport {SpectrumTextFieldProps, TextFieldRef} from '@react-types/textfield';\nimport {TextFieldBase} from './TextFieldBase';\nimport {useControlledState} from '@react-stately/utils';\nimport {useProviderProps} from '@react-spectrum/provider';\nimport {useTextField} from '@react-aria/textfield';\n\nfunction TextArea(props: SpectrumTextFieldProps, ref: RefObject<TextFieldRef>) {\n  props = useProviderProps(props);\n  let {\n    isDisabled = false,\n    isQuiet = false,\n    isReadOnly = false,\n    isRequired = false,\n    onChange,\n    ...otherProps\n  } = props;\n\n  // not in stately because this is so we know when to re-measure, which is a spectrum design\n  let [inputValue, setInputValue] = useControlledState(props.value, props.defaultValue, () => {});\n\n  let inputRef = useRef<HTMLTextAreaElement>();\n\n  let onHeightChange = useCallback(() => {\n    if (isQuiet) {\n      let input = inputRef.current;\n      let prevAlignment = input.style.alignSelf;\n      input.style.alignSelf = 'start';\n      input.style.height = 'auto';\n      input.style.height = `${input.scrollHeight}px`;\n      input.style.alignSelf = prevAlignment;\n    }\n  }, [isQuiet, inputRef]);\n\n  useLayoutEffect(() => {\n    if (inputRef.current) {\n      onHeightChange();\n    }\n  }, [onHeightChange, inputValue, inputRef]);\n\n\n  let {labelProps, inputProps, descriptionProps, errorMessageProps} = useTextField({\n    ...props,\n    onChange: chain(onChange, setInputValue),\n    inputElementType: 'textarea'\n  }, inputRef);\n\n  return (\n    <TextFieldBase\n      {...otherProps}\n      ref={ref}\n      inputRef={inputRef}\n      labelProps={labelProps}\n      inputProps={inputProps}\n      descriptionProps={descriptionProps}\n      errorMessageProps={errorMessageProps}\n      multiLine\n      isDisabled={isDisabled}\n      isQuiet={isQuiet}\n      isReadOnly={isReadOnly}\n      isRequired={isRequired} />\n  );\n}\n\n/**\n * TextAreas are multiline text inputs, useful for cases where users have\n * a sizable amount of text to enter. They allow for all customizations that\n * are available to text fields.\n */\nlet _TextArea = React.forwardRef(TextArea);\nexport {_TextArea as TextArea};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React, {forwardRef, RefObject, useRef} from 'react';\nimport {SpectrumTextFieldProps, TextFieldRef} from '@react-types/textfield';\nimport {TextFieldBase} from './TextFieldBase';\nimport {useProviderProps} from '@react-spectrum/provider';\nimport {useTextField} from '@react-aria/textfield';\n\nfunction TextField(props: SpectrumTextFieldProps, ref: RefObject<TextFieldRef>) {\n  props = useProviderProps(props);\n\n  let inputRef = useRef<HTMLInputElement>();\n  let {labelProps, inputProps, descriptionProps, errorMessageProps} = useTextField(props, inputRef);\n  return (\n    <TextFieldBase\n      {...props}\n      labelProps={labelProps}\n      inputProps={inputProps}\n      descriptionProps={descriptionProps}\n      errorMessageProps={errorMessageProps}\n      ref={ref}\n      inputRef={inputRef} />\n  );\n}\n\n/**\n * TextFields are text inputs that allow users to input custom text entries\n * with a keyboard. Various decorations can be displayed around the field to\n * communicate the entry requirements.\n */\nconst _TextField = forwardRef(TextField);\nexport {_TextField as TextField};\n"]},"metadata":{},"sourceType":"module"}