{"ast":null,"code":"import { filterDOMProps as $9XpHW$filterDOMProps, useId as $9XpHW$useId, mergeProps as $9XpHW$mergeProps, useSlotId as $9XpHW$useSlotId, isMac as $9XpHW$isMac, isWebKit as $9XpHW$isWebKit } from \"@react-aria/utils\";\nimport { useFocusWithin as $9XpHW$useFocusWithin, useHover as $9XpHW$useHover, isFocusVisible as $9XpHW$isFocusVisible } from \"@react-aria/interactions\";\nimport { useLabel as $9XpHW$useLabel } from \"@react-aria/label\";\nimport { useSelectableList as $9XpHW$useSelectableList, useSelectableItem as $9XpHW$useSelectableItem } from \"@react-aria/selection\";\nimport { getItemCount as $9XpHW$getItemCount } from \"@react-stately/collections\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $4599f731efac101a$exports = {};\n$parcel$export($4599f731efac101a$exports, \"useListBox\", () => $4599f731efac101a$export$50eacbbf140a3141);\nvar $fc40a93251bc17d1$exports = {};\n$parcel$export($fc40a93251bc17d1$exports, \"listData\", () => $fc40a93251bc17d1$export$3585ede4d035bf14);\n$parcel$export($fc40a93251bc17d1$exports, \"getItemId\", () => $fc40a93251bc17d1$export$9145995848b05025);\nconst $fc40a93251bc17d1$export$3585ede4d035bf14 = new WeakMap();\n\nfunction $fc40a93251bc17d1$var$normalizeKey(key) {\n  if (typeof key === 'string') return key.replace(/\\s*/g, '');\n  return '' + key;\n}\n\nfunction $fc40a93251bc17d1$export$9145995848b05025(state, itemKey) {\n  let data = $fc40a93251bc17d1$export$3585ede4d035bf14.get(state);\n  if (!data) throw new Error('Unknown list');\n  return `${data.id}-option-${$fc40a93251bc17d1$var$normalizeKey(itemKey)}`;\n}\n\nfunction $4599f731efac101a$export$50eacbbf140a3141(props, state, ref) {\n  let domProps = $9XpHW$filterDOMProps(props, {\n    labelable: true\n  });\n  let {\n    listProps: listProps\n  } = $9XpHW$useSelectableList({ ...props,\n    ref: ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys\n  });\n  let {\n    focusWithinProps: focusWithinProps\n  } = $9XpHW$useFocusWithin({\n    onFocusWithin: props.onFocus,\n    onBlurWithin: props.onBlur,\n    onFocusWithinChange: props.onFocusChange\n  }); // Share list id and some props with child options.\n\n  let id = $9XpHW$useId(props.id);\n  $fc40a93251bc17d1$export$3585ede4d035bf14.set(state, {\n    id: id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized\n  });\n  let {\n    labelProps: labelProps,\n    fieldProps: fieldProps\n  } = $9XpHW$useLabel({ ...props,\n    id: id,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n  return {\n    labelProps: labelProps,\n    listBoxProps: $9XpHW$mergeProps(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, {\n      role: 'listbox',\n      ...$9XpHW$mergeProps(fieldProps, listProps)\n    })\n  };\n}\n\nvar $320d38f7a0623e79$exports = {};\n$parcel$export($320d38f7a0623e79$exports, \"useOption\", () => $320d38f7a0623e79$export$497855f14858aa34);\n\nfunction $320d38f7a0623e79$export$497855f14858aa34(props, state, ref) {\n  let {\n    key: key\n  } = props;\n  let data = $fc40a93251bc17d1$export$3585ede4d035bf14.get(state);\n\n  var _isDisabled;\n\n  let isDisabled = (_isDisabled = props.isDisabled) !== null && _isDisabled !== void 0 ? _isDisabled : state.disabledKeys.has(key);\n\n  var _isSelected;\n\n  let isSelected = (_isSelected = props.isSelected) !== null && _isSelected !== void 0 ? _isSelected : state.selectionManager.isSelected(key);\n  let isFocused = state.selectionManager.focusedKey === key;\n\n  var _shouldSelectOnPressUp;\n\n  let shouldSelectOnPressUp = (_shouldSelectOnPressUp = props.shouldSelectOnPressUp) !== null && _shouldSelectOnPressUp !== void 0 ? _shouldSelectOnPressUp : data.shouldSelectOnPressUp;\n\n  var _shouldFocusOnHover;\n\n  let shouldFocusOnHover = (_shouldFocusOnHover = props.shouldFocusOnHover) !== null && _shouldFocusOnHover !== void 0 ? _shouldFocusOnHover : data.shouldFocusOnHover;\n\n  var _shouldUseVirtualFocus;\n\n  let shouldUseVirtualFocus = (_shouldUseVirtualFocus = props.shouldUseVirtualFocus) !== null && _shouldUseVirtualFocus !== void 0 ? _shouldUseVirtualFocus : data.shouldUseVirtualFocus;\n\n  var _isVirtualized;\n\n  let isVirtualized = (_isVirtualized = props.isVirtualized) !== null && _isVirtualized !== void 0 ? _isVirtualized : data.isVirtualized;\n  let labelId = $9XpHW$useSlotId();\n  let descriptionId = $9XpHW$useSlotId();\n  let optionProps = {\n    role: 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined\n  }; // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n\n  if (!($9XpHW$isMac() && $9XpHW$isWebKit())) {\n    optionProps['aria-label'] = props['aria-label'];\n    optionProps['aria-labelledby'] = labelId;\n    optionProps['aria-describedby'] = descriptionId;\n  }\n\n  if (isVirtualized) {\n    optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    optionProps['aria-setsize'] = $9XpHW$getItemCount(state.collection);\n  }\n\n  let {\n    itemProps: itemProps,\n    isPressed: isPressed\n  } = $9XpHW$useSelectableItem({\n    selectionManager: state.selectionManager,\n    key: key,\n    ref: ref,\n    shouldSelectOnPressUp: shouldSelectOnPressUp,\n    isVirtualized: isVirtualized,\n    shouldUseVirtualFocus: shouldUseVirtualFocus,\n    isDisabled: isDisabled\n  });\n  let {\n    hoverProps: hoverProps\n  } = $9XpHW$useHover({\n    isDisabled: isDisabled || !shouldFocusOnHover,\n\n    onHoverStart() {\n      if (!$9XpHW$isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n\n  });\n  return {\n    optionProps: { ...optionProps,\n      ...$9XpHW$mergeProps(itemProps, hoverProps),\n      id: $fc40a93251bc17d1$export$9145995848b05025(state, key)\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    isFocused: isFocused,\n    isSelected: isSelected,\n    isDisabled: isDisabled,\n    isPressed: isPressed\n  };\n}\n\nvar $da55f015385fe4fc$exports = {};\n$parcel$export($da55f015385fe4fc$exports, \"useListBoxSection\", () => $da55f015385fe4fc$export$c3f9f39876e4bc7);\n\nfunction $da55f015385fe4fc$export$c3f9f39876e4bc7(props) {\n  let {\n    heading: heading,\n    'aria-label': ariaLabel\n  } = props;\n  let headingId = $9XpHW$useId();\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      // Techincally, listbox cannot contain headings according to ARIA.\n      // We hide the heading from assistive technology, and only use it\n      // as a label for the nested group.\n      id: headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}\n\nexport { $4599f731efac101a$export$50eacbbf140a3141 as useListBox, $320d38f7a0623e79$export$497855f14858aa34 as useOption, $da55f015385fe4fc$export$c3f9f39876e4bc7 as useListBoxSection, $fc40a93251bc17d1$export$3585ede4d035bf14 as listData, $fc40a93251bc17d1$export$9145995848b05025 as getItemId };","map":{"version":3,"mappings":"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","names":["$fc40a93251bc17d1$export$3585ede4d035bf14","WeakMap","$fc40a93251bc17d1$var$normalizeKey","key","replace","$fc40a93251bc17d1$export$9145995848b05025","state","itemKey","data","get","Error","id","$4599f731efac101a$export$50eacbbf140a3141","props","ref","domProps","$9XpHW$filterDOMProps","labelable","listProps","$9XpHW$useSelectableList","selectionManager","collection","disabledKeys","focusWithinProps","$9XpHW$useFocusWithin","onFocusWithin","onFocus","onBlurWithin","onBlur","onFocusWithinChange","onFocusChange","$9XpHW$useId","set","shouldUseVirtualFocus","shouldSelectOnPressUp","shouldFocusOnHover","isVirtualized","labelProps","fieldProps","$9XpHW$useLabel","labelElementType","listBoxProps","$9XpHW$mergeProps","selectionMode","role","$320d38f7a0623e79$export$497855f14858aa34","_isDisabled","isDisabled","has","_isSelected","isSelected","isFocused","focusedKey","_shouldSelectOnPressUp","_shouldFocusOnHover","_shouldUseVirtualFocus","_isVirtualized","labelId","$9XpHW$useSlotId","descriptionId","optionProps","undefined","$9XpHW$isMac","$9XpHW$isWebKit","getItem","index","$9XpHW$getItemCount","itemProps","isPressed","$9XpHW$useSelectableItem","hoverProps","$9XpHW$useHover","onHoverStart","$9XpHW$isFocusVisible","setFocused","setFocusedKey","descriptionProps","$da55f015385fe4fc$export$c3f9f39876e4bc7","heading","ariaLabel","headingId","headingProps","groupProps"],"sources":["/Users/asattiraju/Desktop/Big data/gt-bigdata-website/node_modules/@react-aria/listbox/dist/packages/@react-aria/listbox/src/utils.ts","/Users/asattiraju/Desktop/Big data/gt-bigdata-website/node_modules/@react-aria/listbox/dist/packages/@react-aria/listbox/src/useListBox.ts","/Users/asattiraju/Desktop/Big data/gt-bigdata-website/node_modules/@react-aria/listbox/dist/packages/@react-aria/listbox/src/useOption.ts","/Users/asattiraju/Desktop/Big data/gt-bigdata-website/node_modules/@react-aria/listbox/dist/packages/@react-aria/listbox/src/useListBoxSection.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {ListState} from '@react-stately/list';\n\ninterface ListData {\n  id: string,\n  shouldSelectOnPressUp?: boolean,\n  shouldFocusOnHover?: boolean,\n  shouldUseVirtualFocus?: boolean,\n  isVirtualized?: boolean\n}\n\nexport const listData = new WeakMap<ListState<unknown>, ListData>();\n\nfunction normalizeKey(key: Key): string {\n  if (typeof key === 'string') {\n    return key.replace(/\\s*/g, '');\n  }\n\n  return '' + key;\n}\n\nexport function getItemId<T>(state: ListState<T>, itemKey: Key): string {\n  let data = listData.get(state);\n\n  if (!data) {\n    throw new Error('Unknown list');\n  }\n\n  return `${data.id}-option-${normalizeKey(itemKey)}`;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaListBoxProps} from '@react-types/listbox';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {HTMLAttributes, ReactNode, RefObject} from 'react';\nimport {KeyboardDelegate} from '@react-types/shared';\nimport {listData} from './utils';\nimport {ListState} from '@react-stately/list';\nimport {useFocusWithin} from '@react-aria/interactions';\nimport {useId} from '@react-aria/utils';\nimport {useLabel} from '@react-aria/label';\nimport {useSelectableList} from '@react-aria/selection';\n\ninterface ListBoxAria {\n  /** Props for the listbox element. */\n  listBoxProps: HTMLAttributes<HTMLElement>,\n  /** Props for the listbox's visual label element (if any). */\n  labelProps: HTMLAttributes<HTMLElement>\n}\n\nexport interface AriaListBoxOptions<T> extends Omit<AriaListBoxProps<T>, 'children'> {\n  /** Whether the listbox uses virtual scrolling. */\n  isVirtualized?: boolean,\n\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n\n  /**\n   * Whether the listbox items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n\n  /** Whether selection should occur on press up instead of press down. */\n  shouldSelectOnPressUp?: boolean,\n\n  /** Whether options should be focused when the user hovers over them. */\n  shouldFocusOnHover?: boolean,\n\n  /**\n   * An optional visual label for the listbox.\n   */\n  label?: ReactNode\n}\n\n/**\n * Provides the behavior and accessibility implementation for a listbox component.\n * A listbox displays a list of options and allows a user to select one or more of them.\n * @param props - Props for the listbox.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useListBox<T>(props: AriaListBoxOptions<T>, state: ListState<T>, ref: RefObject<HTMLElement>): ListBoxAria {\n  let domProps = filterDOMProps(props, {labelable: true});\n  let {listProps} = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys\n  });\n\n  let {focusWithinProps} = useFocusWithin({\n    onFocusWithin: props.onFocus,\n    onBlurWithin: props.onBlur,\n    onFocusWithinChange: props.onFocusChange\n  });\n\n  // Share list id and some props with child options.\n  let id = useId(props.id);\n  listData.set(state, {\n    id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized\n  });\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    id,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  return {\n    labelProps,\n    listBoxProps: mergeProps(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, {\n      role: 'listbox',\n      ...mergeProps(fieldProps, listProps)\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {getItemCount} from '@react-stately/collections';\nimport {getItemId, listData} from './utils';\nimport {HTMLAttributes, Key, RefObject} from 'react';\nimport {isFocusVisible, useHover} from '@react-aria/interactions';\nimport {isMac, isWebKit, mergeProps, useSlotId} from '@react-aria/utils';\nimport {ListState} from '@react-stately/list';\nimport {useSelectableItem} from '@react-aria/selection';\n\ninterface OptionAria {\n  /** Props for the option element. */\n  optionProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the main text element inside the option. */\n  labelProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the description text element inside the option, if any. */\n  descriptionProps: HTMLAttributes<HTMLElement>,\n\n  /** Whether the option is currently focused. */\n  isFocused: boolean,\n  /** Whether the option is currently selected. */\n  isSelected: boolean,\n  /** Whether the option is currently in a pressed state. */\n  isPressed: boolean,\n  /** Whether the option is disabled. */\n  isDisabled: boolean\n}\n\ninterface AriaOptionProps {\n  /**\n   * Whether the option is disabled.\n   * @deprecated\n   */\n  isDisabled?: boolean,\n\n  /**\n   * Whether the option is selected.\n   * @deprecated\n   */\n  isSelected?: boolean,\n\n  /** A screen reader only label for the option. */\n  'aria-label'?: string,\n\n  /** The unique key for the option. */\n  key: Key,\n\n  /**\n   * Whether selection should occur on press up instead of press down.\n   * @deprecated\n   */\n  shouldSelectOnPressUp?: boolean,\n\n  /**\n   * Whether the option should be focused when the user hovers over it.\n   * @deprecated\n   */\n  shouldFocusOnHover?: boolean,\n\n  /**\n   * Whether the option is contained in a virtual scrolling listbox.\n   * @deprecated\n   */\n  isVirtualized?: boolean,\n\n  /**\n   * Whether the option should use virtual focus instead of being focused directly.\n   * @deprecated\n   */\n  shouldUseVirtualFocus?: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for an option in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the option.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useOption<T>(props: AriaOptionProps, state: ListState<T>, ref: RefObject<HTMLElement>): OptionAria {\n  let {\n    key\n  } = props;\n\n  let data = listData.get(state);\n\n  let isDisabled = props.isDisabled ?? state.disabledKeys.has(key);\n  let isSelected = props.isSelected ?? state.selectionManager.isSelected(key);\n  let isFocused = state.selectionManager.focusedKey === key;\n  let shouldSelectOnPressUp = props.shouldSelectOnPressUp ?? data.shouldSelectOnPressUp;\n  let shouldFocusOnHover = props.shouldFocusOnHover ?? data.shouldFocusOnHover;\n  let shouldUseVirtualFocus = props.shouldUseVirtualFocus ?? data.shouldUseVirtualFocus;\n  let isVirtualized = props.isVirtualized ?? data.isVirtualized;\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n\n  let optionProps = {\n    role: 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined\n  };\n\n  // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n  if (!(isMac() && isWebKit())) {\n    optionProps['aria-label'] = props['aria-label'];\n    optionProps['aria-labelledby'] = labelId;\n    optionProps['aria-describedby'] = descriptionId;\n  }\n\n  if (isVirtualized) {\n    optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    optionProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let {itemProps, isPressed} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    isVirtualized,\n    shouldUseVirtualFocus,\n    isDisabled\n  });\n\n  let {hoverProps} = useHover({\n    isDisabled: isDisabled || !shouldFocusOnHover,\n    onHoverStart() {\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  });\n\n  return {\n    optionProps: {\n      ...optionProps,\n      ...mergeProps(itemProps, hoverProps),\n      id: getItemId(state, key)\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    isFocused,\n    isSelected,\n    isDisabled,\n    isPressed\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {HTMLAttributes, ReactNode} from 'react';\nimport {useId} from '@react-aria/utils';\n\ninterface AriaListBoxSectionProps {\n  /** The heading for the section. */\n  heading?: ReactNode,\n  /** An accessibility label for the section. Required if `heading` is not present. */\n  'aria-label'?: string\n}\n\ninterface ListBoxSectionAria {\n  /** Props for the wrapper list item. */\n  itemProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the heading element, if any. */\n  headingProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the group element. */\n  groupProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a section in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the section.\n */\nexport function useListBoxSection(props: AriaListBoxSectionProps): ListBoxSectionAria {\n  let {heading, 'aria-label': ariaLabel} = props;\n  let headingId = useId();\n\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      // Techincally, listbox cannot contain headings according to ARIA.\n      // We hide the heading from assistive technology, and only use it\n      // as a label for the nested group.\n      id: headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}