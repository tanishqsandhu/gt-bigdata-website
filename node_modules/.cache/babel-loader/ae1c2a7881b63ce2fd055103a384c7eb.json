{"ast":null,"code":"import \"./main.css\";\nimport { useSlotProps as $dqQfL$useSlotProps, useStyleProps as $dqQfL$useStyleProps, useDOMRef as $dqQfL$useDOMRef, useResizeObserver as $dqQfL$useResizeObserver, classNames as $dqQfL$classNames, SlotProvider as $dqQfL$SlotProvider } from \"@react-spectrum/utils\";\nimport { useValueEffect as $dqQfL$useValueEffect, filterDOMProps as $dqQfL$filterDOMProps } from \"@react-aria/utils\";\nimport { useProvider as $dqQfL$useProvider, useProviderProps as $dqQfL$useProviderProps, Provider as $dqQfL$Provider } from \"@react-spectrum/provider\";\nimport $dqQfL$react, { useCallback as $dqQfL$useCallback, useEffect as $dqQfL$useEffect, useRef as $dqQfL$useRef } from \"react\";\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $5e39a78e785c6a30$exports = {};\n$parcel$export($5e39a78e785c6a30$exports, \"ButtonGroup\", () => $5e39a78e785c6a30$export$69b1032f2ecdf404);\nvar $78cc0793b2d6df26$exports = {};\n$parcel$export($78cc0793b2d6df26$exports, \"spectrum-ButtonGroup\", () => $78cc0793b2d6df26$export$a92faf51352ac608, v => $78cc0793b2d6df26$export$a92faf51352ac608 = v);\n$parcel$export($78cc0793b2d6df26$exports, \"spectrum-ButtonGroup-Button\", () => $78cc0793b2d6df26$export$7184de2337c1927f, v => $78cc0793b2d6df26$export$7184de2337c1927f = v);\n$parcel$export($78cc0793b2d6df26$exports, \"spectrum-ButtonGroup--alignEnd\", () => $78cc0793b2d6df26$export$30e96c53d7beca11, v => $78cc0793b2d6df26$export$30e96c53d7beca11 = v);\n$parcel$export($78cc0793b2d6df26$exports, \"spectrum-ButtonGroup--alignCenter\", () => $78cc0793b2d6df26$export$252bc7c4ae05757, v => $78cc0793b2d6df26$export$252bc7c4ae05757 = v);\n$parcel$export($78cc0793b2d6df26$exports, \"spectrum-ButtonGroup--vertical\", () => $78cc0793b2d6df26$export$84d9c0e1917a4eaf, v => $78cc0793b2d6df26$export$84d9c0e1917a4eaf = v);\nvar $78cc0793b2d6df26$export$a92faf51352ac608;\nvar $78cc0793b2d6df26$export$7184de2337c1927f;\nvar $78cc0793b2d6df26$export$30e96c53d7beca11;\nvar $78cc0793b2d6df26$export$252bc7c4ae05757;\nvar $78cc0793b2d6df26$export$84d9c0e1917a4eaf;\n$78cc0793b2d6df26$export$a92faf51352ac608 = \"spectrum-ButtonGroup_b10c2f\";\n$78cc0793b2d6df26$export$7184de2337c1927f = \"spectrum-ButtonGroup-Button_b10c2f\";\n$78cc0793b2d6df26$export$30e96c53d7beca11 = \"spectrum-ButtonGroup--alignEnd_b10c2f\";\n$78cc0793b2d6df26$export$252bc7c4ae05757 = \"spectrum-ButtonGroup--alignCenter_b10c2f\";\n$78cc0793b2d6df26$export$84d9c0e1917a4eaf = \"spectrum-ButtonGroup--vertical_b10c2f\";\n\nfunction $5e39a78e785c6a30$var$ButtonGroup(props, ref) {\n  let {\n    scale: scale\n  } = $dqQfL$useProvider();\n  props = $dqQfL$useProviderProps(props);\n  props = $dqQfL$useSlotProps(props, 'buttonGroup');\n  let {\n    children: children,\n    orientation = 'horizontal',\n    isDisabled: isDisabled,\n    align = 'start',\n    ...otherProps\n  } = props;\n  let {\n    styleProps: styleProps\n  } = $dqQfL$useStyleProps(otherProps);\n  let domRef = $dqQfL$useDOMRef(ref);\n  let [hasOverflow, setHasOverflow] = $dqQfL$useValueEffect(false);\n  let checkForOverflow = $dqQfL$useCallback(() => {\n    let computeHasOverflow = () => {\n      if (domRef.current && orientation === 'horizontal') {\n        let buttonGroupChildren = Array.from(domRef.current.children);\n        let maxX = domRef.current.offsetWidth + 1; // + 1 to account for rounding errors\n        // If any buttons have negative X positions (align=\"end\") or extend beyond\n        // the width of the button group (align=\"start\"), then switch to vertical.\n\n        if (buttonGroupChildren.some(child => child.offsetLeft < 0 || child.offsetLeft + child.offsetWidth > maxX)) return true;\n        return false;\n      }\n    };\n\n    if (orientation === 'horizontal') setHasOverflow(function* () {\n      // Force to horizontal for measurement.\n      yield false; // Measure, and update if there is overflow.\n\n      yield computeHasOverflow();\n    });\n  }, [domRef, orientation, scale, setHasOverflow, children]); // There are two main reasons we need to remeasure:\n  // 1. Internal changes: Check for initial overflow or when orientation/scale/children change (from checkForOverflow dep array)\n\n  $dqQfL$useEffect(() => {\n    checkForOverflow();\n  }, [checkForOverflow]); // 2. External changes: buttongroup won't change size due to any parents changing size, so listen to its container for size changes to figure out if we should remeasure\n\n  let parent = $dqQfL$useRef();\n  $dqQfL$useEffect(() => {\n    parent.current = domRef.current.parentElement;\n  }, [domRef.current]);\n  $dqQfL$useResizeObserver({\n    ref: parent,\n    onResize: checkForOverflow\n  });\n  return /*#__PURE__*/$dqQfL$react.createElement(\"div\", { ...$dqQfL$filterDOMProps(otherProps),\n    ...styleProps,\n    ref: domRef,\n    className: $dqQfL$classNames( /*@__PURE__*/$parcel$interopDefault($78cc0793b2d6df26$exports), 'spectrum-ButtonGroup', {\n      'spectrum-ButtonGroup--vertical': orientation === 'vertical' || hasOverflow,\n      'spectrum-ButtonGroup--alignEnd': align === 'end',\n      'spectrum-ButtonGroup--alignCenter': align === 'center'\n    }, styleProps.className)\n  }, /*#__PURE__*/$dqQfL$react.createElement($dqQfL$SlotProvider, {\n    slots: {\n      button: {\n        UNSAFE_className: $dqQfL$classNames( /*@__PURE__*/$parcel$interopDefault($78cc0793b2d6df26$exports), 'spectrum-ButtonGroup-Button')\n      }\n    }\n  }, /*#__PURE__*/$dqQfL$react.createElement($dqQfL$Provider, {\n    isDisabled: isDisabled\n  }, children)));\n}\n/**\n * ButtonGroup handles overflow for a grouping of buttons whose actions are related to each other.\n */\n\n\nlet $5e39a78e785c6a30$export$69b1032f2ecdf404 = /*#__PURE__*/$dqQfL$react.forwardRef($5e39a78e785c6a30$var$ButtonGroup);\nexport { $5e39a78e785c6a30$export$69b1032f2ecdf404 as ButtonGroup };","map":{"version":3,"mappings":"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","names":["$78cc0793b2d6df26$export$a92faf51352ac608","$78cc0793b2d6df26$export$7184de2337c1927f","$78cc0793b2d6df26$export$30e96c53d7beca11","$78cc0793b2d6df26$export$252bc7c4ae05757","$78cc0793b2d6df26$export$84d9c0e1917a4eaf","$5e39a78e785c6a30$var$ButtonGroup","props","ref","scale","$dqQfL$useProvider","$dqQfL$useProviderProps","$dqQfL$useSlotProps","children","orientation","isDisabled","align","otherProps","styleProps","$dqQfL$useStyleProps","domRef","$dqQfL$useDOMRef","hasOverflow","setHasOverflow","$dqQfL$useValueEffect","checkForOverflow","$dqQfL$useCallback","computeHasOverflow","current","buttonGroupChildren","Array","from","maxX","offsetWidth","some","child","offsetLeft","$dqQfL$useEffect","parent","$dqQfL$useRef","parentElement","$dqQfL$useResizeObserver","onResize","$dqQfL$filterDOMProps","className","$dqQfL$classNames","$dqQfL$SlotProvider","slots","button","UNSAFE_className","$dqQfL$Provider","$5e39a78e785c6a30$export$69b1032f2ecdf404","$dqQfL$react","forwardRef"],"sources":["/Users/asattiraju/Desktop/gt-bigdata-website/node_modules/@react-spectrum/buttongroup/dist/packages/@adobe/spectrum-css-temp/components/buttongroup/vars.css","/Users/asattiraju/Desktop/gt-bigdata-website/node_modules/@react-spectrum/buttongroup/dist/packages/@react-spectrum/buttongroup/src/ButtonGroup.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n@import './index.css';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  classNames,\n  SlotProvider,\n  useDOMRef,\n  useResizeObserver,\n  useSlotProps,\n  useStyleProps\n} from '@react-spectrum/utils';\nimport {DOMRef} from '@react-types/shared';\nimport {filterDOMProps, useValueEffect} from '@react-aria/utils';\nimport {Provider, useProvider, useProviderProps} from '@react-spectrum/provider';\nimport React, {useCallback, useEffect, useRef} from 'react';\nimport {SpectrumButtonGroupProps} from '@react-types/buttongroup';\nimport styles from '@adobe/spectrum-css-temp/components/buttongroup/vars.css';\n\nfunction ButtonGroup(props: SpectrumButtonGroupProps, ref: DOMRef<HTMLDivElement>) {\n  let {scale} = useProvider();\n  props = useProviderProps(props);\n  props = useSlotProps(props, 'buttonGroup');\n\n  let {\n    children,\n    orientation = 'horizontal',\n    isDisabled,\n    align = 'start',\n    ...otherProps\n  } = props;\n\n  let {styleProps} = useStyleProps(otherProps);\n  let domRef = useDOMRef(ref);\n  let [hasOverflow, setHasOverflow] = useValueEffect(false);\n\n  let checkForOverflow = useCallback(() => {\n    let computeHasOverflow = () => {\n      if (domRef.current && orientation === 'horizontal') {\n        let buttonGroupChildren = Array.from(domRef.current.children) as HTMLElement[];\n        let maxX = domRef.current.offsetWidth + 1; // + 1 to account for rounding errors\n        // If any buttons have negative X positions (align=\"end\") or extend beyond\n        // the width of the button group (align=\"start\"), then switch to vertical.\n        if (buttonGroupChildren.some(child => child.offsetLeft < 0 || child.offsetLeft + child.offsetWidth > maxX)) {\n          return true;\n        }\n        return false;\n      }\n    };\n    if (orientation === 'horizontal') {\n      setHasOverflow(function* () {\n        // Force to horizontal for measurement.\n        yield false;\n\n        // Measure, and update if there is overflow.\n        yield computeHasOverflow();\n      });\n    }\n  }, [domRef, orientation, scale, setHasOverflow, children]);\n\n  // There are two main reasons we need to remeasure:\n  // 1. Internal changes: Check for initial overflow or when orientation/scale/children change (from checkForOverflow dep array)\n  useEffect(() => {\n    checkForOverflow();\n  }, [checkForOverflow]);\n\n  // 2. External changes: buttongroup won't change size due to any parents changing size, so listen to its container for size changes to figure out if we should remeasure\n  let parent = useRef<HTMLElement>();\n  useEffect(() => {\n    parent.current = domRef.current.parentElement;\n  }, [domRef.current]);\n  useResizeObserver({ref: parent, onResize: checkForOverflow});\n\n  return (\n    <div\n      {...filterDOMProps(otherProps)}\n      {...styleProps}\n      ref={domRef}\n      className={\n        classNames(\n          styles,\n          'spectrum-ButtonGroup',\n          {\n            'spectrum-ButtonGroup--vertical': orientation === 'vertical' || hasOverflow,\n            'spectrum-ButtonGroup--alignEnd': align === 'end',\n            'spectrum-ButtonGroup--alignCenter': align === 'center'\n          },\n          styleProps.className\n        )\n      }>\n      <SlotProvider\n        slots={{\n          button: {\n            UNSAFE_className: classNames(styles, 'spectrum-ButtonGroup-Button')\n          }\n        }}>\n        <Provider isDisabled={isDisabled}>\n          {children}\n        </Provider>\n      </SlotProvider>\n    </div>\n  );\n}\n\n/**\n * ButtonGroup handles overflow for a grouping of buttons whose actions are related to each other.\n */\nlet _ButtonGroup = React.forwardRef(ButtonGroup);\nexport {_ButtonGroup as ButtonGroup};\n"]},"metadata":{},"sourceType":"module"}